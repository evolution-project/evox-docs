{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Evolution Network - EvoX 2.0 \u00b6 | Home Page | BlockChain Explorer | GitHub | Discord | Twitter | Telegram | Forum | Hybrid, Secure, Scalable, Privacy \u00b6 With more then 2 years from when the project was start, Evolution has evolved a lot thanks to community and EvoX Dev team. EvoX Devs would like to say Thank You all for the continuing support over the years. And a special thanks for the support that was given to me by 2 good persons, A and M. Evolution a project that was born from passion and learning, it was made to make crypto popular and learning about it but at the same time aim to be secure and private coin. Evolution is a private, secure, untraceable, decentralised digital currency. You are your bank, you control your funds, your coins dont leave your wallet, and nobody can trace your transfers unless you allow them to do so. With a Hybrid Blockchain PoW + PoS and high level of security added by the PoS plus scalability that was need it this days and a privacy level of transactions make from EvoX 2.0 a better coin that was before and more stabile and secure Evolution Docs attempts to organize basic technical knowledge of Evolution in one place. The goal is to educate and onboard power users faster. Please submit your feedback and corrections directly on GitHub . Contact ArtFix [ artfix@protonmail.com ] Warning Work in Progress !","title":"Home"},{"location":"#evolution-network-evox-20","text":"| Home Page | BlockChain Explorer | GitHub | Discord | Twitter | Telegram | Forum |","title":"Evolution Network - EvoX 2.0"},{"location":"#hybrid-secure-scalable-privacy","text":"With more then 2 years from when the project was start, Evolution has evolved a lot thanks to community and EvoX Dev team. EvoX Devs would like to say Thank You all for the continuing support over the years. And a special thanks for the support that was given to me by 2 good persons, A and M. Evolution a project that was born from passion and learning, it was made to make crypto popular and learning about it but at the same time aim to be secure and private coin. Evolution is a private, secure, untraceable, decentralised digital currency. You are your bank, you control your funds, your coins dont leave your wallet, and nobody can trace your transfers unless you allow them to do so. With a Hybrid Blockchain PoW + PoS and high level of security added by the PoS plus scalability that was need it this days and a privacy level of transactions make from EvoX 2.0 a better coin that was before and more stabile and secure Evolution Docs attempts to organize basic technical knowledge of Evolution in one place. The goal is to educate and onboard power users faster. Please submit your feedback and corrections directly on GitHub . Contact ArtFix [ artfix@protonmail.com ] Warning Work in Progress !","title":"Hybrid, Secure, Scalable, Privacy"},{"location":"crypto-dictionar/","text":"Crypto Dictionar \u00b6 These crypto definitions will help you in your whitepaper research. We will update the crypto dictionary with new terms regularly! 51% Attack \u00b6 51% Attack is the situation where more than half of the computer power running a blockchain are controlled by one person or one group of people with bad intentions. That person or group with the majority power can manipulate transactions in his favor. By preventing new transactions from being included in the blockchain and/or reversing transactions so they can spend the same money again and again, known as a double-spend. Abstract \u00b6 A summary of a larger written written document. Abstracts are common in the beginning of cryptocurrency whitepapers and technical documents to briefly describe the entire document. Anti-Money Laundering or AML \u00b6 A set of laws designed to prevent converting illegally earned money into what appears to be legally earned money. Laundering just means cleaning something that is dirty. Money laundering is the process of making illegally earned money (dirty money) appear to be legally earned (clean money). Anti-money laundering rules and laws are designed to make it difficult for criminals to launder their money. Airdrop \u00b6 Is the process of freely distributing a new cryptocurrency to people hopefully creating more demand. When a new cryptocurrency is created, it needs to gain users. One way of doing this through an airdrop. The group issuing the airdrop hopes new users will begin researching and sharing the coin creating more demand. Altcoin \u00b6 Any cryptocurrency except for Bitcoin. \u201cAltcoin\u201d is a combination of two words: \u201calternative Bitcoin\u201d or \u201calternative coin\u201d Algorithm \u00b6 A series of steps that will solve a problem. In cryptocurrencies, algorithms are used to hide and reveal information. Atomic swap \u00b6 Atomic swaps are a mechanism where one cryptocurrency can be exchanged directly for another cryptocurrency, without the need for a trusted third party such as an exchange. Alias \u00b6 Human readable name associated with a payment address and text comment, which is stored in the blockchain. Blockchain \u00b6 A system (ledger) in which a record of transactions made in cryptocurrency are maintained across several computers that are linked in a peer-to-peer network. The validity of each cryptocurrency\u2019s coins is provided by a blockchain. A blockchain is a continuously growing list of records, called blocks, which are linked and secured using cryptography.[23][26] Each block typically contains a hash pointer as a link to a previous block,[26] a timestamp and transaction data.[27] By design, blockchains are inherently resistant to modification of the data. It is \u201can open, distributed ledger that can record transactions between two parties efficiently and in a verifiable and permanent way\u201d.[28] For use as a distributed ledger, a blockchain is typically managed by a peer-to-peer network collectively adhering to a protocol for validating new blocks. Once recorded, the data in any given block cannot be altered retroactively without the alteration of all subsequent blocks, which requires collusion of the network majority. Blockchains are secure by design and are an example of a distributed computing system with high Byzantine fault tolerance. Decentralized consensus has therefore been achieved with a blockchain.[29] Blockchains solve the double-spending problem without the need of a trusted authority or central server, assuming no 51% attack (that has worked against several cryptocurrencies). Block Height \u00b6 The number of blocks in the chain between any given block and the very first block in the blockchain. Block Reward \u00b6 Reward for maintaining the blockchain. Maintaining the blockchain requires computer power and electricity or risking a large amount of cryptocurrency as a guarantee that you are trustworthy. Anyone doing this work is eligible to earn a reward in digital money and sometimes brand new, virgin cryptocurrency. Crypto \u00b6 Short for cryptography or cryptocurrency. Crypto comes from the Greek word meaning \u201chidden\u201d. Cold storage \u00b6 A type of digital data storage that takes longer to access and quite often is not connected to the Internet. Also known as a \u201ccold wallet\u201d. Confirmation \u00b6 A type of proof that a transaction was recorded and verified on the blockchain. The higher number of confirmations, the more trusted that transaction is. Decentralized \u00b6 A type of system where elements are spread out by some means, with decisions made from many points, and independence is preserved across the network. Decentralization is actually a combination of 3 parts making up a triangle: Structure: A system located in multiple places across a space, is a decentralized structure. Management: A system managed by my many equally powerful units, with no single ruling unit is a decentralized management. Independence: A system made up of independent units working together for a common purpose is a decentralized independence. Decentralized Application or dApp \u00b6 A software application that has its technology running publicly on a network of computers. Digital currency \u00b6 Digital currency (digital money, electronic money or electronic currency) is a type of currency available in digital form (in contrast to physical, such as banknotes and coins). It exhibits properties similar to physical currencies, but can allow for instantaneous transactions and borderless transfer-of-ownership. Examples include virtual currencies, cryptocurrencies, and central bank digital currency. These currencies may be used to buy physical goods and services, but may also be restricted to certain communities such as for use inside an online game. Digital Signature \u00b6 A digital signature is a mathematical scheme for verifying the authenticity of digital messages or documents. A valid digital signature, where the prerequisites are satisfied, gives a recipient very strong reason to believe that the message was created by a known sender (authentication), and that the message was not altered in transit (integrity). Double-spending \u00b6 A form of deceit using digital money where the same money is promised to two parties but only delivered to one. If completed successfully, one of the two recipients will not be paid. ERC-20 \u00b6 A proposed set of rules and standards for creating new cryptocurrency using Ethereum as the foundation. ERC-20 describes crypto made with Ethereum technology that follow these rules and standards. Exchanges \u00b6 Cryptocurrency exchanges allow customers to trade cryptocurrencies for other assets, such as conventional fiat money, or to trade between different digital currencies. Genesis Block \u00b6 A blockchain is a digital book of records where each new page made in that book is what is known as a \u201cblock\u201d. Those blocks are connected in one group known as the blockchain. The first block in a blockchain is known as the genesis block. Hard Fork \u00b6 Hard fork is defined as a decision to make a permanent change to the technology used by a cryptocurrency. Hash Rate \u00b6 The speed at which a computer can take any set of information and turn it into letters and numbers of a certain length, known as a \u201chash\u201d. Hash rate is also the combined hash speed of every computer in the network. Hash rate is calculated at hashes per second (h/s). Know Your Customer [KYC] \u00b6 A customer identification process required by law for financial organizations. Mining \u00b6 In cryptocurrency networks, mining is a validation of transactions. For this effort, successful miners obtain new cryptocurrency as a reward. The reward decreases transaction fees by creating a complementary incentive to contribute to the processing power of the network. The rate of generating hashes, which validate any transaction, has been increased by the use of specialized machines such as FPGAs and ASICs running complex hashing algorithms like SHA-256 and Scrypt. Node \u00b6 Any computing device (computer, phone, etc.) that is participating in a network by way of receiving and sending data. Cryptocurrencies are supported by a network of computers each keeping a digital record of the data known as a blockchain. A computer, a phone, or any other computing device that can receive, transmit, and/or contribute to the blockchain is a node. Peer to peer or P2P \u00b6 A connection between two or more computers that allows them to directly share information, files, or other data. Private key \u00b6 A string of letters and numbers known only by the owner that allows them to spend their cryptocurrency. NEVER SHARE your private key unless you want someone else to be able to take all of your money! Proof of Work or PoW \u00b6 A process for achieving consensus and building on a digital record known as a blockchain. With PoW, users compete with each other via their computers to solve a puzzle. Proof of Stake or PoS \u00b6 A process for achieving consensus and building on a digital record known as a blockchain. With PoS, users put up a collateral of tokens (or a \u201cstake\u201d) and use a process that is more energy and cost-efficient than previous solutions. Pump and Dump \u00b6 Pump and dump is defined as an illegal manipulation of an asset (stock, cryptocurrency, etc.) where people increase the price (the pump) so that they can sell it at those high prices for a profit (the dump). Smart contract \u00b6 An agreement to exchange goods, services, or money that will automatically execute, without third party oversight, so long as established criteria are met. Timestamp \u00b6 Cryptocurrencies use various timestamping schemes to \u201cprove\u201d the validity of transactions added to the blockchain ledger without the need for a trusted third party. The most widely used proof-of-work schemes are based on SHA-256 and scrypt. Some other hashing algorithms that are used for proof-of-work include CryptoNight, Blake, SHA-3, and X11. The proof-of-stake is a method of securing a cryptocurrency network and achieving distributed consensus through requesting users to show ownership of a certain amount of currency. It is different from proof-of-work systems that run difficult hashing algorithms to validate electronic transactions. The scheme is largely dependent on the coin, and there\u2019s currently no standard form of it. Some cryptocurrencies use a combined proof-of-work/proof-of-stake scheme. Transaction Fee [TX Fee] \u00b6 Transaction fees for cryptocurrency depend mainly on the supply of network capacity at the time, versus the demand from the currency holder for a faster transaction. The currency holder can choose a specific transaction fee, while network entities process transactions in order of highest offered fee to lowest. Cryptocurrency exchanges can simplify the process for currency holders by offering priority alternatives and thereby determine which fee will likely cause the transaction to be processed in the requested time. Wallet \u00b6 A cryptocurrency wallet stores the public and private \u201ckeys\u201d or \u201caddresses\u201d which can be used to receive or spend the cryptocurrency. With the private key, it is possible to write in the public ledger, effectively spending the associated cryptocurrency. With the public key, it is possible for others to send currency to the wallet.","title":"Crypto Definitions"},{"location":"crypto-dictionar/#crypto-dictionar","text":"These crypto definitions will help you in your whitepaper research. We will update the crypto dictionary with new terms regularly!","title":"Crypto Dictionar"},{"location":"crypto-dictionar/#51-attack","text":"51% Attack is the situation where more than half of the computer power running a blockchain are controlled by one person or one group of people with bad intentions. That person or group with the majority power can manipulate transactions in his favor. By preventing new transactions from being included in the blockchain and/or reversing transactions so they can spend the same money again and again, known as a double-spend.","title":"51% Attack"},{"location":"crypto-dictionar/#abstract","text":"A summary of a larger written written document. Abstracts are common in the beginning of cryptocurrency whitepapers and technical documents to briefly describe the entire document.","title":"Abstract"},{"location":"crypto-dictionar/#anti-money-laundering-or-aml","text":"A set of laws designed to prevent converting illegally earned money into what appears to be legally earned money. Laundering just means cleaning something that is dirty. Money laundering is the process of making illegally earned money (dirty money) appear to be legally earned (clean money). Anti-money laundering rules and laws are designed to make it difficult for criminals to launder their money.","title":"Anti-Money Laundering or AML"},{"location":"crypto-dictionar/#airdrop","text":"Is the process of freely distributing a new cryptocurrency to people hopefully creating more demand. When a new cryptocurrency is created, it needs to gain users. One way of doing this through an airdrop. The group issuing the airdrop hopes new users will begin researching and sharing the coin creating more demand.","title":"Airdrop"},{"location":"crypto-dictionar/#altcoin","text":"Any cryptocurrency except for Bitcoin. \u201cAltcoin\u201d is a combination of two words: \u201calternative Bitcoin\u201d or \u201calternative coin\u201d","title":"Altcoin"},{"location":"crypto-dictionar/#algorithm","text":"A series of steps that will solve a problem. In cryptocurrencies, algorithms are used to hide and reveal information.","title":"Algorithm"},{"location":"crypto-dictionar/#atomic-swap","text":"Atomic swaps are a mechanism where one cryptocurrency can be exchanged directly for another cryptocurrency, without the need for a trusted third party such as an exchange.","title":"Atomic swap"},{"location":"crypto-dictionar/#alias","text":"Human readable name associated with a payment address and text comment, which is stored in the blockchain.","title":"Alias"},{"location":"crypto-dictionar/#blockchain","text":"A system (ledger) in which a record of transactions made in cryptocurrency are maintained across several computers that are linked in a peer-to-peer network. The validity of each cryptocurrency\u2019s coins is provided by a blockchain. A blockchain is a continuously growing list of records, called blocks, which are linked and secured using cryptography.[23][26] Each block typically contains a hash pointer as a link to a previous block,[26] a timestamp and transaction data.[27] By design, blockchains are inherently resistant to modification of the data. It is \u201can open, distributed ledger that can record transactions between two parties efficiently and in a verifiable and permanent way\u201d.[28] For use as a distributed ledger, a blockchain is typically managed by a peer-to-peer network collectively adhering to a protocol for validating new blocks. Once recorded, the data in any given block cannot be altered retroactively without the alteration of all subsequent blocks, which requires collusion of the network majority. Blockchains are secure by design and are an example of a distributed computing system with high Byzantine fault tolerance. Decentralized consensus has therefore been achieved with a blockchain.[29] Blockchains solve the double-spending problem without the need of a trusted authority or central server, assuming no 51% attack (that has worked against several cryptocurrencies).","title":"Blockchain"},{"location":"crypto-dictionar/#block-height","text":"The number of blocks in the chain between any given block and the very first block in the blockchain.","title":"Block Height"},{"location":"crypto-dictionar/#block-reward","text":"Reward for maintaining the blockchain. Maintaining the blockchain requires computer power and electricity or risking a large amount of cryptocurrency as a guarantee that you are trustworthy. Anyone doing this work is eligible to earn a reward in digital money and sometimes brand new, virgin cryptocurrency.","title":"Block Reward"},{"location":"crypto-dictionar/#crypto","text":"Short for cryptography or cryptocurrency. Crypto comes from the Greek word meaning \u201chidden\u201d.","title":"Crypto"},{"location":"crypto-dictionar/#cold-storage","text":"A type of digital data storage that takes longer to access and quite often is not connected to the Internet. Also known as a \u201ccold wallet\u201d.","title":"Cold storage"},{"location":"crypto-dictionar/#confirmation","text":"A type of proof that a transaction was recorded and verified on the blockchain. The higher number of confirmations, the more trusted that transaction is.","title":"Confirmation"},{"location":"crypto-dictionar/#decentralized","text":"A type of system where elements are spread out by some means, with decisions made from many points, and independence is preserved across the network. Decentralization is actually a combination of 3 parts making up a triangle: Structure: A system located in multiple places across a space, is a decentralized structure. Management: A system managed by my many equally powerful units, with no single ruling unit is a decentralized management. Independence: A system made up of independent units working together for a common purpose is a decentralized independence.","title":"Decentralized"},{"location":"crypto-dictionar/#decentralized-application-or-dapp","text":"A software application that has its technology running publicly on a network of computers.","title":"Decentralized Application or dApp"},{"location":"crypto-dictionar/#digital-currency","text":"Digital currency (digital money, electronic money or electronic currency) is a type of currency available in digital form (in contrast to physical, such as banknotes and coins). It exhibits properties similar to physical currencies, but can allow for instantaneous transactions and borderless transfer-of-ownership. Examples include virtual currencies, cryptocurrencies, and central bank digital currency. These currencies may be used to buy physical goods and services, but may also be restricted to certain communities such as for use inside an online game.","title":"Digital currency"},{"location":"crypto-dictionar/#digital-signature","text":"A digital signature is a mathematical scheme for verifying the authenticity of digital messages or documents. A valid digital signature, where the prerequisites are satisfied, gives a recipient very strong reason to believe that the message was created by a known sender (authentication), and that the message was not altered in transit (integrity).","title":"Digital Signature"},{"location":"crypto-dictionar/#double-spending","text":"A form of deceit using digital money where the same money is promised to two parties but only delivered to one. If completed successfully, one of the two recipients will not be paid.","title":"Double-spending"},{"location":"crypto-dictionar/#erc-20","text":"A proposed set of rules and standards for creating new cryptocurrency using Ethereum as the foundation. ERC-20 describes crypto made with Ethereum technology that follow these rules and standards.","title":"ERC-20"},{"location":"crypto-dictionar/#exchanges","text":"Cryptocurrency exchanges allow customers to trade cryptocurrencies for other assets, such as conventional fiat money, or to trade between different digital currencies.","title":"Exchanges"},{"location":"crypto-dictionar/#genesis-block","text":"A blockchain is a digital book of records where each new page made in that book is what is known as a \u201cblock\u201d. Those blocks are connected in one group known as the blockchain. The first block in a blockchain is known as the genesis block.","title":"Genesis Block"},{"location":"crypto-dictionar/#hard-fork","text":"Hard fork is defined as a decision to make a permanent change to the technology used by a cryptocurrency.","title":"Hard Fork"},{"location":"crypto-dictionar/#hash-rate","text":"The speed at which a computer can take any set of information and turn it into letters and numbers of a certain length, known as a \u201chash\u201d. Hash rate is also the combined hash speed of every computer in the network. Hash rate is calculated at hashes per second (h/s).","title":"Hash Rate"},{"location":"crypto-dictionar/#know-your-customer-kyc","text":"A customer identification process required by law for financial organizations.","title":"Know Your Customer [KYC]"},{"location":"crypto-dictionar/#mining","text":"In cryptocurrency networks, mining is a validation of transactions. For this effort, successful miners obtain new cryptocurrency as a reward. The reward decreases transaction fees by creating a complementary incentive to contribute to the processing power of the network. The rate of generating hashes, which validate any transaction, has been increased by the use of specialized machines such as FPGAs and ASICs running complex hashing algorithms like SHA-256 and Scrypt.","title":"Mining"},{"location":"crypto-dictionar/#node","text":"Any computing device (computer, phone, etc.) that is participating in a network by way of receiving and sending data. Cryptocurrencies are supported by a network of computers each keeping a digital record of the data known as a blockchain. A computer, a phone, or any other computing device that can receive, transmit, and/or contribute to the blockchain is a node.","title":"Node"},{"location":"crypto-dictionar/#peer-to-peer-or-p2p","text":"A connection between two or more computers that allows them to directly share information, files, or other data.","title":"Peer to peer or P2P"},{"location":"crypto-dictionar/#private-key","text":"A string of letters and numbers known only by the owner that allows them to spend their cryptocurrency. NEVER SHARE your private key unless you want someone else to be able to take all of your money!","title":"Private key"},{"location":"crypto-dictionar/#proof-of-work-or-pow","text":"A process for achieving consensus and building on a digital record known as a blockchain. With PoW, users compete with each other via their computers to solve a puzzle.","title":"Proof of Work or PoW"},{"location":"crypto-dictionar/#proof-of-stake-or-pos","text":"A process for achieving consensus and building on a digital record known as a blockchain. With PoS, users put up a collateral of tokens (or a \u201cstake\u201d) and use a process that is more energy and cost-efficient than previous solutions.","title":"Proof of Stake or PoS"},{"location":"crypto-dictionar/#pump-and-dump","text":"Pump and dump is defined as an illegal manipulation of an asset (stock, cryptocurrency, etc.) where people increase the price (the pump) so that they can sell it at those high prices for a profit (the dump).","title":"Pump and Dump"},{"location":"crypto-dictionar/#smart-contract","text":"An agreement to exchange goods, services, or money that will automatically execute, without third party oversight, so long as established criteria are met.","title":"Smart contract"},{"location":"crypto-dictionar/#timestamp","text":"Cryptocurrencies use various timestamping schemes to \u201cprove\u201d the validity of transactions added to the blockchain ledger without the need for a trusted third party. The most widely used proof-of-work schemes are based on SHA-256 and scrypt. Some other hashing algorithms that are used for proof-of-work include CryptoNight, Blake, SHA-3, and X11. The proof-of-stake is a method of securing a cryptocurrency network and achieving distributed consensus through requesting users to show ownership of a certain amount of currency. It is different from proof-of-work systems that run difficult hashing algorithms to validate electronic transactions. The scheme is largely dependent on the coin, and there\u2019s currently no standard form of it. Some cryptocurrencies use a combined proof-of-work/proof-of-stake scheme.","title":"Timestamp"},{"location":"crypto-dictionar/#transaction-fee-tx-fee","text":"Transaction fees for cryptocurrency depend mainly on the supply of network capacity at the time, versus the demand from the currency holder for a faster transaction. The currency holder can choose a specific transaction fee, while network entities process transactions in order of highest offered fee to lowest. Cryptocurrency exchanges can simplify the process for currency holders by offering priority alternatives and thereby determine which fee will likely cause the transaction to be processed in the requested time.","title":"Transaction Fee [TX Fee]"},{"location":"crypto-dictionar/#wallet","text":"A cryptocurrency wallet stores the public and private \u201ckeys\u201d or \u201caddresses\u201d which can be used to receive or spend the cryptocurrency. With the private key, it is possible to write in the public ledger, effectively spending the associated cryptocurrency. With the public key, it is possible for others to send currency to the wallet.","title":"Wallet"},{"location":"technical-specs/","text":"Evolution Technical Specs \u00b6 Coin Specification Currencie Name _ Evolution Ticker _ EVOX PoW Algorithm _ ProgPowZ - GPU (optimised) Hybrid Blockchain _ PoW + PoS Block Time _ 60 sec PoW / PoS (may vary) Block Reward _ 1 EvoX - PoS / PoW Network Fee _ 0.01 EvoX - Fixed Minimum Network Fee _ 0.01 EvoX - Fixed Decimal Points _ 1e-12 or 0.000000000001 Maximum Supply _ \u221e infinite supply Development Reserved _ 100000 EvoX, 70000 spend on development till now. PoW / PoS Distribution _ Block Reward distribution is 50% PoW - 50% PoS Live \u00b6 Evolution blockchain is live since: Timestamp [UCT] (epoch) 2020-03-02 21:31:47 (1583184707) Evolution 2.0 blockchain started: ...... Hybrid \u00b6 PoS - Proof of Stake PoW - Proof of Work Privacy Scalable Secure P2P Contracts Multisig Alias Auditable Wallet Sender Privacy \u00b6 Ring Signatures The ring size is 11 (10 decoys) Private by default Recipient Privacy Stealth Addresses Assurance: strong","title":"Technical specs"},{"location":"technical-specs/#evolution-technical-specs","text":"Coin Specification Currencie Name _ Evolution Ticker _ EVOX PoW Algorithm _ ProgPowZ - GPU (optimised) Hybrid Blockchain _ PoW + PoS Block Time _ 60 sec PoW / PoS (may vary) Block Reward _ 1 EvoX - PoS / PoW Network Fee _ 0.01 EvoX - Fixed Minimum Network Fee _ 0.01 EvoX - Fixed Decimal Points _ 1e-12 or 0.000000000001 Maximum Supply _ \u221e infinite supply Development Reserved _ 100000 EvoX, 70000 spend on development till now. PoW / PoS Distribution _ Block Reward distribution is 50% PoW - 50% PoS","title":"Evolution Technical Specs"},{"location":"technical-specs/#live","text":"Evolution blockchain is live since: Timestamp [UCT] (epoch) 2020-03-02 21:31:47 (1583184707) Evolution 2.0 blockchain started: ......","title":"Live"},{"location":"technical-specs/#hybrid","text":"PoS - Proof of Stake PoW - Proof of Work Privacy Scalable Secure P2P Contracts Multisig Alias Auditable Wallet","title":"Hybrid"},{"location":"technical-specs/#sender-privacy","text":"Ring Signatures The ring size is 11 (10 decoys) Private by default Recipient Privacy Stealth Addresses Assurance: strong","title":"Sender Privacy"},{"location":"api/daemon-binary-rpc-api/","text":"35. getblocks.bin \u00b6 GET http://127.0.0.1:52521/#035 Retrieves blocks not present on requesting side. Used for wallet synchronization. REQUEST C++ template<class t_block_complete_entry> struct COMMAND_RPC_GET_BLOCKS_FAST_T { struct request { std::list<crypto::hash> block_ids; }; struct response { std::list<t_block_complete_entry> blocks; uint64_t start_height; uint64_t current_height; std::string status; }; }; typedef COMMAND_RPC_GET_BLOCKS_FAST_T<block_complete_entry> COMMAND_RPC_GET_BLOCKS_FAST; Outputs: blocks \u2014 list of block_complete_entry objects containing full information about each block. start_height \u2014 height of the first block in blocks. current_height \u2014 current total size of the blockchain. Note Body Params block_ids array of strings required list of block IDs representing a snapshot of the local blockchain. The first 10 block IDs appear in sequential order, the next IDs in pow(2,n) offsets (2, 4, 8, 16, 32, 64, etc.), while the last are always the genesis block ID. See also tools::wallet2::get_short_chain_history(). 36. get_o_indexes.bin \u00b6 GET http://127.0.0.1:52521/#036 Retrieves global output indexes by specified transaction ID. REQUEST C++ struct COMMAND_RPC_GET_TX_GLOBAL_OUTPUTS_INDEXES { struct request { crypto::hash txid; }; struct response { std::vector<uint64_t> o_indexes; std::string status; }; }; Outputs: o_indexes \u2014 vector of global indexes for each tx output. Note Body Params tx_id string required transaction hash identifier 37. getrandom_outs.bin \u00b6 GET http://127.0.0.1:52521/#037 Retrieves random outputs from the entire blockchain for specified amounts. Random outputs can be mixed with normal user's unspent outputs in a transaction to improve untraceability. REQUEST C++ struct COMMAND_RPC_GET_RANDOM_OUTPUTS_FOR_AMOUNTS { struct request { std::list<uint64_t> amounts; uint64_t outs_count; bool use_forced_mix_outs; }; struct out_entry { uint64_t global_amount_index; crypto::public_key out_key; }; struct outs_for_amount { uint64_t amount; std::list<out_entry> outs; }; struct response { std::vector<outs_for_amount> outs; std::string status; }; }; Outputs: outs \u2014 vector of outs_for_amount objects. outs_for_amount::amount \u2014 specific amount for which random outputs were found. outs_for_amount::outs \u2014 list of out_entry objects. out_entry::global_amount_index \u2014 output index in the global outputs list. out_entry::out_key \u2014 output's public key. Note Body Params amounts string required list of denominations for which random mix-ins are required outs_count int32 required number of random outputs needed for each amount 38. get_tx_pool.bin \u00b6 GET http://127.0.0.1:52521/#038 Retrieves transaction pool. REQUEST C++ struct COMMAND_RPC_GET_TX_POOL { struct request {}; struct response { std::list<blobdata> txs; std::string status; }; }; Outputs: txs \u2014 list of serialized transactions from the pool. 39. check_keyimages.bin \u00b6 GET http://127.0.0.1:52521/#039 Checks specified key images for their spent status. REQUEST C++ struct COMMAND_RPC_CHECK_KEYIMAGES { struct request { std::list<crypto::key_image> images; }; struct response { std::list<uint64_t> images_stat; //true - unspent, false - spent std::string status; }; }; Outputs: images_stat \u2014 list of integers where 0 means that corresponding key image is spent and 1 means it is not spent. Note Body Params images string required list of key images to be checked for spending 40. scan_pos.bin \u00b6 GET http://127.0.0.1:52521/#040 Performs PoS minting iteration, i.e., scans the given PoS entries (set of unspent outputs) against the last blocks in the blockchain, and returns the output that won the minting process and corresponding PoS timestamp if successful. REQUEST C++ struct COMMAND_RPC_SCAN_POS { struct request { std::vector<pos_entry> pos_entries; }; struct response { std::string status; uint64_t index; uint64_t block_timestamp; ... }; }; Outputs: index \u2014 index of given PoS entry, that was selected by minting process. block_timestamp \u2014 timestamp for PoS block. Note Body Params pos_entries string required vector of pos_entries objects. Unspent user outputs that participate in PoS minting. 41. get_pos_details.bin \u00b6 GET http://127.0.0.1:52521/#041 Retrieves PoS minting context details. Required to build a PoS block. REQUEST C++ struct COMMAND_RPC_GET_POS_MINING_DETAILS { struct request { }; struct response { stake_modifier_type sm; uint64_t starter_timestamp; std::string pos_basic_difficulty; std::string status; crypto::hash last_block_hash; bool pos_mining_allowed; }; }; Outputs: sm \u2014 prepared current stake modifier object. starter_timestamp \u2014 current minimum allowed timestamp for a PoS block. pos_basic_difficulty \u2014 current PoS difficulty. last_block_hash \u2014 hash identifier of the top block in the blockchain. pos_mining_allowed \u2014 true if PoS minting is currently allowed.","title":"Daemon Binary RPC API"},{"location":"api/daemon-binary-rpc-api/#35-getblocksbin","text":"GET http://127.0.0.1:52521/#035 Retrieves blocks not present on requesting side. Used for wallet synchronization. REQUEST C++ template<class t_block_complete_entry> struct COMMAND_RPC_GET_BLOCKS_FAST_T { struct request { std::list<crypto::hash> block_ids; }; struct response { std::list<t_block_complete_entry> blocks; uint64_t start_height; uint64_t current_height; std::string status; }; }; typedef COMMAND_RPC_GET_BLOCKS_FAST_T<block_complete_entry> COMMAND_RPC_GET_BLOCKS_FAST; Outputs: blocks \u2014 list of block_complete_entry objects containing full information about each block. start_height \u2014 height of the first block in blocks. current_height \u2014 current total size of the blockchain. Note Body Params block_ids array of strings required list of block IDs representing a snapshot of the local blockchain. The first 10 block IDs appear in sequential order, the next IDs in pow(2,n) offsets (2, 4, 8, 16, 32, 64, etc.), while the last are always the genesis block ID. See also tools::wallet2::get_short_chain_history().","title":"35. getblocks.bin"},{"location":"api/daemon-binary-rpc-api/#36-get_o_indexesbin","text":"GET http://127.0.0.1:52521/#036 Retrieves global output indexes by specified transaction ID. REQUEST C++ struct COMMAND_RPC_GET_TX_GLOBAL_OUTPUTS_INDEXES { struct request { crypto::hash txid; }; struct response { std::vector<uint64_t> o_indexes; std::string status; }; }; Outputs: o_indexes \u2014 vector of global indexes for each tx output. Note Body Params tx_id string required transaction hash identifier","title":"36. get_o_indexes.bin"},{"location":"api/daemon-binary-rpc-api/#37-getrandom_outsbin","text":"GET http://127.0.0.1:52521/#037 Retrieves random outputs from the entire blockchain for specified amounts. Random outputs can be mixed with normal user's unspent outputs in a transaction to improve untraceability. REQUEST C++ struct COMMAND_RPC_GET_RANDOM_OUTPUTS_FOR_AMOUNTS { struct request { std::list<uint64_t> amounts; uint64_t outs_count; bool use_forced_mix_outs; }; struct out_entry { uint64_t global_amount_index; crypto::public_key out_key; }; struct outs_for_amount { uint64_t amount; std::list<out_entry> outs; }; struct response { std::vector<outs_for_amount> outs; std::string status; }; }; Outputs: outs \u2014 vector of outs_for_amount objects. outs_for_amount::amount \u2014 specific amount for which random outputs were found. outs_for_amount::outs \u2014 list of out_entry objects. out_entry::global_amount_index \u2014 output index in the global outputs list. out_entry::out_key \u2014 output's public key. Note Body Params amounts string required list of denominations for which random mix-ins are required outs_count int32 required number of random outputs needed for each amount","title":"37. getrandom_outs.bin"},{"location":"api/daemon-binary-rpc-api/#38-get_tx_poolbin","text":"GET http://127.0.0.1:52521/#038 Retrieves transaction pool. REQUEST C++ struct COMMAND_RPC_GET_TX_POOL { struct request {}; struct response { std::list<blobdata> txs; std::string status; }; }; Outputs: txs \u2014 list of serialized transactions from the pool.","title":"38. get_tx_pool.bin"},{"location":"api/daemon-binary-rpc-api/#39-check_keyimagesbin","text":"GET http://127.0.0.1:52521/#039 Checks specified key images for their spent status. REQUEST C++ struct COMMAND_RPC_CHECK_KEYIMAGES { struct request { std::list<crypto::key_image> images; }; struct response { std::list<uint64_t> images_stat; //true - unspent, false - spent std::string status; }; }; Outputs: images_stat \u2014 list of integers where 0 means that corresponding key image is spent and 1 means it is not spent. Note Body Params images string required list of key images to be checked for spending","title":"39. check_keyimages.bin"},{"location":"api/daemon-binary-rpc-api/#40-scan_posbin","text":"GET http://127.0.0.1:52521/#040 Performs PoS minting iteration, i.e., scans the given PoS entries (set of unspent outputs) against the last blocks in the blockchain, and returns the output that won the minting process and corresponding PoS timestamp if successful. REQUEST C++ struct COMMAND_RPC_SCAN_POS { struct request { std::vector<pos_entry> pos_entries; }; struct response { std::string status; uint64_t index; uint64_t block_timestamp; ... }; }; Outputs: index \u2014 index of given PoS entry, that was selected by minting process. block_timestamp \u2014 timestamp for PoS block. Note Body Params pos_entries string required vector of pos_entries objects. Unspent user outputs that participate in PoS minting.","title":"40. scan_pos.bin"},{"location":"api/daemon-binary-rpc-api/#41-get_pos_detailsbin","text":"GET http://127.0.0.1:52521/#041 Retrieves PoS minting context details. Required to build a PoS block. REQUEST C++ struct COMMAND_RPC_GET_POS_MINING_DETAILS { struct request { }; struct response { stake_modifier_type sm; uint64_t starter_timestamp; std::string pos_basic_difficulty; std::string status; crypto::hash last_block_hash; bool pos_mining_allowed; }; }; Outputs: sm \u2014 prepared current stake modifier object. starter_timestamp \u2014 current minimum allowed timestamp for a PoS block. pos_basic_difficulty \u2014 current PoS difficulty. last_block_hash \u2014 hash identifier of the top block in the blockchain. pos_mining_allowed \u2014 true if PoS minting is currently allowed.","title":"41. get_pos_details.bin"},{"location":"api/daemon-legacy-rpc-api/","text":"28. getheight \u00b6 GET http://127.0.0.1:52521/#028 Returns the current blockchain height. REQUEST curl -H \"content-type:application/json;\" http://127.0.0.1:52521/getheight RESPONSE { \"height\": 32317, \"status\": \"OK\" } Outputs: height \u2014 unsigned int; length of the longest chain (equal to top block height plus one). 29. gettransactions \u00b6 GET http://127.0.0.1:52521/#029 Retrieves transactions in serialized binary form by specified tx IDs. REQUEST curl --data \"{\\\"txs_hashes\\\":[\\\"0001020304050607080900111213141516171819202122232425262728293031\\\", \\\"cd7a0dfb6f69c5331fe958390c38e7770e217414a6f2341c2b56d6e38b9db54b\\\"]}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/gettransactions *RESPONSE { \"missed_tx\": [ \"0001020304050607080900111213141516171819202122232425262728293031\" ], \"status\": \"OK\", \"txs_as_hex\": [ \"010100eb85020308038df495b03458b358456f2b70fd9df3924b08f2723941c31cdfb75dda0fd91087004603a7b5d2860b31bbd95fec5bc49ad70659365d3f1fa50ab1c48d2af23fa07a669200904e03a0fafca182510f67a33b7e239a59e4e2e947f29eb1c5969933f3774bc0ea6004000516073cbb9f393d493bef6c87b5766426ef2645dd3805dbcb2f81caa171e8488805130a73696e6761706f72653215001777580ef585020000\" ] } Outputs: missed_tx \u2014 array of strings; hex-encoded identifiers of transactions that were not found. txs_as_hex \u2014 array of strings; found transactions serialized to binary format. Note Body Params txs_hashes array of strings required hex-encoded transactions identifiers to be retrieved 30. sendrawtransaction \u00b6 POST http://127.0.0.1:52521/#030 Sends raw transaction (i.e., fully constructed and serialized beforehand) to the network. REQUEST curl --data \"{\\\"tx_as_hex\\\":\\\"01010180897_TX_DATA_0000ff00000\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/sendrawtransaction RESPONSE Normal Sending application/json { \"status\": \"OK\" } Transaction was NOT send for some reason text/plain { \"status\": \"Failed\" } Note Body Params tx_as_text string required hex-encoded serialized transaction. 31. force_relay \u00b6 POST http://127.0.0.1:52521/#031 Broadcasts specified transactions across the network. REQUEST curl --data \"{\\\"tx_as_hex\\\":\\\"01010180897_TX_DATA_0000ff00000\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/force_relay RESPONSE { \"status\": \"OK\" } Note Body Params txs_as_hex array of strings required hex-encoded serialized transactions to be broadcasted 32. start_mining \u00b6 POST http://127.0.0.1:52521/#032 Starts mining in daemon. REQUEST curl --data \"{\\\"miner_address\\\":\\\"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/start_mining RESPONSE { \"status\": \"OK\" } Note Body Params miner_address string required address for receiving mined coins thread_count int32 required number of threads allocated for the miner 33. stop_mining \u00b6 POST http://127.0.0.1:52521/#033 Stops mining in daemon. REQUEST curl -H \"content-type:application/json;\" http://127.0.0.1:52521/stop_mining RESPONSE { \"status\": \"OK\" } 34. getinfo \u00b6 GET http://127.0.0.1:52521/#034 Legacy version of JSON RPC getinfo call. Please refer to its description for more information. REQUEST curl -H \"content-type:application/json;\" http://127.0.0.1:52521/getinfo","title":"Daemon Legacy PRC API"},{"location":"api/daemon-legacy-rpc-api/#28-getheight","text":"GET http://127.0.0.1:52521/#028 Returns the current blockchain height. REQUEST curl -H \"content-type:application/json;\" http://127.0.0.1:52521/getheight RESPONSE { \"height\": 32317, \"status\": \"OK\" } Outputs: height \u2014 unsigned int; length of the longest chain (equal to top block height plus one).","title":"28. getheight"},{"location":"api/daemon-legacy-rpc-api/#29-gettransactions","text":"GET http://127.0.0.1:52521/#029 Retrieves transactions in serialized binary form by specified tx IDs. REQUEST curl --data \"{\\\"txs_hashes\\\":[\\\"0001020304050607080900111213141516171819202122232425262728293031\\\", \\\"cd7a0dfb6f69c5331fe958390c38e7770e217414a6f2341c2b56d6e38b9db54b\\\"]}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/gettransactions *RESPONSE { \"missed_tx\": [ \"0001020304050607080900111213141516171819202122232425262728293031\" ], \"status\": \"OK\", \"txs_as_hex\": [ \"010100eb85020308038df495b03458b358456f2b70fd9df3924b08f2723941c31cdfb75dda0fd91087004603a7b5d2860b31bbd95fec5bc49ad70659365d3f1fa50ab1c48d2af23fa07a669200904e03a0fafca182510f67a33b7e239a59e4e2e947f29eb1c5969933f3774bc0ea6004000516073cbb9f393d493bef6c87b5766426ef2645dd3805dbcb2f81caa171e8488805130a73696e6761706f72653215001777580ef585020000\" ] } Outputs: missed_tx \u2014 array of strings; hex-encoded identifiers of transactions that were not found. txs_as_hex \u2014 array of strings; found transactions serialized to binary format. Note Body Params txs_hashes array of strings required hex-encoded transactions identifiers to be retrieved","title":"29. gettransactions"},{"location":"api/daemon-legacy-rpc-api/#30-sendrawtransaction","text":"POST http://127.0.0.1:52521/#030 Sends raw transaction (i.e., fully constructed and serialized beforehand) to the network. REQUEST curl --data \"{\\\"tx_as_hex\\\":\\\"01010180897_TX_DATA_0000ff00000\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/sendrawtransaction RESPONSE Normal Sending application/json { \"status\": \"OK\" } Transaction was NOT send for some reason text/plain { \"status\": \"Failed\" } Note Body Params tx_as_text string required hex-encoded serialized transaction.","title":"30. sendrawtransaction"},{"location":"api/daemon-legacy-rpc-api/#31-force_relay","text":"POST http://127.0.0.1:52521/#031 Broadcasts specified transactions across the network. REQUEST curl --data \"{\\\"tx_as_hex\\\":\\\"01010180897_TX_DATA_0000ff00000\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/force_relay RESPONSE { \"status\": \"OK\" } Note Body Params txs_as_hex array of strings required hex-encoded serialized transactions to be broadcasted","title":"31. force_relay"},{"location":"api/daemon-legacy-rpc-api/#32-start_mining","text":"POST http://127.0.0.1:52521/#032 Starts mining in daemon. REQUEST curl --data \"{\\\"miner_address\\\":\\\"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/start_mining RESPONSE { \"status\": \"OK\" } Note Body Params miner_address string required address for receiving mined coins thread_count int32 required number of threads allocated for the miner","title":"32. start_mining"},{"location":"api/daemon-legacy-rpc-api/#33-stop_mining","text":"POST http://127.0.0.1:52521/#033 Stops mining in daemon. REQUEST curl -H \"content-type:application/json;\" http://127.0.0.1:52521/stop_mining RESPONSE { \"status\": \"OK\" }","title":"33. stop_mining"},{"location":"api/daemon-legacy-rpc-api/#34-getinfo","text":"GET http://127.0.0.1:52521/#034 Legacy version of JSON RPC getinfo call. Please refer to its description for more information. REQUEST curl -H \"content-type:application/json;\" http://127.0.0.1:52521/getinfo","title":"34. getinfo"},{"location":"api/daemon-rpc-api/","text":"1. getblockcount \u00b6 GET http://127.0.0.1:52521/json_rpc/#001 Retrieves the current number of blocks in the main chain \u2014 the longest chain known to this node. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"getblockcount\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"count\": 1535, \"status\": \"OK\" } } Outputs: count \u2014 unsigned integer; total number of blocks in the blockchain, including genesis block at height zero. 2. on_getblockhash \u00b6 GET http://127.0.0.1:52521/json_rpc/#002 Obtains block hash by given block height. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"on_getblockhash\\\",\\\"params\\\":[0]}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": \"cc608f59f8080e2fbfe3c8c80eb6e6a953d47cf2d6aebd345bada3a1cab99852\" } Outputs: string; standard public address of the wallet. Note Body Params block height array of integers required Array of 1 unsigned integer; block height. 3. getblocktemplate \u00b6 GET http://127.0.0.1:52521/json_rpc/#003 Creates a template for the next block. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"getblocktemplate\\\",\\\"params\\\":{\\\"extra_text\\\":\\\"miner comment\\\",\\\"wallet_address\\\":\\\"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\\\",\\\"stakeholder_address\\\":\\\"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\\\",\\\"pos_block\\\": false,\\\"pos_amount\\\": 0,\\\"pos_index\\\": 0}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"blocktemplate_blob\": \"0100000000000000004ac94cd86e558182ae7c09615f606316e6eb4d25a1a87af26394aa233c84959d00d1e09fe70500010100d4b4010180a094a58d1d0376f2f4eae8b5ca2f676bc0f5242d18603af7dbbcf60b10bc7732d4748d0496f3000516bea1995950357900a3e85dd6b82743276bfd25763abe08e550cb393fd7c6e7f8130d6d696e657220636f6d6d656e74150017431a0edeb401000000\", \"difficulty\": \"1563095640967\", \"height\": 23124, \"prev_hash\": \"4ac94cd86e558182ae7c09615f606316e6eb4d25a1a87af26394aa233c84959d\", \"seed\": \"0000000000000000000000000000000000000000000000000000000000000000\", \"status\": \"OK\" } } Outputs: blocktemplate_blob \u2014 string; hex-encoded serialized block template. difficulty \u2014 unsigned int, difficulty for the block template. height \u2014 unsigned int, height corresponding to the block template. wallet_address - address where transferred block reward stakeholder_address - used only in PoS mining, address where returned stake which was used in PoS generation (optional, normally is the same as wallet_address) Note Body Params wallet_address string required miner's address for receiving newly generated coins extra_text string additional text included into miner transaction. Cannot exceed 255 bytes. pos_block boolean specify type of block template to be created: PoS (true) or PoW (false). Default: false. stakeholder_address string specify miner's address to which the stake coins used in PoS block generation will be returned. pos_amount int32 amount of an output used as a stake. pos_index int32 global index of an output used as a stake. 4. submitblock \u00b6 POST http://127.0.0.1:52521/json_rpc/#004 Submits the given block, i.e., adds it to the local blockchain and broadcasts it to the network. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"submitblock\\\",\\\"params\\\":[\\\"0101_HEX_BLOCK_BLOB_0101\\\"]}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Block is accepted by the core { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\" } } Block was added as alternative { \"error\": { \"code\": -13, \"message\": \"Block added as alternative\" }, \"id\": \"0\", \"jsonrpc\": \"2.0\" } Block is not accepted by the core { \"error\": { \"code\": -7, \"message\": \"Block not accepted\" }, \"id\": \"0\", \"jsonrpc\": \"2.0\" } Note Body Params block's blob array of strings required array of a single string; block's blob. 5. getlastblockheader \u00b6 GET http://127.0.0.1:52521/json_rpc/#005 Returns the header of the last block in the blockchain. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"getlastblockheader\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"block_header\": { \"depth\": 0, \"difficulty\": \"1961934344476071811\", \"hash\": \"613a9eab47211b828aa231867aa83bc1a3573db44f47b510511f50e99e91ed21\", \"height\": 23129, \"major_version\": 1, \"minor_version\": 0, \"nonce\": 0, \"orphan_status\": false, \"prev_hash\": \"b6138d113a0150aeae2cb6909b803e3a22407c56f143ee2c9627b8ca5f3d9724\", \"reward\": 2000000000000, \"timestamp\": 1558705095 }, \"status\": \"OK\" } } Outputs: block_header \u2014 object; a block header object for the last block. block header object fields: depth \u2014 unsigned int; distance in blocks from the blockchain top. Always zero for this call. difficulty \u2014 unsigned int; block difficulty. hash \u2014 string; block identifier. prev_hash \u2014 string; identifier of the previous block. height \u2014 unsigned int; block height. major_version \u2014 unsigned int; major version of a block. minor_version \u2014 unsigned int; minor version of a block. nonce \u2014 unsigned int; block nonce. orphan_status \u2014 boolean; is this block orphan or not? Always false for this call. reward \u2014 unsigned int; how much money this block has generated. timestamp \u2014 unsigned int; block timestamp. 6. getblockheaderbyhash \u00b6 GET http://127.0.0.1:52521/json_rpc/#006 Returns a block header by the given hash identifier. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"getblockheaderbyhash\\\",\\\"params\\\":{\\\"hash\\\":\\\"613a9eab47211b828aa231867aa83bc1a3573db44f47b510511f50e99e91ed21\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Request an existing block { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"block_header\": { \"depth\": 1, \"difficulty\": \"1961934344476071811\", \"hash\": \"613a9eab47211b828aa231867aa83bc1a3573db44f47b510511f50e99e91ed21\", \"height\": 23129, \"major_version\": 1, \"minor_version\": 0, \"nonce\": 0, \"orphan_status\": false, \"prev_hash\": \"b6138d113a0150aeae2cb6909b803e3a22407c56f143ee2c9627b8ca5f3d9724\", \"reward\": 2000000000000, \"timestamp\": 1558705095 }, \"status\": \"OK\" } } Request a NON-existing block { \"error\": { \"code\": -5, \"message\": \"Internal error: can't get block by hash. Hash = 0000000000000000000000000000000000000000000000000000000000000000.\" }, \"id\": \"0\", \"jsonrpc\": \"2.0\" } Outputs: block_header \u2014 object; a block header object for the requested block. See getlastblockheader for detailed fields descriptions. Note Body Params hash string required hash identifier of a block. 7. getblockheaderbyheight \u00b6 GET http://127.0.0.1:52521/json_rpc/#007 Returns a block header by the given block height. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"getblockheaderbyheight\\\",\\\"params\\\":{\\\"height\\\":0}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Request an existing block. { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"block_header\": { \"depth\": 23135, \"difficulty\": \"1\", \"hash\": \"cc608f59f8080e2fbfe3c8c80eb6e6a953d47cf2d6aebd345bada3a1cab99852\", \"height\": 0, \"major_version\": 1, \"minor_version\": 0, \"nonce\": 101011010205, \"orphan_status\": false, \"prev_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\", \"reward\": 17517203000000000000, \"timestamp\": 0 }, \"status\": \"OK\" } } Request a NON-existing block. { \"error\": { \"code\": -2, \"message\": \"To big height: 999999, current blockchain size = 2094\" }, \"id\": \"0\", \"jsonrpc\": \"2.0\" } Outputs: block_header \u2014 object; a block header object for the requested block. See getlastblockheader for detailed fields descriptions. Note Body Params height int32 required height of a block. 8. get_alias_details \u00b6 GET http://127.0.0.1:52521/json_rpc/#008 Returns alias details by alias name. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_alias_details\\\",\\\"params\\\":{\\\"alias\\\":\\\"crypto\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Correct request { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"alias_details\": { \"address\": \"eXDkdqs5U14QJBwtx2MLsxT5xHHKQ4XSwjEXVd7QVZoD4ntEVsS8MVZ9ZnKbEn5iKQ3UepcauqRU5gYU5qo2Ujxw2rseDaUdU\", \"comment\": \"\", \"tracking_key\": \"\" }, \"status\": \"OK\" } } Request details for a NON-existing alias { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"alias_details\": { \"address\": \"\", \"comment\": \"\", \"tracking_key\": \"\" }, \"status\": \"NOT FOUND\" } } Outputs: alias_details \u2014 object; an alias details block object for the requested alias. Alias details object fields: address \u2014 string; public address associated with requested alias. comment \u2014 string; an arbitrary comment set by the owner. Can be empty. tracking_key \u2014 string; private view key for public address. Can be empty. Note Body Params alias string required alias name (without \"@\") 9. get_alias_by_address \u00b6 GET http://127.0.0.1:52521/json_rpc/#009 Returns alias name by address. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_alias_by_address\\\", \\\"params\\\":\\\"eXDkdqs5U14QJBwtx2MLsxT5xHHKQ4XSwjEXVd7QVZoD4ntEVsS8MVZ9ZnKbEn5iKQ3UepcauqRU5gYU5qo2Ujxw2rseDaUdU\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Correct request { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"alias_info\": { \"address\": \"eXDkdqs5U14QJBwtx2MLsxT5xHHKQ4XSwjEXVd7QVZoD4ntEVsS8MVZ9ZnKbEn5iKQ3UepcauqRU5gYU5qo2Ujxw2rseDaUdU\", \"alias\": \"crypto\", \"comment\": \"\", \"tracking_key\": \"\" }, \"status\": \"OK\" } } Request details for NON-existing alias { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"alias_info\": { \"address\": \"\", \"alias\": \"\", \"comment\": \"\", \"tracking_key\": \"\" }, \"status\": \"NOT_FOUND\" } } Outputs: alias \u2014 string; alias name for an address. Note Body Params string string required a public address associated with an alias. 10. get_alias_reward \u00b6 GET http://127.0.0.1:52521/json_rpc/#010 Returns current reward that must be paid to register an alias name. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_alias_reward\\\",\\\"params\\\":{\\\"alias\\\":\\\"crypto\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"reward\": 100000000000, \"status\": \"OK\" } } Outputs: reward \u2014 unsigned int; current reward (in atomic units) to be paid for an alias. Note Body Params alias string alias name 11. get_blocks_details \u00b6 GET http://127.0.0.1:52521/json_rpc/#011 Return blocks details for a specified range of heights. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_blocks_details\\\",\\\"params\\\":{\\\"height_start\\\":10000,\\\"count\\\":1}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"blocks\": [ { \"actual_timestamp\": 1557906733, \"already_generated_coins\": \"17527203000000000000\", \"base_reward\": 1000000000000, \"blob\": \"\", \"block_cumulative_size\": 1690, \"block_tself_size\": 0, \"cumulative_diff_adjusted\": \"27934854069161424\", \"cumulative_diff_precise\": \"16964766616549681\", \"difficulty\": \"3792479698469\", \"effective_fee_median\": 50050000, \"height\": 10000, \"id\": \"fe42b8c4742d2dbe4d5de5ae5212f75acb62b75e4b66b758ff8e252825c2d7a5\", \"is_orphan\": false, \"miner_text_info\": \"\", \"object_in_json\": \"...\", \"penalty\": 0, \"pow_seed\": \"\", \"prev_id\": \"8ee7377d6ee3632ea5b43bed2a5ea41c035abb3fe6146aec63e6c5cbbc4257f1\", \"summary_reward\": 1000100000000, \"this_block_fee_median\": 100000000, \"timestamp\": 1557906733, \"total_fee\": 100000000, \"total_txs_size\": 1690, \"transactions_details\": [ { \"amount\": 1000100000000, \"blob\": \"\", \"blob_size\": 136, \"fee\": 0, \"id\": \"018c8bcf749063ee4a8127b84586a03f9bbd1909d9e5cfdb92007ebc463462d4\", \"keeper_block\": 10000, \"object_in_json\": \"\", \"pub_key\": \"b5800dff01803ec97edf956c7c82cc2658333de5ca3c860e68f7f8f216f3baa9\", \"timestamp\": 1557906733 }, { \"amount\": 2999900000000, \"blob\": \"\", \"blob_size\": 1690, \"fee\": 100000000, \"id\": \"612ca0baf8a1a8b7b86d9b56e3b9e1ef4bf6af6296ece8d75e85601fe3987b7b\", \"keeper_block\": 10000, \"object_in_json\": \"\", \"pub_key\": \"bf6e7ab5488f612e0ad8f00931633f01136d69f6e973130105431b080fac2a95\", \"timestamp\": 1557906733 } ], \"type\": 1 } ], \"status\": \"OK\" } } Outputs: blocks \u2014 array of block_rpc_extended_info objects. block_rpc_extended_info object fields: actual_timestamp \u2014 unsigned int; timestamp for the moment of block creation (for PoW blocks equal to timestamp, for PoS they differ). already_generated_coins \u2014 unsigned int; total number of coins generated, including this block. base_reward \u2014 unsigned int; base reward for the block (equal to reward if there are no transactions except the miner tx). pow_seed \u2014 some hex string . block_cumulative_size \u2014 unsigned int; total size of block's transactions, in bytes. Miner tx is included in special cases. cumulative_diff_adjusted \u2014 unsigned int; cumulative PoS or PoW difficulty for the block, adjusted by the sequence factor (number of same type blocks going sequentially one-by-one). cumulative_diff_precise \u2014 unsigned int; precise cumulative PoS or PoW difficulty for the block. difficulty \u2014 unsigned int; difficulty of the block. effective_fee_median \u2014 unsigned int; median of transaction fees within a specific window used in calculations for this block. height \u2014 unsigned int; block height. id \u2014 string; block hash identifier. is_orphan \u2014 boolean; orphan status for the block. False for normal blocks. miner_text_info \u2014 string; undefined text inserted by miner when the block was mined. object_in_json \u2014 string; JSON-serialized block object. penalty \u2014 unsigned int; difference between summary_reward and base_reward. prev_id \u2014 string; hash identifier of the previous block. summary_reward \u2014 unsigned int; amount of coins this block has generated in miner tx. this_block_fee_median \u2014 unsigned int; median fee among the transactions for this block. timestamp \u2014 unsigned int; block timestamp (serves a special purpose for PoS blocks, which is why actual_timestamp should be used as actual block timestamp). total_fee \u2014 unsigned int; sum of transaction fees in this block. total_txs_size \u2014 unsigned int; total transaction size in this block (excluding the miner tx). transactions_details \u2014 array of tx_rpc_extended_info objects (see below get_tx_details description). type \u2014 unsigned int; 0 if this is PoS block, 1 if this is PoW block. Note Body Params height_start int32 starting height count int32 number of blocks to be requested 12. get_tx_details \u00b6 GET http://127.0.0.1:52521/json_rpc/#012 Returns transaction details by specified transaction hash identifier. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_tx_details\\\",\\\"params\\\":{\\\"tx_hash\\\":\\\"d4af4b8e714610865bab09375c40a625ea741ac6f2d271ee398e0ffa5c0af74c\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Correct response transaction { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\", \"tx_info\": { \"amount\": 1000000200000, \"blob\": \"\", \"blob_size\": 386, \"extra\": [ { \"datails_view\": \"\", \"short_view\": \"a6c1a6d3453a6f21c32bd03d29b30add6bb9dcc55c23961d863b0faad5643aa8\", \"type\": \"pub_key\" }, { \"datails_view\": \"520f\", \"short_view\": \"520f\", \"type\": \"XOR\" }, { \"datails_view\": \"c885\", \"short_view\": \"c885\", \"type\": \"XOR\" } ], \"fee\": 100000, \"id\": \"d4af4b8e714610865bab09375c40a625ea741ac6f2d271ee398e0ffa5c0af74c\", \"ins\": [ { \"amount\": 1000000000000, \"global_indexes\": [ 33772 ], \"kimage_or_ms_id\": \"bc97426f220d02badf7f836cedc0b10e15fa1abc0163000266c84a93e10d52cb\", \"multisig_count\": 0 }, { \"amount\": 300000, \"global_indexes\": [ 459 ], \"kimage_or_ms_id\": \"2cedd318bb5e75d5ae56a1801c1804e50da5efa708854b254b1f159fe55ce787\", \"multisig_count\": 0 } ], \"keeper_block\": 23183, \"object_in_json\": \"\", \"outs\": [ { \"amount\": 100000, \"global_index\": 3590, \"is_spent\": false, \"minimum_sigs\": 0, \"pub_keys\": [ \"242884c767abe6d9d855f31119314fee229db2f014f80c46c1ab14428be818cf\" ] }, { \"amount\": 100000, \"global_index\": 3591, \"is_spent\": false, \"minimum_sigs\": 0, \"pub_keys\": [ \"e6295a3dc3a0b139feb330ec6591cc76f29468fb660ffc8413c883221117b6c2\" ] }, { \"amount\": 1000000000000, \"global_index\": 34112, \"is_spent\": false, \"minimum_sigs\": 0, \"pub_keys\": [ \"23587fbe7731bce91b7a81b0bcb310a8430057d426a6842e205aeb223c9457c5\" ] } ], \"pub_key\": \"a6c1a6d3453a6f21c32bd03d29b30add6bb9dcc55c23961d863b0faad5643aa8\", \"timestamp\": 1558706609 } } } Request a NON-existing transaction { \"error\": { \"code\": -14, \"message\": \"tx is not found\" }, \"id\": 0, \"jsonrpc\": \"2.0\" } Outputs: tx_info \u2014 object; a tx_rpc_extended_info object (see below). tx_rpc_extended_info object fields: amount \u2014 unsigned int; sum of transaction outputs. attachments \u2014 array of objects; list of transaction attachments. blob_size \u2014 unsigned int; size of serialized transaction in bytes. extra \u2014 array of objects; list of extra items. fee \u2014 unsigned int; transaction fee. id \u2014 string; hash identifier of the transaction. ins \u2014 array of objects; list of inputs. keeper_block \u2014 unsigned int; height of the block containing this transaction. outs \u2014 array of objects; list of outputs. pub_key \u2014 string; transaction public key. timestamp \u2014 unsigned int; actual timestamp of the block containing this transaction. Note Body Params tx_hash string required hash identifier of a transaction 13. search_by_id \u00b6 GET http://127.0.0.1:52521/json_rpc/#013 Returns type of an entity by specified hash identifier. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"search_by_id\\\",\\\"params\\\":{\\\"id\\\":\\\"d4af4b8e714610865bab09375c40a625ea741ac6f2d271ee398e0ffa5c0af74c\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Response application/json block { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\", \"types_found\": [ \"block\" ] } } Response text/plain transaction { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\", \"types_found\": [ \"block\" ] } } Outputs: types_found \u2014 array of strings; a set of the types found (usually only one). Possible values: block, alt_block, key_image, tx, multisig_id. Note Body Params id string required hash identifier of a block, transaction, key image, or multisig output 14. getinfo \u00b6 GET http://127.0.0.1:52521/json_rpc/#014 Returns various information and stats. List of available flags values: RPC Command Flag COMMAND_RPC_GET_INFO_FLAG_POS_DIFFICULTY 0x0000000000000001 COMMAND_RPC_GET_INFO_FLAG_POW_DIFFICULTY 0x0000000000000002 COMMAND_RPC_GET_INFO_FLAG_NET_TIME_DELTA_MEDIAN 0x0000000000000004 COMMAND_RPC_GET_INFO_FLAG_CURRENT_NETWORK_HASHRATE_50 0x0000000000000008 COMMAND_RPC_GET_INFO_FLAG_CURRENT_NETWORK_HASHRATE_350 0x0000000000000010 COMMAND_RPC_GET_INFO_FLAG_SECONDS_FOR_10_BLOCKS 0x0000000000000020 COMMAND_RPC_GET_INFO_FLAG_SECONDS_FOR_30_BLOCKS 0x0000000000000040 COMMAND_RPC_GET_INFO_FLAG_TRANSACTIONS_DAILY_STAT 0x0000000000000080 COMMAND_RPC_GET_INFO_FLAG_LAST_POS_TIMESTAMP 0x0000000000000100 COMMAND_RPC_GET_INFO_FLAG_LAST_POW_TIMESTAMP 0x0000000000000200 COMMAND_RPC_GET_INFO_FLAG_TOTAL_COINS 0x0000000000000400 COMMAND_RPC_GET_INFO_FLAG_LAST_BLOCK_SIZE 0x0000000000000800 COMMAND_RPC_GET_INFO_FLAG_TX_COUNT_IN_LAST_BLOCK 0x0000000000001000 COMMAND_RPC_GET_INFO_FLAG_POS_SEQUENCE_FACTOR 0x0000000000002000 COMMAND_RPC_GET_INFO_FLAG_POW_SEQUENCE_FACTOR 0x0000000000004000 COMMAND_RPC_GET_INFO_FLAG_OUTS_STAT 0x0000000000008000 COMMAND_RPC_GET_INFO_FLAG_PERFORMANCE 0x0000000000010000 COMMAND_RPC_GET_INFO_FLAG_POS_BLOCK_TS_SHIFT_VS_ACTUAL 0x0000000000020000 COMMAND_RPC_GET_INFO_FLAG_MARKET 0x0000000000040000 COMMAND_RPC_GET_INFO_FLAG_ALL_FLAGS 0xffffffffffffffff REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"getinfo\\\",\\\"params\\\":{\\\"flags\\\":4294967295}}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"alias_count\": 89, \"alt_blocks_count\": 38, \"block_reward\": 1000000000000, \"current_blocks_median\": 125000, \"current_max_allowed_block_size\": 250000, \"current_network_hashrate_350\": 12371661017, \"current_network_hashrate_50\": 22307725414, \"daemon_network_state\": 2, \"default_fee\": 10000000000, \"expiration_median_timestamp\": 1558706697, \"grey_peerlist_size\": 52, \"height\": 23195, \"incoming_connections_count\": 17, \"last_block_hash\": \"941637785d710dddd3391eb7adc451db31855c99ac31cec4f221ad856b86871f\", \"last_block_size\": 0, \"last_block_timestamp\": 1558707495, \"last_block_total_reward\": 1000000000000, \"last_pos_timestamp\": 1558707495, \"last_pow_timestamp\": 1558707021, \"max_net_seen_height\": 21097, \"mi\": { \"build_no\": 26, \"mode\": 0, \"ver_major\": 1, \"ver_minor\": 0, \"ver_revision\": 0 }, \"minimum_fee\": 10000000000, \"net_time_delta_median\": 0, \"offers_count\": 0, \"outgoing_connections_count\": 8, \"outs_stat\": { \"amount_0_001\": 1636, \"amount_0_01\": 3177, \"amount_0_1\": 1829, \"amount_1\": 34129, \"amount_10\": 407, \"amount_100\": 719, \"amount_1000\": 6, \"amount_10000\": 2, \"amount_100000\": 0, \"amount_1000000\": 0 }, \"performance_data\": { \"all_txs_insert_time_5\": 106, \"block_processing_time_0\": 8000, \"block_processing_time_1\": 8337, \"etc_stuff_6\": 681, \"insert_time_4\": 16, \"longhash_calculating_time_3\": 1074, \"map_size\": 137438953472, \"raise_block_core_event\": 0, \"target_calculating_calc\": 11, \"target_calculating_enum_blocks\": 5799, \"target_calculating_time_2\": 5816, \"tx_add_one_tx_time\": 7432, \"tx_append_is_expired\": 0, \"tx_append_rl_wait\": 0, \"tx_append_time\": 253, \"tx_check_exist\": 6, \"tx_check_inputs_attachment_check\": 0, \"tx_check_inputs_loop\": 10133, \"tx_check_inputs_loop_ch_in_val_sig\": 1368, \"tx_check_inputs_loop_kimage_check\": 16, \"tx_check_inputs_loop_scan_outputkeys_get_item_size\": 10, \"tx_check_inputs_loop_scan_outputkeys_loop\": 122, \"tx_check_inputs_loop_scan_outputkeys_loop_find_tx\": 24, \"tx_check_inputs_loop_scan_outputkeys_loop_get_subitem\": 10, \"tx_check_inputs_loop_scan_outputkeys_loop_handle_output\": 0, \"tx_check_inputs_loop_scan_outputkeys_relative_to_absolute\": 0, \"tx_check_inputs_prefix_hash\": 0, \"tx_check_inputs_time\": 7175, \"tx_count\": 0, \"tx_prapare_append\": 0, \"tx_print_log\": 0, \"tx_process_attachment\": 0, \"tx_process_extra\": 0, \"tx_process_inputs\": 66, \"tx_push_global_index\": 113, \"tx_store_db\": 20, \"writer_tx_count\": 0 }, \"pos_allowed\": true, \"pos_block_ts_shift_vs_actual\": 459, \"pos_diff_total_coins_rate\": 118, \"pos_difficulty\": \"2748846848713493647\", \"pos_sequence_factor\": 2, \"pow_difficulty\": 1701500087805, \"pow_sequence_factor\": 0, \"seconds_for_10_blocks\": 440, \"seconds_for_30_blocks\": 889, \"status\": \"OK\", \"synchronization_start_height\": 21094, \"synchronized_connections_count\": 25, \"total_coins\": \"17540397000000000000\", \"transactions_cnt_per_day\": 559, \"transactions_volume_per_day\": 5337825461100000, \"tx_count\": 9267, \"tx_count_in_last_block\": 0, \"tx_pool_performance_data\": { \"begin_tx_time\": 7, \"check_inputs_time\": 4567, \"check_inputs_types_supported_time\": 0, \"check_keyimages_ws_ms_time\": 20, \"db_commit_time\": 13276, \"expiration_validate_time\": 1, \"tx_processing_time\": 18030, \"update_db_time\": 132, \"validate_alias_time\": 8, \"validate_amount_time\": 0 }, \"tx_pool_size\": 3, \"white_peerlist_size\": 128 } } Outputs: alias_count \u2014 unsigned int; number of total aliases registered. alt_blocks_count \u2014 unsigned int; number of alternative blocks known to this node. block_reward \u2014 unsigned int; base block reward for the next block (excluding fees and txs size penalty). Calculated only if both COMMAND_RPC_GET_INFO_FLAG_POS_DIFFICULTY and COMMAND_RPC_GET_INFO_FLAG_TOTAL_COINS flags are present. current_blocks_median \u2014 unsigned int; median of cumulative block sizes for the recent N blocks. current_max_allowed_block_size \u2014 unsigned int; maximum allowed cumulative size of a block in bytes. current_network_hashrate_350 \u2014 unsigned int; network hashrate calculated by difficulty within a window of the last 350 blocks. Calculated only if COMMAND_RPC_GET_INFO_FLAG_CURRENT_NETWORK_HASHRATE_350 flag is present. current_network_hashrate_50 \u2014 unsigned int; the same as above for last 50 blocks. Calculated only if COMMAND_RPC_GET_INFO_FLAG_CURRENT_NETWORK_HASHRATE_50 flag is present. daemon_network_state \u2014 unsigned int; current daemon state. Possible values and their meaning: daemon_network_state_connecting = 0, daemon_network_state_synchronizing = 1, daemon_network_state_online = 2, daemon_network_state_loading_core = 3, daemon_network_state_internal_error = 4, daemon_network_state_unloading_core = 5 default_fee \u2014 unsigned int; current default fee. grey_peerlist_size \u2014 unsigned int; number of peers in the gray list (these are peers received from another node and this node has not yet attempted to connect to them). height \u2014 unsigned int; number of blocks in the main chain. incoming_connections_count \u2014 unsigned int; number of incoming P2P connections. last_block_size \u2014 unsigned int; cumulative size of the last block. Returned only if COMMAND_RPC_GET_INFO_FLAG_LAST_BLOCK_SIZE flag is present. last_block_total_reward \u2014 unsigned int; actual reward for the last block. Calculated only if both COMMAND_RPC_GET_INFO_FLAG_POS_DIFFICULTY and COMMAND_RPC_GET_INFO_FLAG_TOTAL_COINS flags are present. last_pos_timestamp \u2014 unsigned int; timestamp of the last PoS block in the main chain. Calculated only if COMMAND_RPC_GET_INFO_FLAG_LAST_POS_TIMESTAMP flag is present. last_pow_timestamp \u2014 unsigned int; timestamp of the last PoW block in the main chain. Calculated only if COMMAND_RPC_GET_INFO_FLAG_LAST_POW_TIMESTAMP flag is present. max_net_seen_height \u2014 unsigned int; size of the longest chain among this node\u2019s peers. mi \u2014 object; the last received maintainer info message with recommended build versions from project maintainers. See below detailed description of maintainers_info_external object. minimum_fee \u2014 unsigned int; current tx fee minimum required by tx pool. net_time_delta_median \u2014 signed int; median of system time differences among this node\u2019s peers. Calculated only if COMMAND_RPC_GET_INFO_FLAG_NET_TIME_DELTA_MEDIAN flag is present. offers_count \u2014 unsigned int; total number of market offers known to this node. Calculated only if COMMAND_RPC_GET_INFO_FLAG_PERFORMANCE flag is present and no --disable-market CLI option was specified. outgoing_connections_count \u2014 unsigned int; number of outgoing P2P connections. outs_stat \u2014 object; brief output statistics. pos_allowed \u2014 boolean; false if PoS blocks cannot be accepted yet, otherwise \u2014 true. pos_block_ts_shift_vs_actual \u2014 signed int; the difference between the block timestamp and actual block timestamp for the last PoS block in the main chain. Calculated only if COMMAND_RPC_GET_INFO_FLAG_POS_BLOCK_TS_SHIFT_VS_ACTUAL flag is present. pos_diff_total_coins_rate \u2014 unsigned int; current ratio of PoS difficulty to total coins mined. Calculated only if both COMMAND_RPC_GET_INFO_FLAG_POS_DIFFICULTY and COMMAND_RPC_GET_INFO_FLAG_TOTAL_COINS flags are present. pos_difficulty \u2014 unsigned int; difficulty for the next PoS block. pos_sequence_factor \u2014 unsigned int; size of a continuous sequence of PoS blocks starting from the top block. Calculated only if COMMAND_RPC_GET_INFO_FLAG_POS_SEQUENCE_FACTOR flag is present. pow_difficulty \u2014 unsigned int; difficulty for the next PoW block. pow_sequence_factor \u2014 unsigned int; size of a continuous sequence of PoW blocks starting from the top block. (Required flag: COMMAND_RPC_GET_INFO_FLAG_POW_SEQUENcE_FACTOR ) seconds_for_10_blocks \u2014 unsigned int; timestamp difference between the top block and the 10th from the top. (Required flag: COMMAND_RPC_GET_INFO_FLAG_SECONDS_FOR_10_BLOCKS ) seconds_for_30_blocks \u2014 unsigned int; timestamp difference between the top block and the 30th from the top. (Required flag: COMMAND_RPC_GET_INFO_FLAG_SECONDS_FOR_30_BLOCKS ) synchronization_start_height \u2014 unsigned int; size of the local blockchain when the synchronization process started for the first time after daemon start. synchronized_connections_count \u2014 unsigned int; number of synchronized peers. total_coins \u2014 unsigned int; number of emitted coins. (Required flag: COMMAND_RPC_GET_INFO_FLAG_TOTAL_COINS ) transactions_cnt_per_day \u2014 unsigned int; number of non-coinbase transactions for the last 24 hours. (Required flag: COMMAND_RPC_GET_INFO_FLAG_TRANSACTIONS_DAILY_STAT ) transactions_volume_per_day \u2014 unsigned int; total amount of non-miner transactions for the last 24 hours. (Required flag: COMMAND_RPC_GET_INFO_FLAG_TRANSACTIONS_DAILY_STAT ) tx_count \u2014 unsigned int; total number of all non-coinbase transactions. tx_count_in_last_block \u2014 unsigned int; number of non-coinbase transactions in the last block. (Required flag: COMMAND_RPC_GET_INFO_FLAG_TX_COUNT_IN_LAST_BLOCK ) tx_pool_size \u2014 unsigned int; number of transactions in the tx pool. white_peerlist_size \u2014 unsigned int; number of peers in the white list (total number of peers to which this node has ever been connected). Fields of maintainers_info_external object: ver_major \u2014 unsigned int; major build version from project maintainers. ver_minor \u2014 unsigned int; minor build version from project maintainers. ver_revision \u2014 unsigned int; revision build version from project maintainers. mode \u2014 unsigned int; maintainers info message type: #define ALERT_TYPE_CALM 1 #define ALERT_TYPE_URGENT 2 #define ALERT_TYPE_CRITICAL 3 Note Body Params flags int32 required binary mask of flags combined together with bitwise-OR operation. Default: 0 (no flags) 15. get_out_info \u00b6 GET http://127.0.0.1:11211/json_rpc/#015 Looks up an output in the global outputs table by specified amount and output global index. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_out_info\\\",\\\"params\\\":{\\\"amount\\\":1000000,\\\"i\\\":1}}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Normal request application/json { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"out_no\": 0, \"status\": \"OK\", \"tx_id\": \"09237f99387faa47ca971ce6805534c012f29a513b1e95dd8279ba4e1d81a837\" } } Request a NON-existing output text/plain { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"out_no\": 0, \"status\": \"NOT FOUND\", \"tx_id\": \"0000000000000000000000000000000000000000000000000000000000000000\" } } Outputs: status \u2014 string; \"OK\" if the output was found, \"NOT FOUND\" if the requested output was not found. tx_id \u2014 string; hash identifier of output's source transaction. out_no \u2014 unsigned int; output local index in its source transaction. Note Body Params amount int32 required output amount i int32 required output global index 16. get_multisig_info \u00b6 GET http://127.0.0.1:52521/json_rpc/#016 Looks up multisig output by specified identifier. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_multisig_info\\\",\\\"params\\\":{\\\"ms_id\\\":\\\"8937e6b5d11b18e6bf55c213723aeb2203e0b8a8906d1ed662236e4bc070e604\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Normal request application/json { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"out_no\": 3, \"status\": \"OK\", \"tx_id\": \"2df88a09b2d8b73a45824526c26e7f21836bbe0b111e1e8a6896c1a7fc8e03eb\" } } Request NON-existing output text/plain { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"out_no\": 0, \"status\": \"NOT FOUND\", \"tx_id\": \"0000000000000000000000000000000000000000000000000000000000000000\" } } Outputs: tx_id \u2014 string; hash identifier of transaction, containing the given multisig output. out_no \u2014 unsigned int; local multisig output index in the transaction, starting from zero. Note Body Params ms_id string required hash identifier of a multisig output 17. get_all_alias_details \u00b6 GET http://127.0.0.1:52521/json_rpc/#017 Returns all registered aliases. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_all_alias_details\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"aliases\": [ { \"address\": \"ZxBvxQuPUah1BxopoeysUze4Z1G7Ts86uQNMTRrcMLrwRcpfqFtPinuXf7sMy7gLfYWXrRJnA692PC4nM7JJS5Tn1rQSmtgcG\", \"alias\": \"abcevox\", \"comment\": \"\", \"tracking_key\": \"\" }, { \"address\": \"ZxCgpbN4yts1CAhXh9qxKbERsYoaZY972EBJKoiukhdp9tQSSbSjpE9a2g4KNSssJ8HiL4p2mjz77gTTDuvRFzhe26yyaPhgW\", \"alias\": \"alexandre\", \"comment\": \"\", \"tracking_key\": \"\" }, { \"address\": \"ZxCVg1QXPr1UQNaBN3zkaVZdhUB4tbvMhRaXeWToyfm2Rpg76GWbeJZ7e1vL535JYXg7K5E7wj2w9YJwW38pvPwF34u7TX7cm\", \"alias\": \"alexbo\", \"comment\": \"\", \"tracking_key\": \"\" }, { \"address\": \"ZxC7eRhz54PLZnaECze66aKuvSTSZa74DNjFfppy5SNV7aK1uzeNo1wKDAKyiCmU44K9vZ8TVLw3A86ALoj6k1Ra31trAhqNR\", \"alias\": \"zoinker\", \"comment\": \"\", \"tracking_key\": \"\" } ], \"status\": \"OK\" } } Outputs: aliases \u2014 array of alias_rpc_details objects. alias_rpc_details object's fields description: alias \u2014 string; alias name. address \u2014 string; address of a corresponding wallet. tracking_key \u2014 string; hex-encoded secret view key (optional) of the wallet. comment \u2014 string; user-defined comment, made by alias owner (optional). 18. get_aliases \u00b6 GET http://127.0.0.1:52521/json_rpc/#018 Retrieves a specified range of aliases from the global list. Warning Obsolete method! Not recommended for use. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_aliases\\\",\\\"params\\\":{\\\"offset\\\":0,\\\"count\\\":1}}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"aliases\": [ { \"address\": \"eXBvxQuPUah1BxopoeysUze4Z1G7Ts86uQNMTRrcMLrwRcpfqFtPinuXf7sMy7gLfYWXrRJnA692PC4nM7JJS5Tn1rQSmtgcG\", \"alias\": \"abcevox\", \"comment\": \"\", \"tracking_key\": \"\" } ], \"status\": \"OK\" } } Outputs: aliases \u2014 array of alias_rpc_details objects; see get_all_alias_details method description for details. Note Body Params offset int32 required starting offset in global alias list count int32 required how many elements to retrieve 19. get_pool_txs_details \u00b6 GET http://127.0.0.1:52521/json_rpc/#019 Returns transactions that are currently in the pool. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":\\\"0\\\",\\\"method\\\":\\\"get_pool_txs_details\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Requestiong all transactions application/json { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\", \"txs\": [ { \"amount\": 500000000000000, \"blob\": \"\", \"blob_size\": 57913, \"fee\": 10000000000, \"id\": \"5864f3e061c70b47d4ea6a47e593aad66bb2462fa4036be2cd3dfede9faa7583\", \"keeper_block\": 0, \"object_in_json\": \"\", \"pub_key\": \"24a523aea7d0b1e69e5a393a7e5531455c4317e527ad83be7a871fea716dc45c\", \"timestamp\": 1558557359 } ] } } Requesting specific transactions { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\", \"txs\": [{ <FULL DETAILED TX INFO for tx 01c5cf5128e4941e78c522d829b6e93277248567159498ad2576a677919c89e9> }] } } Outputs: txs \u2014 array of tx_rpc_extended_info objects; see get_tx_details method description for details. Note: Output is less detailed if ids parameter is empty or omitted. Note Body Params ids array of strings list of transaction hash identifiers for which information is requested. All transactions from the pool will be returned if ids is empty or if this parameter is omitted 20. get_pool_txs_brief_details \u00b6 GET http://127.0.0.1:52521/json_rpc/#020 Returns brief information for transactions currently in the pool. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_pool_txs_brief_details\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Requestiong all transactions application/json { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\", \"txs\": [ { \"fee\": 10000000000, \"id\": \"5864f3e061c70b47d4ea6a47e593aad66bb2462fa4036be2cd3dfede9faa7583\", \"sz\": 57913, \"total_amount\": 500000000000000 } ] } } Requestion specific transactions text/plain { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\", \"txs\": [ { \"fee\": 100000, \"id\": \"5e7ce042556717c4b31b0c3dc744042289bfc058cf669f75ce76a48ca3f75bfd\", \"sz\": 310, \"total_amount\": 49900000 } ] } } Outputs: txs \u2014 array of tx_rpc_brief_info objects. tx_rpc_brief_info object's fields: fee \u2014 unsigned int; transaction fee. id \u2014 string; hash identifier. sz \u2014 unsigned int; size of serialized transaction in bytes (the same as blob_size in tx_rpc_extended_info). total_amount \u2014 unsigned int; sum of all transaction outputs. Note Body Params ids array of strings list of transaction hash identifiers for which information is requested. All transactions from the pool will be returned if ids is empty or if this parameter is omitted. 21. get_all_pool_tx_list \u00b6 GET http://127.0.0.1:52521/json_rpc/#021 Returns IDs for all txs in the pool. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_all_pool_tx_list\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"ids\": [ \"07af9af51abace52c6c9f5e96eac1f4123e56d8d2b2e1ac2ba5c6d68be94680f\", \"968d44f9443b067debc4a467174ad5b640690e165a2f8d45b2904d082bc1312e\" ], \"status\": \"OK\" } } Outputs: ids \u2014 array of strings; list of hash identifiers for all transactions that are currently in the pool. 22. get_main_block_details \u00b6 GET http://127.0.0.1:52521/json_rpc/#022 Returns block details for a specified identifier. Only for main chain blocks. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_main_block_details\\\",\\\"params\\\":{\\\"id\\\":\\\"0036D628535E31969BCABCA15BFC9ED7B7FB5B0A0CE88E7F84A299EC22EF1539\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Normal request application/json { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"block_details\": { \"actual_timestamp\": 1558707712, \"already_generated_coins\": \"17540409000000000000\", \"base_reward\": 1000000000000, \"blob\": \"\", \"block_cumulative_size\": 0, \"block_tself_size\": 0, \"cumulative_diff_adjusted\": \"47789840156373229\", \"cumulative_diff_precise\": \"29013538618324661\", \"difficulty\": \"1852005064583\", \"effective_fee_median\": 100000000, \"height\": 23206, \"id\": \"0036d628535e31969bcabca15bfc9ed7b7fb5b0a0ce88e7f84a299ec22ef1539\", \"is_orphan\": false, \"miner_text_info\": \"\", \"object_in_json\": \"...\", \"penalty\": 0, \"pow_seed\": \"\", \"prev_id\": \"83474d142764e00b033ae10c1c3697e526b1e7331743012122f3dfb365dbe792\", \"summary_reward\": 1000000000000, \"this_block_fee_median\": 0, \"timestamp\": 1558707712, \"total_fee\": 0, \"total_txs_size\": 0, \"transactions_details\": [ { \"amount\": 1000000000000, \"blob\": \"\", \"blob_size\": 100, \"fee\": 0, \"id\": \"1f05b64404c05f028df9ae780abb5c0119c7f4df96d81002922bb67b1ebaa79d\", \"keeper_block\": 23206, \"object_in_json\": \"\", \"pub_key\": \"61c2122faf0854a2b6988859f693c1d6435055114e73f2a80ec1196035a044b9\", \"timestamp\": 1558707712 } ], \"type\": 1 }, \"status\": \"OK\" } } Request a NON-existing block text/plain { \"error\": { \"code\": -14, \"message\": \"the requested block has not been found\" }, \"id\": 0, \"jsonrpc\": \"2.0\" } Outputs: block_details \u2014 block_rpc_extended_info object; see get_blocks_details method for more details. Note Body Params id string required hash identifier for a block. 23. get_alt_block_details \u00b6 GET http://127.0.0.1:52521/json_rpc/#023 Returns block details for a specified identifier. Only for blocks in alternative chains. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_alt_block_details\\\",\\\"params\\\":{\\\"id\\\":\\\"5391963EB274AF8391FA89BC711122B5DB9B6C3703CB8865D45505F919F9842B\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"block_details\": { \"actual_timestamp\": 1558705296, \"already_generated_coins\": \"0\", \"base_reward\": 1000000000000, \"blob\": \"\", \"block_cumulative_size\": 0, \"block_tself_size\": 0, \"cumulative_diff_adjusted\": \"47701129767973676\", \"cumulative_diff_precise\": \"12602457701330728735458\", \"difficulty\": \"2053263042953598309\", \"effective_fee_median\": 0, \"height\": 23138, \"id\": \"5391963eb274af8391fa89bc711122b5db9b6c3703cb8865d45505f919f9842b\", \"is_orphan\": true, \"miner_text_info\": \"1.0.31[29c0487]\", \"object_in_json\": \"...\", \"penalty\": 0, \"pow_seed\": \"\", \"prev_id\": \"62c3d7a0a2f7d253b78a8e48dc0407e7d8f0d26b4fdb8b52687b07a7c4020ba9\", \"summary_reward\": 1000000000000, \"this_block_fee_median\": 0, \"timestamp\": 1558705800, \"total_fee\": 0, \"total_txs_size\": 0, \"transactions_details\": [ { \"amount\": 2000000000000, \"blob\": \"\", \"blob_size\": 203, \"extra\": [ { \"datails_view\": \"\", \"short_view\": \"7eaeb2490d85b17773b30ffe9f32fce50a1e89ee5ed258531e6b66ae13b00327\", \"type\": \"pub_key\" }, { \"datails_view\": \"312e302e33315b323963303438375d\", \"short_view\": \"15 bytes\", \"type\": \"user_data\" }, { \"datails_view\": \"\", \"short_view\": \"0 bytes\", \"type\": \"extra_padding\" }, { \"datails_view\": \"cefd\", \"short_view\": \"cefd\", \"type\": \"XOR\" }, { \"datails_view\": \"\", \"short_view\": \"height: 23148\", \"type\": \"unlock_time\" }, { \"datails_view\": \"\", \"short_view\": \"timestamp: 1558705296 Fri, 24 May 2019 13:41:36 GMT\", \"type\": \"pos_time\" } ], \"fee\": 0, \"id\": \"a88f4ae2a89d5cbf9a76946785b6b45e898177cc0acd0b9c6ec5e35ccd73d9e8\", \"ins\": [ { \"amount\": 0, \"kimage_or_ms_id\": \"\", \"multisig_count\": 0 }, { \"amount\": 1000000000000, \"global_indexes\": [ 32159 ], \"kimage_or_ms_id\": \"5125de7598e723efba04d83258f31a3b30b21ed036f8e52b0669b12b93264267\", \"multisig_count\": 0 } ], \"keeper_block\": 0, \"object_in_json\": \"\", \"outs\": [ { \"amount\": 1000000000000, \"global_index\": 0, \"is_spent\": false, \"minimum_sigs\": 0, \"pub_keys\": [ \"6acb06f7e4916d38ecafb537065e4dedaf0949fd49787fad55256770eaa8b029\" ] }, { \"amount\": 1000000000000, \"global_index\": 0, \"is_spent\": false, \"minimum_sigs\": 0, \"pub_keys\": [ \"c5179786faf5fe9f0d2adfcf6c9b069aae0e1393b771efddef8efade4bb4ce73\" ] } ], \"pub_key\": \"7eaeb2490d85b17773b30ffe9f32fce50a1e89ee5ed258531e6b66ae13b00327\", \"timestamp\": 1558705296 } ], \"type\": 0 }, \"status\": \"OK\" } } Outputs: block_details \u2014 block_rpc_extended_info object; see get_blocks_details method for more details. Note Body Params id string required hash identifier for a block. 24. get_alt_blocks_details \u00b6 GET http://127.0.0.1:52521/json_rpc/#024 Returns alternative blocks details for a specified range. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_alt_blocks_details\\\",\\\"params\\\":{\\\"offset\\\":0,\\\"count\\\":2}}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"blocks\": [{ \"actual_timestamp\": 1537462404, \"already_generated_coins\": 0, \"base_reward\": 0, \"blob\": \"\", \"block_cumulative_size\": 0, .... },{ \"actual_timestamp\": 1537462619, \"already_generated_coins\": 0, \"base_reward\": 0, \"blob\": \"\", \"block_cumulative_size\": 0, .... }], \"status\": \"OK\" } } Outputs: blocks \u2014 array of block_rpc_extended_info objects; see get_blocks_details method for more details. Note Body Params offset int32 required starting offset in the global list of alternative blocks count int32 required number of blocks to be requested 25. reset_transaction_pool \u00b6 POST http://127.0.0.1:52521/json_rpc/#025 Clears the transaction pool. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"reset_transaction_pool\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\" } } 26. get_current_core_tx_expiration_median \u00b6 GET http://127.0.0.1:52521/json_rpc/#026 Returns the median for timestamps of the last 20 blocks. Displayed as returned median value plus 600 seconds, this is used to check the expiration time of parameters. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_current_core_tx_expiration_median\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"expiration_median\": 1537465582, \"status\": \"OK\" } } Outputs: expiration_median \u2014 unsigned int; median value. 27. marketplace_global_get_offers_ex \u00b6 GET http://127.0.0.1:52521/json_rpc/#027 This main marketplace API, which lets to read \"offers\" from EvoX blockchain. It has diverse filters, which let specify particular parameters of the request and help organize effective communication on production. Note Activate \"Offers service\" in daemon to use this API To make daemon work with this API make sure you started daemon with --enable_offers_service command line parameter This main marketplace API method, which lets to read \"offers\" created and managed by given wallet. It has diverse filters, which let specify particular parameters of the request and help organize effective communication on production. More detailed specification of the filter fields provided in \" Filter \" structure defintion. Result returned as an array of Offer objects, which is described in \" Offer \" structure. REQUEST curl --request GET \\ --url 'http://127.0.0.1:52521/json_rpc/#027' \\ --header 'Accept: application/json' RESPONSE Response OK application/json { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"offers\": [ { \"ap\": \"20\", \"at\": \"1\", \"b\": \"\", \"cat\": \"CLS:MAN:TSH\", \"cnt\": \"Skype: some_skype, discord: some_user#01012\", \"com\": \"Some nice comments about tshirt\", \"do\": \"Additional conditions\", \"et\": 10, \"fee\": 10000000000, \"index_in_tx\": 0, \"lci\": \"\", \"lco\": \"World Wide\", \"ot\": 1, \"p\": \"USD\", \"pt\": \"Credit cards, BTC, EVOX, ETH\", \"security\": \"0000000000000000000000000000000000000000000000000000000000000000\", \"t\": \"T-shirt with Evox logo, made by Crypjunkie\", \"timestamp\": 1570219600, \"tx_hash\": \"6ba12c5d2c66d31f770bfdc88ae9dc90d007b9b33f946fc7c1d9750f8655331c\", \"tx_original_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\" }, { \"ap\": \"20\", \"at\": \"1\", \"b\": \"\", \"cat\": \"CLS:MAN:TSH\", \"cnt\": \"Skype: some_skype, discord: some_user#01012\", \"com\": \"Some nice comments about tshirt\", \"do\": \"Additional conditions\", \"et\": 10, \"fee\": 10000000000, \"index_in_tx\": 0, \"lci\": \"\", \"lco\": \"World Wide\", \"ot\": 1, \"p\": \"USD\", \"pt\": \"Credit cards, BTC, EVOX, ETH\", \"security\": \"0000000000000000000000000000000000000000000000000000000000000000\", \"t\": \"T-shirt with Evox logo, made by Crypjunkie\", \"timestamp\": 1570219840, \"tx_hash\": \"2987b671cc337203628a3a1bb7ac811e41f110864d6162d3c2276d2c79f694d6\", \"tx_original_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\" } ], \"status\": \"\", \"total_offers\": 0 } } Response BAD application/json {}","title":"Daemon RPC API"},{"location":"api/daemon-rpc-api/#1-getblockcount","text":"GET http://127.0.0.1:52521/json_rpc/#001 Retrieves the current number of blocks in the main chain \u2014 the longest chain known to this node. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"getblockcount\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"count\": 1535, \"status\": \"OK\" } } Outputs: count \u2014 unsigned integer; total number of blocks in the blockchain, including genesis block at height zero.","title":"1. getblockcount"},{"location":"api/daemon-rpc-api/#2-on_getblockhash","text":"GET http://127.0.0.1:52521/json_rpc/#002 Obtains block hash by given block height. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"on_getblockhash\\\",\\\"params\\\":[0]}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": \"cc608f59f8080e2fbfe3c8c80eb6e6a953d47cf2d6aebd345bada3a1cab99852\" } Outputs: string; standard public address of the wallet. Note Body Params block height array of integers required Array of 1 unsigned integer; block height.","title":"2. on_getblockhash"},{"location":"api/daemon-rpc-api/#3-getblocktemplate","text":"GET http://127.0.0.1:52521/json_rpc/#003 Creates a template for the next block. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"getblocktemplate\\\",\\\"params\\\":{\\\"extra_text\\\":\\\"miner comment\\\",\\\"wallet_address\\\":\\\"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\\\",\\\"stakeholder_address\\\":\\\"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\\\",\\\"pos_block\\\": false,\\\"pos_amount\\\": 0,\\\"pos_index\\\": 0}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"blocktemplate_blob\": \"0100000000000000004ac94cd86e558182ae7c09615f606316e6eb4d25a1a87af26394aa233c84959d00d1e09fe70500010100d4b4010180a094a58d1d0376f2f4eae8b5ca2f676bc0f5242d18603af7dbbcf60b10bc7732d4748d0496f3000516bea1995950357900a3e85dd6b82743276bfd25763abe08e550cb393fd7c6e7f8130d6d696e657220636f6d6d656e74150017431a0edeb401000000\", \"difficulty\": \"1563095640967\", \"height\": 23124, \"prev_hash\": \"4ac94cd86e558182ae7c09615f606316e6eb4d25a1a87af26394aa233c84959d\", \"seed\": \"0000000000000000000000000000000000000000000000000000000000000000\", \"status\": \"OK\" } } Outputs: blocktemplate_blob \u2014 string; hex-encoded serialized block template. difficulty \u2014 unsigned int, difficulty for the block template. height \u2014 unsigned int, height corresponding to the block template. wallet_address - address where transferred block reward stakeholder_address - used only in PoS mining, address where returned stake which was used in PoS generation (optional, normally is the same as wallet_address) Note Body Params wallet_address string required miner's address for receiving newly generated coins extra_text string additional text included into miner transaction. Cannot exceed 255 bytes. pos_block boolean specify type of block template to be created: PoS (true) or PoW (false). Default: false. stakeholder_address string specify miner's address to which the stake coins used in PoS block generation will be returned. pos_amount int32 amount of an output used as a stake. pos_index int32 global index of an output used as a stake.","title":"3. getblocktemplate"},{"location":"api/daemon-rpc-api/#4-submitblock","text":"POST http://127.0.0.1:52521/json_rpc/#004 Submits the given block, i.e., adds it to the local blockchain and broadcasts it to the network. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"submitblock\\\",\\\"params\\\":[\\\"0101_HEX_BLOCK_BLOB_0101\\\"]}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Block is accepted by the core { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\" } } Block was added as alternative { \"error\": { \"code\": -13, \"message\": \"Block added as alternative\" }, \"id\": \"0\", \"jsonrpc\": \"2.0\" } Block is not accepted by the core { \"error\": { \"code\": -7, \"message\": \"Block not accepted\" }, \"id\": \"0\", \"jsonrpc\": \"2.0\" } Note Body Params block's blob array of strings required array of a single string; block's blob.","title":"4. submitblock"},{"location":"api/daemon-rpc-api/#5-getlastblockheader","text":"GET http://127.0.0.1:52521/json_rpc/#005 Returns the header of the last block in the blockchain. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"getlastblockheader\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"block_header\": { \"depth\": 0, \"difficulty\": \"1961934344476071811\", \"hash\": \"613a9eab47211b828aa231867aa83bc1a3573db44f47b510511f50e99e91ed21\", \"height\": 23129, \"major_version\": 1, \"minor_version\": 0, \"nonce\": 0, \"orphan_status\": false, \"prev_hash\": \"b6138d113a0150aeae2cb6909b803e3a22407c56f143ee2c9627b8ca5f3d9724\", \"reward\": 2000000000000, \"timestamp\": 1558705095 }, \"status\": \"OK\" } } Outputs: block_header \u2014 object; a block header object for the last block. block header object fields: depth \u2014 unsigned int; distance in blocks from the blockchain top. Always zero for this call. difficulty \u2014 unsigned int; block difficulty. hash \u2014 string; block identifier. prev_hash \u2014 string; identifier of the previous block. height \u2014 unsigned int; block height. major_version \u2014 unsigned int; major version of a block. minor_version \u2014 unsigned int; minor version of a block. nonce \u2014 unsigned int; block nonce. orphan_status \u2014 boolean; is this block orphan or not? Always false for this call. reward \u2014 unsigned int; how much money this block has generated. timestamp \u2014 unsigned int; block timestamp.","title":"5. getlastblockheader"},{"location":"api/daemon-rpc-api/#6-getblockheaderbyhash","text":"GET http://127.0.0.1:52521/json_rpc/#006 Returns a block header by the given hash identifier. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"getblockheaderbyhash\\\",\\\"params\\\":{\\\"hash\\\":\\\"613a9eab47211b828aa231867aa83bc1a3573db44f47b510511f50e99e91ed21\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Request an existing block { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"block_header\": { \"depth\": 1, \"difficulty\": \"1961934344476071811\", \"hash\": \"613a9eab47211b828aa231867aa83bc1a3573db44f47b510511f50e99e91ed21\", \"height\": 23129, \"major_version\": 1, \"minor_version\": 0, \"nonce\": 0, \"orphan_status\": false, \"prev_hash\": \"b6138d113a0150aeae2cb6909b803e3a22407c56f143ee2c9627b8ca5f3d9724\", \"reward\": 2000000000000, \"timestamp\": 1558705095 }, \"status\": \"OK\" } } Request a NON-existing block { \"error\": { \"code\": -5, \"message\": \"Internal error: can't get block by hash. Hash = 0000000000000000000000000000000000000000000000000000000000000000.\" }, \"id\": \"0\", \"jsonrpc\": \"2.0\" } Outputs: block_header \u2014 object; a block header object for the requested block. See getlastblockheader for detailed fields descriptions. Note Body Params hash string required hash identifier of a block.","title":"6. getblockheaderbyhash"},{"location":"api/daemon-rpc-api/#7-getblockheaderbyheight","text":"GET http://127.0.0.1:52521/json_rpc/#007 Returns a block header by the given block height. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"getblockheaderbyheight\\\",\\\"params\\\":{\\\"height\\\":0}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Request an existing block. { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"block_header\": { \"depth\": 23135, \"difficulty\": \"1\", \"hash\": \"cc608f59f8080e2fbfe3c8c80eb6e6a953d47cf2d6aebd345bada3a1cab99852\", \"height\": 0, \"major_version\": 1, \"minor_version\": 0, \"nonce\": 101011010205, \"orphan_status\": false, \"prev_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\", \"reward\": 17517203000000000000, \"timestamp\": 0 }, \"status\": \"OK\" } } Request a NON-existing block. { \"error\": { \"code\": -2, \"message\": \"To big height: 999999, current blockchain size = 2094\" }, \"id\": \"0\", \"jsonrpc\": \"2.0\" } Outputs: block_header \u2014 object; a block header object for the requested block. See getlastblockheader for detailed fields descriptions. Note Body Params height int32 required height of a block.","title":"7. getblockheaderbyheight"},{"location":"api/daemon-rpc-api/#8-get_alias_details","text":"GET http://127.0.0.1:52521/json_rpc/#008 Returns alias details by alias name. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_alias_details\\\",\\\"params\\\":{\\\"alias\\\":\\\"crypto\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Correct request { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"alias_details\": { \"address\": \"eXDkdqs5U14QJBwtx2MLsxT5xHHKQ4XSwjEXVd7QVZoD4ntEVsS8MVZ9ZnKbEn5iKQ3UepcauqRU5gYU5qo2Ujxw2rseDaUdU\", \"comment\": \"\", \"tracking_key\": \"\" }, \"status\": \"OK\" } } Request details for a NON-existing alias { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"alias_details\": { \"address\": \"\", \"comment\": \"\", \"tracking_key\": \"\" }, \"status\": \"NOT FOUND\" } } Outputs: alias_details \u2014 object; an alias details block object for the requested alias. Alias details object fields: address \u2014 string; public address associated with requested alias. comment \u2014 string; an arbitrary comment set by the owner. Can be empty. tracking_key \u2014 string; private view key for public address. Can be empty. Note Body Params alias string required alias name (without \"@\")","title":"8. get_alias_details"},{"location":"api/daemon-rpc-api/#9-get_alias_by_address","text":"GET http://127.0.0.1:52521/json_rpc/#009 Returns alias name by address. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_alias_by_address\\\", \\\"params\\\":\\\"eXDkdqs5U14QJBwtx2MLsxT5xHHKQ4XSwjEXVd7QVZoD4ntEVsS8MVZ9ZnKbEn5iKQ3UepcauqRU5gYU5qo2Ujxw2rseDaUdU\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Correct request { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"alias_info\": { \"address\": \"eXDkdqs5U14QJBwtx2MLsxT5xHHKQ4XSwjEXVd7QVZoD4ntEVsS8MVZ9ZnKbEn5iKQ3UepcauqRU5gYU5qo2Ujxw2rseDaUdU\", \"alias\": \"crypto\", \"comment\": \"\", \"tracking_key\": \"\" }, \"status\": \"OK\" } } Request details for NON-existing alias { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"alias_info\": { \"address\": \"\", \"alias\": \"\", \"comment\": \"\", \"tracking_key\": \"\" }, \"status\": \"NOT_FOUND\" } } Outputs: alias \u2014 string; alias name for an address. Note Body Params string string required a public address associated with an alias.","title":"9. get_alias_by_address"},{"location":"api/daemon-rpc-api/#10-get_alias_reward","text":"GET http://127.0.0.1:52521/json_rpc/#010 Returns current reward that must be paid to register an alias name. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_alias_reward\\\",\\\"params\\\":{\\\"alias\\\":\\\"crypto\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"reward\": 100000000000, \"status\": \"OK\" } } Outputs: reward \u2014 unsigned int; current reward (in atomic units) to be paid for an alias. Note Body Params alias string alias name","title":"10. get_alias_reward"},{"location":"api/daemon-rpc-api/#11-get_blocks_details","text":"GET http://127.0.0.1:52521/json_rpc/#011 Return blocks details for a specified range of heights. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_blocks_details\\\",\\\"params\\\":{\\\"height_start\\\":10000,\\\"count\\\":1}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"blocks\": [ { \"actual_timestamp\": 1557906733, \"already_generated_coins\": \"17527203000000000000\", \"base_reward\": 1000000000000, \"blob\": \"\", \"block_cumulative_size\": 1690, \"block_tself_size\": 0, \"cumulative_diff_adjusted\": \"27934854069161424\", \"cumulative_diff_precise\": \"16964766616549681\", \"difficulty\": \"3792479698469\", \"effective_fee_median\": 50050000, \"height\": 10000, \"id\": \"fe42b8c4742d2dbe4d5de5ae5212f75acb62b75e4b66b758ff8e252825c2d7a5\", \"is_orphan\": false, \"miner_text_info\": \"\", \"object_in_json\": \"...\", \"penalty\": 0, \"pow_seed\": \"\", \"prev_id\": \"8ee7377d6ee3632ea5b43bed2a5ea41c035abb3fe6146aec63e6c5cbbc4257f1\", \"summary_reward\": 1000100000000, \"this_block_fee_median\": 100000000, \"timestamp\": 1557906733, \"total_fee\": 100000000, \"total_txs_size\": 1690, \"transactions_details\": [ { \"amount\": 1000100000000, \"blob\": \"\", \"blob_size\": 136, \"fee\": 0, \"id\": \"018c8bcf749063ee4a8127b84586a03f9bbd1909d9e5cfdb92007ebc463462d4\", \"keeper_block\": 10000, \"object_in_json\": \"\", \"pub_key\": \"b5800dff01803ec97edf956c7c82cc2658333de5ca3c860e68f7f8f216f3baa9\", \"timestamp\": 1557906733 }, { \"amount\": 2999900000000, \"blob\": \"\", \"blob_size\": 1690, \"fee\": 100000000, \"id\": \"612ca0baf8a1a8b7b86d9b56e3b9e1ef4bf6af6296ece8d75e85601fe3987b7b\", \"keeper_block\": 10000, \"object_in_json\": \"\", \"pub_key\": \"bf6e7ab5488f612e0ad8f00931633f01136d69f6e973130105431b080fac2a95\", \"timestamp\": 1557906733 } ], \"type\": 1 } ], \"status\": \"OK\" } } Outputs: blocks \u2014 array of block_rpc_extended_info objects. block_rpc_extended_info object fields: actual_timestamp \u2014 unsigned int; timestamp for the moment of block creation (for PoW blocks equal to timestamp, for PoS they differ). already_generated_coins \u2014 unsigned int; total number of coins generated, including this block. base_reward \u2014 unsigned int; base reward for the block (equal to reward if there are no transactions except the miner tx). pow_seed \u2014 some hex string . block_cumulative_size \u2014 unsigned int; total size of block's transactions, in bytes. Miner tx is included in special cases. cumulative_diff_adjusted \u2014 unsigned int; cumulative PoS or PoW difficulty for the block, adjusted by the sequence factor (number of same type blocks going sequentially one-by-one). cumulative_diff_precise \u2014 unsigned int; precise cumulative PoS or PoW difficulty for the block. difficulty \u2014 unsigned int; difficulty of the block. effective_fee_median \u2014 unsigned int; median of transaction fees within a specific window used in calculations for this block. height \u2014 unsigned int; block height. id \u2014 string; block hash identifier. is_orphan \u2014 boolean; orphan status for the block. False for normal blocks. miner_text_info \u2014 string; undefined text inserted by miner when the block was mined. object_in_json \u2014 string; JSON-serialized block object. penalty \u2014 unsigned int; difference between summary_reward and base_reward. prev_id \u2014 string; hash identifier of the previous block. summary_reward \u2014 unsigned int; amount of coins this block has generated in miner tx. this_block_fee_median \u2014 unsigned int; median fee among the transactions for this block. timestamp \u2014 unsigned int; block timestamp (serves a special purpose for PoS blocks, which is why actual_timestamp should be used as actual block timestamp). total_fee \u2014 unsigned int; sum of transaction fees in this block. total_txs_size \u2014 unsigned int; total transaction size in this block (excluding the miner tx). transactions_details \u2014 array of tx_rpc_extended_info objects (see below get_tx_details description). type \u2014 unsigned int; 0 if this is PoS block, 1 if this is PoW block. Note Body Params height_start int32 starting height count int32 number of blocks to be requested","title":"11. get_blocks_details"},{"location":"api/daemon-rpc-api/#12-get_tx_details","text":"GET http://127.0.0.1:52521/json_rpc/#012 Returns transaction details by specified transaction hash identifier. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_tx_details\\\",\\\"params\\\":{\\\"tx_hash\\\":\\\"d4af4b8e714610865bab09375c40a625ea741ac6f2d271ee398e0ffa5c0af74c\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Correct response transaction { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\", \"tx_info\": { \"amount\": 1000000200000, \"blob\": \"\", \"blob_size\": 386, \"extra\": [ { \"datails_view\": \"\", \"short_view\": \"a6c1a6d3453a6f21c32bd03d29b30add6bb9dcc55c23961d863b0faad5643aa8\", \"type\": \"pub_key\" }, { \"datails_view\": \"520f\", \"short_view\": \"520f\", \"type\": \"XOR\" }, { \"datails_view\": \"c885\", \"short_view\": \"c885\", \"type\": \"XOR\" } ], \"fee\": 100000, \"id\": \"d4af4b8e714610865bab09375c40a625ea741ac6f2d271ee398e0ffa5c0af74c\", \"ins\": [ { \"amount\": 1000000000000, \"global_indexes\": [ 33772 ], \"kimage_or_ms_id\": \"bc97426f220d02badf7f836cedc0b10e15fa1abc0163000266c84a93e10d52cb\", \"multisig_count\": 0 }, { \"amount\": 300000, \"global_indexes\": [ 459 ], \"kimage_or_ms_id\": \"2cedd318bb5e75d5ae56a1801c1804e50da5efa708854b254b1f159fe55ce787\", \"multisig_count\": 0 } ], \"keeper_block\": 23183, \"object_in_json\": \"\", \"outs\": [ { \"amount\": 100000, \"global_index\": 3590, \"is_spent\": false, \"minimum_sigs\": 0, \"pub_keys\": [ \"242884c767abe6d9d855f31119314fee229db2f014f80c46c1ab14428be818cf\" ] }, { \"amount\": 100000, \"global_index\": 3591, \"is_spent\": false, \"minimum_sigs\": 0, \"pub_keys\": [ \"e6295a3dc3a0b139feb330ec6591cc76f29468fb660ffc8413c883221117b6c2\" ] }, { \"amount\": 1000000000000, \"global_index\": 34112, \"is_spent\": false, \"minimum_sigs\": 0, \"pub_keys\": [ \"23587fbe7731bce91b7a81b0bcb310a8430057d426a6842e205aeb223c9457c5\" ] } ], \"pub_key\": \"a6c1a6d3453a6f21c32bd03d29b30add6bb9dcc55c23961d863b0faad5643aa8\", \"timestamp\": 1558706609 } } } Request a NON-existing transaction { \"error\": { \"code\": -14, \"message\": \"tx is not found\" }, \"id\": 0, \"jsonrpc\": \"2.0\" } Outputs: tx_info \u2014 object; a tx_rpc_extended_info object (see below). tx_rpc_extended_info object fields: amount \u2014 unsigned int; sum of transaction outputs. attachments \u2014 array of objects; list of transaction attachments. blob_size \u2014 unsigned int; size of serialized transaction in bytes. extra \u2014 array of objects; list of extra items. fee \u2014 unsigned int; transaction fee. id \u2014 string; hash identifier of the transaction. ins \u2014 array of objects; list of inputs. keeper_block \u2014 unsigned int; height of the block containing this transaction. outs \u2014 array of objects; list of outputs. pub_key \u2014 string; transaction public key. timestamp \u2014 unsigned int; actual timestamp of the block containing this transaction. Note Body Params tx_hash string required hash identifier of a transaction","title":"12. get_tx_details"},{"location":"api/daemon-rpc-api/#13-search_by_id","text":"GET http://127.0.0.1:52521/json_rpc/#013 Returns type of an entity by specified hash identifier. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"search_by_id\\\",\\\"params\\\":{\\\"id\\\":\\\"d4af4b8e714610865bab09375c40a625ea741ac6f2d271ee398e0ffa5c0af74c\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Response application/json block { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\", \"types_found\": [ \"block\" ] } } Response text/plain transaction { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\", \"types_found\": [ \"block\" ] } } Outputs: types_found \u2014 array of strings; a set of the types found (usually only one). Possible values: block, alt_block, key_image, tx, multisig_id. Note Body Params id string required hash identifier of a block, transaction, key image, or multisig output","title":"13. search_by_id"},{"location":"api/daemon-rpc-api/#14-getinfo","text":"GET http://127.0.0.1:52521/json_rpc/#014 Returns various information and stats. List of available flags values: RPC Command Flag COMMAND_RPC_GET_INFO_FLAG_POS_DIFFICULTY 0x0000000000000001 COMMAND_RPC_GET_INFO_FLAG_POW_DIFFICULTY 0x0000000000000002 COMMAND_RPC_GET_INFO_FLAG_NET_TIME_DELTA_MEDIAN 0x0000000000000004 COMMAND_RPC_GET_INFO_FLAG_CURRENT_NETWORK_HASHRATE_50 0x0000000000000008 COMMAND_RPC_GET_INFO_FLAG_CURRENT_NETWORK_HASHRATE_350 0x0000000000000010 COMMAND_RPC_GET_INFO_FLAG_SECONDS_FOR_10_BLOCKS 0x0000000000000020 COMMAND_RPC_GET_INFO_FLAG_SECONDS_FOR_30_BLOCKS 0x0000000000000040 COMMAND_RPC_GET_INFO_FLAG_TRANSACTIONS_DAILY_STAT 0x0000000000000080 COMMAND_RPC_GET_INFO_FLAG_LAST_POS_TIMESTAMP 0x0000000000000100 COMMAND_RPC_GET_INFO_FLAG_LAST_POW_TIMESTAMP 0x0000000000000200 COMMAND_RPC_GET_INFO_FLAG_TOTAL_COINS 0x0000000000000400 COMMAND_RPC_GET_INFO_FLAG_LAST_BLOCK_SIZE 0x0000000000000800 COMMAND_RPC_GET_INFO_FLAG_TX_COUNT_IN_LAST_BLOCK 0x0000000000001000 COMMAND_RPC_GET_INFO_FLAG_POS_SEQUENCE_FACTOR 0x0000000000002000 COMMAND_RPC_GET_INFO_FLAG_POW_SEQUENCE_FACTOR 0x0000000000004000 COMMAND_RPC_GET_INFO_FLAG_OUTS_STAT 0x0000000000008000 COMMAND_RPC_GET_INFO_FLAG_PERFORMANCE 0x0000000000010000 COMMAND_RPC_GET_INFO_FLAG_POS_BLOCK_TS_SHIFT_VS_ACTUAL 0x0000000000020000 COMMAND_RPC_GET_INFO_FLAG_MARKET 0x0000000000040000 COMMAND_RPC_GET_INFO_FLAG_ALL_FLAGS 0xffffffffffffffff REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"getinfo\\\",\\\"params\\\":{\\\"flags\\\":4294967295}}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"alias_count\": 89, \"alt_blocks_count\": 38, \"block_reward\": 1000000000000, \"current_blocks_median\": 125000, \"current_max_allowed_block_size\": 250000, \"current_network_hashrate_350\": 12371661017, \"current_network_hashrate_50\": 22307725414, \"daemon_network_state\": 2, \"default_fee\": 10000000000, \"expiration_median_timestamp\": 1558706697, \"grey_peerlist_size\": 52, \"height\": 23195, \"incoming_connections_count\": 17, \"last_block_hash\": \"941637785d710dddd3391eb7adc451db31855c99ac31cec4f221ad856b86871f\", \"last_block_size\": 0, \"last_block_timestamp\": 1558707495, \"last_block_total_reward\": 1000000000000, \"last_pos_timestamp\": 1558707495, \"last_pow_timestamp\": 1558707021, \"max_net_seen_height\": 21097, \"mi\": { \"build_no\": 26, \"mode\": 0, \"ver_major\": 1, \"ver_minor\": 0, \"ver_revision\": 0 }, \"minimum_fee\": 10000000000, \"net_time_delta_median\": 0, \"offers_count\": 0, \"outgoing_connections_count\": 8, \"outs_stat\": { \"amount_0_001\": 1636, \"amount_0_01\": 3177, \"amount_0_1\": 1829, \"amount_1\": 34129, \"amount_10\": 407, \"amount_100\": 719, \"amount_1000\": 6, \"amount_10000\": 2, \"amount_100000\": 0, \"amount_1000000\": 0 }, \"performance_data\": { \"all_txs_insert_time_5\": 106, \"block_processing_time_0\": 8000, \"block_processing_time_1\": 8337, \"etc_stuff_6\": 681, \"insert_time_4\": 16, \"longhash_calculating_time_3\": 1074, \"map_size\": 137438953472, \"raise_block_core_event\": 0, \"target_calculating_calc\": 11, \"target_calculating_enum_blocks\": 5799, \"target_calculating_time_2\": 5816, \"tx_add_one_tx_time\": 7432, \"tx_append_is_expired\": 0, \"tx_append_rl_wait\": 0, \"tx_append_time\": 253, \"tx_check_exist\": 6, \"tx_check_inputs_attachment_check\": 0, \"tx_check_inputs_loop\": 10133, \"tx_check_inputs_loop_ch_in_val_sig\": 1368, \"tx_check_inputs_loop_kimage_check\": 16, \"tx_check_inputs_loop_scan_outputkeys_get_item_size\": 10, \"tx_check_inputs_loop_scan_outputkeys_loop\": 122, \"tx_check_inputs_loop_scan_outputkeys_loop_find_tx\": 24, \"tx_check_inputs_loop_scan_outputkeys_loop_get_subitem\": 10, \"tx_check_inputs_loop_scan_outputkeys_loop_handle_output\": 0, \"tx_check_inputs_loop_scan_outputkeys_relative_to_absolute\": 0, \"tx_check_inputs_prefix_hash\": 0, \"tx_check_inputs_time\": 7175, \"tx_count\": 0, \"tx_prapare_append\": 0, \"tx_print_log\": 0, \"tx_process_attachment\": 0, \"tx_process_extra\": 0, \"tx_process_inputs\": 66, \"tx_push_global_index\": 113, \"tx_store_db\": 20, \"writer_tx_count\": 0 }, \"pos_allowed\": true, \"pos_block_ts_shift_vs_actual\": 459, \"pos_diff_total_coins_rate\": 118, \"pos_difficulty\": \"2748846848713493647\", \"pos_sequence_factor\": 2, \"pow_difficulty\": 1701500087805, \"pow_sequence_factor\": 0, \"seconds_for_10_blocks\": 440, \"seconds_for_30_blocks\": 889, \"status\": \"OK\", \"synchronization_start_height\": 21094, \"synchronized_connections_count\": 25, \"total_coins\": \"17540397000000000000\", \"transactions_cnt_per_day\": 559, \"transactions_volume_per_day\": 5337825461100000, \"tx_count\": 9267, \"tx_count_in_last_block\": 0, \"tx_pool_performance_data\": { \"begin_tx_time\": 7, \"check_inputs_time\": 4567, \"check_inputs_types_supported_time\": 0, \"check_keyimages_ws_ms_time\": 20, \"db_commit_time\": 13276, \"expiration_validate_time\": 1, \"tx_processing_time\": 18030, \"update_db_time\": 132, \"validate_alias_time\": 8, \"validate_amount_time\": 0 }, \"tx_pool_size\": 3, \"white_peerlist_size\": 128 } } Outputs: alias_count \u2014 unsigned int; number of total aliases registered. alt_blocks_count \u2014 unsigned int; number of alternative blocks known to this node. block_reward \u2014 unsigned int; base block reward for the next block (excluding fees and txs size penalty). Calculated only if both COMMAND_RPC_GET_INFO_FLAG_POS_DIFFICULTY and COMMAND_RPC_GET_INFO_FLAG_TOTAL_COINS flags are present. current_blocks_median \u2014 unsigned int; median of cumulative block sizes for the recent N blocks. current_max_allowed_block_size \u2014 unsigned int; maximum allowed cumulative size of a block in bytes. current_network_hashrate_350 \u2014 unsigned int; network hashrate calculated by difficulty within a window of the last 350 blocks. Calculated only if COMMAND_RPC_GET_INFO_FLAG_CURRENT_NETWORK_HASHRATE_350 flag is present. current_network_hashrate_50 \u2014 unsigned int; the same as above for last 50 blocks. Calculated only if COMMAND_RPC_GET_INFO_FLAG_CURRENT_NETWORK_HASHRATE_50 flag is present. daemon_network_state \u2014 unsigned int; current daemon state. Possible values and their meaning: daemon_network_state_connecting = 0, daemon_network_state_synchronizing = 1, daemon_network_state_online = 2, daemon_network_state_loading_core = 3, daemon_network_state_internal_error = 4, daemon_network_state_unloading_core = 5 default_fee \u2014 unsigned int; current default fee. grey_peerlist_size \u2014 unsigned int; number of peers in the gray list (these are peers received from another node and this node has not yet attempted to connect to them). height \u2014 unsigned int; number of blocks in the main chain. incoming_connections_count \u2014 unsigned int; number of incoming P2P connections. last_block_size \u2014 unsigned int; cumulative size of the last block. Returned only if COMMAND_RPC_GET_INFO_FLAG_LAST_BLOCK_SIZE flag is present. last_block_total_reward \u2014 unsigned int; actual reward for the last block. Calculated only if both COMMAND_RPC_GET_INFO_FLAG_POS_DIFFICULTY and COMMAND_RPC_GET_INFO_FLAG_TOTAL_COINS flags are present. last_pos_timestamp \u2014 unsigned int; timestamp of the last PoS block in the main chain. Calculated only if COMMAND_RPC_GET_INFO_FLAG_LAST_POS_TIMESTAMP flag is present. last_pow_timestamp \u2014 unsigned int; timestamp of the last PoW block in the main chain. Calculated only if COMMAND_RPC_GET_INFO_FLAG_LAST_POW_TIMESTAMP flag is present. max_net_seen_height \u2014 unsigned int; size of the longest chain among this node\u2019s peers. mi \u2014 object; the last received maintainer info message with recommended build versions from project maintainers. See below detailed description of maintainers_info_external object. minimum_fee \u2014 unsigned int; current tx fee minimum required by tx pool. net_time_delta_median \u2014 signed int; median of system time differences among this node\u2019s peers. Calculated only if COMMAND_RPC_GET_INFO_FLAG_NET_TIME_DELTA_MEDIAN flag is present. offers_count \u2014 unsigned int; total number of market offers known to this node. Calculated only if COMMAND_RPC_GET_INFO_FLAG_PERFORMANCE flag is present and no --disable-market CLI option was specified. outgoing_connections_count \u2014 unsigned int; number of outgoing P2P connections. outs_stat \u2014 object; brief output statistics. pos_allowed \u2014 boolean; false if PoS blocks cannot be accepted yet, otherwise \u2014 true. pos_block_ts_shift_vs_actual \u2014 signed int; the difference between the block timestamp and actual block timestamp for the last PoS block in the main chain. Calculated only if COMMAND_RPC_GET_INFO_FLAG_POS_BLOCK_TS_SHIFT_VS_ACTUAL flag is present. pos_diff_total_coins_rate \u2014 unsigned int; current ratio of PoS difficulty to total coins mined. Calculated only if both COMMAND_RPC_GET_INFO_FLAG_POS_DIFFICULTY and COMMAND_RPC_GET_INFO_FLAG_TOTAL_COINS flags are present. pos_difficulty \u2014 unsigned int; difficulty for the next PoS block. pos_sequence_factor \u2014 unsigned int; size of a continuous sequence of PoS blocks starting from the top block. Calculated only if COMMAND_RPC_GET_INFO_FLAG_POS_SEQUENCE_FACTOR flag is present. pow_difficulty \u2014 unsigned int; difficulty for the next PoW block. pow_sequence_factor \u2014 unsigned int; size of a continuous sequence of PoW blocks starting from the top block. (Required flag: COMMAND_RPC_GET_INFO_FLAG_POW_SEQUENcE_FACTOR ) seconds_for_10_blocks \u2014 unsigned int; timestamp difference between the top block and the 10th from the top. (Required flag: COMMAND_RPC_GET_INFO_FLAG_SECONDS_FOR_10_BLOCKS ) seconds_for_30_blocks \u2014 unsigned int; timestamp difference between the top block and the 30th from the top. (Required flag: COMMAND_RPC_GET_INFO_FLAG_SECONDS_FOR_30_BLOCKS ) synchronization_start_height \u2014 unsigned int; size of the local blockchain when the synchronization process started for the first time after daemon start. synchronized_connections_count \u2014 unsigned int; number of synchronized peers. total_coins \u2014 unsigned int; number of emitted coins. (Required flag: COMMAND_RPC_GET_INFO_FLAG_TOTAL_COINS ) transactions_cnt_per_day \u2014 unsigned int; number of non-coinbase transactions for the last 24 hours. (Required flag: COMMAND_RPC_GET_INFO_FLAG_TRANSACTIONS_DAILY_STAT ) transactions_volume_per_day \u2014 unsigned int; total amount of non-miner transactions for the last 24 hours. (Required flag: COMMAND_RPC_GET_INFO_FLAG_TRANSACTIONS_DAILY_STAT ) tx_count \u2014 unsigned int; total number of all non-coinbase transactions. tx_count_in_last_block \u2014 unsigned int; number of non-coinbase transactions in the last block. (Required flag: COMMAND_RPC_GET_INFO_FLAG_TX_COUNT_IN_LAST_BLOCK ) tx_pool_size \u2014 unsigned int; number of transactions in the tx pool. white_peerlist_size \u2014 unsigned int; number of peers in the white list (total number of peers to which this node has ever been connected). Fields of maintainers_info_external object: ver_major \u2014 unsigned int; major build version from project maintainers. ver_minor \u2014 unsigned int; minor build version from project maintainers. ver_revision \u2014 unsigned int; revision build version from project maintainers. mode \u2014 unsigned int; maintainers info message type: #define ALERT_TYPE_CALM 1 #define ALERT_TYPE_URGENT 2 #define ALERT_TYPE_CRITICAL 3 Note Body Params flags int32 required binary mask of flags combined together with bitwise-OR operation. Default: 0 (no flags)","title":"14. getinfo"},{"location":"api/daemon-rpc-api/#15-get_out_info","text":"GET http://127.0.0.1:11211/json_rpc/#015 Looks up an output in the global outputs table by specified amount and output global index. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_out_info\\\",\\\"params\\\":{\\\"amount\\\":1000000,\\\"i\\\":1}}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Normal request application/json { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"out_no\": 0, \"status\": \"OK\", \"tx_id\": \"09237f99387faa47ca971ce6805534c012f29a513b1e95dd8279ba4e1d81a837\" } } Request a NON-existing output text/plain { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"out_no\": 0, \"status\": \"NOT FOUND\", \"tx_id\": \"0000000000000000000000000000000000000000000000000000000000000000\" } } Outputs: status \u2014 string; \"OK\" if the output was found, \"NOT FOUND\" if the requested output was not found. tx_id \u2014 string; hash identifier of output's source transaction. out_no \u2014 unsigned int; output local index in its source transaction. Note Body Params amount int32 required output amount i int32 required output global index","title":"15. get_out_info"},{"location":"api/daemon-rpc-api/#16-get_multisig_info","text":"GET http://127.0.0.1:52521/json_rpc/#016 Looks up multisig output by specified identifier. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_multisig_info\\\",\\\"params\\\":{\\\"ms_id\\\":\\\"8937e6b5d11b18e6bf55c213723aeb2203e0b8a8906d1ed662236e4bc070e604\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Normal request application/json { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"out_no\": 3, \"status\": \"OK\", \"tx_id\": \"2df88a09b2d8b73a45824526c26e7f21836bbe0b111e1e8a6896c1a7fc8e03eb\" } } Request NON-existing output text/plain { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"out_no\": 0, \"status\": \"NOT FOUND\", \"tx_id\": \"0000000000000000000000000000000000000000000000000000000000000000\" } } Outputs: tx_id \u2014 string; hash identifier of transaction, containing the given multisig output. out_no \u2014 unsigned int; local multisig output index in the transaction, starting from zero. Note Body Params ms_id string required hash identifier of a multisig output","title":"16. get_multisig_info"},{"location":"api/daemon-rpc-api/#17-get_all_alias_details","text":"GET http://127.0.0.1:52521/json_rpc/#017 Returns all registered aliases. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_all_alias_details\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"aliases\": [ { \"address\": \"ZxBvxQuPUah1BxopoeysUze4Z1G7Ts86uQNMTRrcMLrwRcpfqFtPinuXf7sMy7gLfYWXrRJnA692PC4nM7JJS5Tn1rQSmtgcG\", \"alias\": \"abcevox\", \"comment\": \"\", \"tracking_key\": \"\" }, { \"address\": \"ZxCgpbN4yts1CAhXh9qxKbERsYoaZY972EBJKoiukhdp9tQSSbSjpE9a2g4KNSssJ8HiL4p2mjz77gTTDuvRFzhe26yyaPhgW\", \"alias\": \"alexandre\", \"comment\": \"\", \"tracking_key\": \"\" }, { \"address\": \"ZxCVg1QXPr1UQNaBN3zkaVZdhUB4tbvMhRaXeWToyfm2Rpg76GWbeJZ7e1vL535JYXg7K5E7wj2w9YJwW38pvPwF34u7TX7cm\", \"alias\": \"alexbo\", \"comment\": \"\", \"tracking_key\": \"\" }, { \"address\": \"ZxC7eRhz54PLZnaECze66aKuvSTSZa74DNjFfppy5SNV7aK1uzeNo1wKDAKyiCmU44K9vZ8TVLw3A86ALoj6k1Ra31trAhqNR\", \"alias\": \"zoinker\", \"comment\": \"\", \"tracking_key\": \"\" } ], \"status\": \"OK\" } } Outputs: aliases \u2014 array of alias_rpc_details objects. alias_rpc_details object's fields description: alias \u2014 string; alias name. address \u2014 string; address of a corresponding wallet. tracking_key \u2014 string; hex-encoded secret view key (optional) of the wallet. comment \u2014 string; user-defined comment, made by alias owner (optional).","title":"17. get_all_alias_details"},{"location":"api/daemon-rpc-api/#18-get_aliases","text":"GET http://127.0.0.1:52521/json_rpc/#018 Retrieves a specified range of aliases from the global list. Warning Obsolete method! Not recommended for use. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_aliases\\\",\\\"params\\\":{\\\"offset\\\":0,\\\"count\\\":1}}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"aliases\": [ { \"address\": \"eXBvxQuPUah1BxopoeysUze4Z1G7Ts86uQNMTRrcMLrwRcpfqFtPinuXf7sMy7gLfYWXrRJnA692PC4nM7JJS5Tn1rQSmtgcG\", \"alias\": \"abcevox\", \"comment\": \"\", \"tracking_key\": \"\" } ], \"status\": \"OK\" } } Outputs: aliases \u2014 array of alias_rpc_details objects; see get_all_alias_details method description for details. Note Body Params offset int32 required starting offset in global alias list count int32 required how many elements to retrieve","title":"18. get_aliases"},{"location":"api/daemon-rpc-api/#19-get_pool_txs_details","text":"GET http://127.0.0.1:52521/json_rpc/#019 Returns transactions that are currently in the pool. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":\\\"0\\\",\\\"method\\\":\\\"get_pool_txs_details\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Requestiong all transactions application/json { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\", \"txs\": [ { \"amount\": 500000000000000, \"blob\": \"\", \"blob_size\": 57913, \"fee\": 10000000000, \"id\": \"5864f3e061c70b47d4ea6a47e593aad66bb2462fa4036be2cd3dfede9faa7583\", \"keeper_block\": 0, \"object_in_json\": \"\", \"pub_key\": \"24a523aea7d0b1e69e5a393a7e5531455c4317e527ad83be7a871fea716dc45c\", \"timestamp\": 1558557359 } ] } } Requesting specific transactions { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\", \"txs\": [{ <FULL DETAILED TX INFO for tx 01c5cf5128e4941e78c522d829b6e93277248567159498ad2576a677919c89e9> }] } } Outputs: txs \u2014 array of tx_rpc_extended_info objects; see get_tx_details method description for details. Note: Output is less detailed if ids parameter is empty or omitted. Note Body Params ids array of strings list of transaction hash identifiers for which information is requested. All transactions from the pool will be returned if ids is empty or if this parameter is omitted","title":"19. get_pool_txs_details"},{"location":"api/daemon-rpc-api/#20-get_pool_txs_brief_details","text":"GET http://127.0.0.1:52521/json_rpc/#020 Returns brief information for transactions currently in the pool. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_pool_txs_brief_details\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Requestiong all transactions application/json { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\", \"txs\": [ { \"fee\": 10000000000, \"id\": \"5864f3e061c70b47d4ea6a47e593aad66bb2462fa4036be2cd3dfede9faa7583\", \"sz\": 57913, \"total_amount\": 500000000000000 } ] } } Requestion specific transactions text/plain { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\", \"txs\": [ { \"fee\": 100000, \"id\": \"5e7ce042556717c4b31b0c3dc744042289bfc058cf669f75ce76a48ca3f75bfd\", \"sz\": 310, \"total_amount\": 49900000 } ] } } Outputs: txs \u2014 array of tx_rpc_brief_info objects. tx_rpc_brief_info object's fields: fee \u2014 unsigned int; transaction fee. id \u2014 string; hash identifier. sz \u2014 unsigned int; size of serialized transaction in bytes (the same as blob_size in tx_rpc_extended_info). total_amount \u2014 unsigned int; sum of all transaction outputs. Note Body Params ids array of strings list of transaction hash identifiers for which information is requested. All transactions from the pool will be returned if ids is empty or if this parameter is omitted.","title":"20. get_pool_txs_brief_details"},{"location":"api/daemon-rpc-api/#21-get_all_pool_tx_list","text":"GET http://127.0.0.1:52521/json_rpc/#021 Returns IDs for all txs in the pool. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_all_pool_tx_list\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"ids\": [ \"07af9af51abace52c6c9f5e96eac1f4123e56d8d2b2e1ac2ba5c6d68be94680f\", \"968d44f9443b067debc4a467174ad5b640690e165a2f8d45b2904d082bc1312e\" ], \"status\": \"OK\" } } Outputs: ids \u2014 array of strings; list of hash identifiers for all transactions that are currently in the pool.","title":"21. get_all_pool_tx_list"},{"location":"api/daemon-rpc-api/#22-get_main_block_details","text":"GET http://127.0.0.1:52521/json_rpc/#022 Returns block details for a specified identifier. Only for main chain blocks. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_main_block_details\\\",\\\"params\\\":{\\\"id\\\":\\\"0036D628535E31969BCABCA15BFC9ED7B7FB5B0A0CE88E7F84A299EC22EF1539\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE Normal request application/json { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"block_details\": { \"actual_timestamp\": 1558707712, \"already_generated_coins\": \"17540409000000000000\", \"base_reward\": 1000000000000, \"blob\": \"\", \"block_cumulative_size\": 0, \"block_tself_size\": 0, \"cumulative_diff_adjusted\": \"47789840156373229\", \"cumulative_diff_precise\": \"29013538618324661\", \"difficulty\": \"1852005064583\", \"effective_fee_median\": 100000000, \"height\": 23206, \"id\": \"0036d628535e31969bcabca15bfc9ed7b7fb5b0a0ce88e7f84a299ec22ef1539\", \"is_orphan\": false, \"miner_text_info\": \"\", \"object_in_json\": \"...\", \"penalty\": 0, \"pow_seed\": \"\", \"prev_id\": \"83474d142764e00b033ae10c1c3697e526b1e7331743012122f3dfb365dbe792\", \"summary_reward\": 1000000000000, \"this_block_fee_median\": 0, \"timestamp\": 1558707712, \"total_fee\": 0, \"total_txs_size\": 0, \"transactions_details\": [ { \"amount\": 1000000000000, \"blob\": \"\", \"blob_size\": 100, \"fee\": 0, \"id\": \"1f05b64404c05f028df9ae780abb5c0119c7f4df96d81002922bb67b1ebaa79d\", \"keeper_block\": 23206, \"object_in_json\": \"\", \"pub_key\": \"61c2122faf0854a2b6988859f693c1d6435055114e73f2a80ec1196035a044b9\", \"timestamp\": 1558707712 } ], \"type\": 1 }, \"status\": \"OK\" } } Request a NON-existing block text/plain { \"error\": { \"code\": -14, \"message\": \"the requested block has not been found\" }, \"id\": 0, \"jsonrpc\": \"2.0\" } Outputs: block_details \u2014 block_rpc_extended_info object; see get_blocks_details method for more details. Note Body Params id string required hash identifier for a block.","title":"22. get_main_block_details"},{"location":"api/daemon-rpc-api/#23-get_alt_block_details","text":"GET http://127.0.0.1:52521/json_rpc/#023 Returns block details for a specified identifier. Only for blocks in alternative chains. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_alt_block_details\\\",\\\"params\\\":{\\\"id\\\":\\\"5391963EB274AF8391FA89BC711122B5DB9B6C3703CB8865D45505F919F9842B\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"block_details\": { \"actual_timestamp\": 1558705296, \"already_generated_coins\": \"0\", \"base_reward\": 1000000000000, \"blob\": \"\", \"block_cumulative_size\": 0, \"block_tself_size\": 0, \"cumulative_diff_adjusted\": \"47701129767973676\", \"cumulative_diff_precise\": \"12602457701330728735458\", \"difficulty\": \"2053263042953598309\", \"effective_fee_median\": 0, \"height\": 23138, \"id\": \"5391963eb274af8391fa89bc711122b5db9b6c3703cb8865d45505f919f9842b\", \"is_orphan\": true, \"miner_text_info\": \"1.0.31[29c0487]\", \"object_in_json\": \"...\", \"penalty\": 0, \"pow_seed\": \"\", \"prev_id\": \"62c3d7a0a2f7d253b78a8e48dc0407e7d8f0d26b4fdb8b52687b07a7c4020ba9\", \"summary_reward\": 1000000000000, \"this_block_fee_median\": 0, \"timestamp\": 1558705800, \"total_fee\": 0, \"total_txs_size\": 0, \"transactions_details\": [ { \"amount\": 2000000000000, \"blob\": \"\", \"blob_size\": 203, \"extra\": [ { \"datails_view\": \"\", \"short_view\": \"7eaeb2490d85b17773b30ffe9f32fce50a1e89ee5ed258531e6b66ae13b00327\", \"type\": \"pub_key\" }, { \"datails_view\": \"312e302e33315b323963303438375d\", \"short_view\": \"15 bytes\", \"type\": \"user_data\" }, { \"datails_view\": \"\", \"short_view\": \"0 bytes\", \"type\": \"extra_padding\" }, { \"datails_view\": \"cefd\", \"short_view\": \"cefd\", \"type\": \"XOR\" }, { \"datails_view\": \"\", \"short_view\": \"height: 23148\", \"type\": \"unlock_time\" }, { \"datails_view\": \"\", \"short_view\": \"timestamp: 1558705296 Fri, 24 May 2019 13:41:36 GMT\", \"type\": \"pos_time\" } ], \"fee\": 0, \"id\": \"a88f4ae2a89d5cbf9a76946785b6b45e898177cc0acd0b9c6ec5e35ccd73d9e8\", \"ins\": [ { \"amount\": 0, \"kimage_or_ms_id\": \"\", \"multisig_count\": 0 }, { \"amount\": 1000000000000, \"global_indexes\": [ 32159 ], \"kimage_or_ms_id\": \"5125de7598e723efba04d83258f31a3b30b21ed036f8e52b0669b12b93264267\", \"multisig_count\": 0 } ], \"keeper_block\": 0, \"object_in_json\": \"\", \"outs\": [ { \"amount\": 1000000000000, \"global_index\": 0, \"is_spent\": false, \"minimum_sigs\": 0, \"pub_keys\": [ \"6acb06f7e4916d38ecafb537065e4dedaf0949fd49787fad55256770eaa8b029\" ] }, { \"amount\": 1000000000000, \"global_index\": 0, \"is_spent\": false, \"minimum_sigs\": 0, \"pub_keys\": [ \"c5179786faf5fe9f0d2adfcf6c9b069aae0e1393b771efddef8efade4bb4ce73\" ] } ], \"pub_key\": \"7eaeb2490d85b17773b30ffe9f32fce50a1e89ee5ed258531e6b66ae13b00327\", \"timestamp\": 1558705296 } ], \"type\": 0 }, \"status\": \"OK\" } } Outputs: block_details \u2014 block_rpc_extended_info object; see get_blocks_details method for more details. Note Body Params id string required hash identifier for a block.","title":"23. get_alt_block_details"},{"location":"api/daemon-rpc-api/#24-get_alt_blocks_details","text":"GET http://127.0.0.1:52521/json_rpc/#024 Returns alternative blocks details for a specified range. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_alt_blocks_details\\\",\\\"params\\\":{\\\"offset\\\":0,\\\"count\\\":2}}}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"blocks\": [{ \"actual_timestamp\": 1537462404, \"already_generated_coins\": 0, \"base_reward\": 0, \"blob\": \"\", \"block_cumulative_size\": 0, .... },{ \"actual_timestamp\": 1537462619, \"already_generated_coins\": 0, \"base_reward\": 0, \"blob\": \"\", \"block_cumulative_size\": 0, .... }], \"status\": \"OK\" } } Outputs: blocks \u2014 array of block_rpc_extended_info objects; see get_blocks_details method for more details. Note Body Params offset int32 required starting offset in the global list of alternative blocks count int32 required number of blocks to be requested","title":"24. get_alt_blocks_details"},{"location":"api/daemon-rpc-api/#25-reset_transaction_pool","text":"POST http://127.0.0.1:52521/json_rpc/#025 Clears the transaction pool. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"reset_transaction_pool\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"OK\" } }","title":"25. reset_transaction_pool"},{"location":"api/daemon-rpc-api/#26-get_current_core_tx_expiration_median","text":"GET http://127.0.0.1:52521/json_rpc/#026 Returns the median for timestamps of the last 20 blocks. Displayed as returned median value plus 600 seconds, this is used to check the expiration time of parameters. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_current_core_tx_expiration_median\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:52521/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"expiration_median\": 1537465582, \"status\": \"OK\" } } Outputs: expiration_median \u2014 unsigned int; median value.","title":"26. get_current_core_tx_expiration_median"},{"location":"api/daemon-rpc-api/#27-marketplace_global_get_offers_ex","text":"GET http://127.0.0.1:52521/json_rpc/#027 This main marketplace API, which lets to read \"offers\" from EvoX blockchain. It has diverse filters, which let specify particular parameters of the request and help organize effective communication on production. Note Activate \"Offers service\" in daemon to use this API To make daemon work with this API make sure you started daemon with --enable_offers_service command line parameter This main marketplace API method, which lets to read \"offers\" created and managed by given wallet. It has diverse filters, which let specify particular parameters of the request and help organize effective communication on production. More detailed specification of the filter fields provided in \" Filter \" structure defintion. Result returned as an array of Offer objects, which is described in \" Offer \" structure. REQUEST curl --request GET \\ --url 'http://127.0.0.1:52521/json_rpc/#027' \\ --header 'Accept: application/json' RESPONSE Response OK application/json { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"offers\": [ { \"ap\": \"20\", \"at\": \"1\", \"b\": \"\", \"cat\": \"CLS:MAN:TSH\", \"cnt\": \"Skype: some_skype, discord: some_user#01012\", \"com\": \"Some nice comments about tshirt\", \"do\": \"Additional conditions\", \"et\": 10, \"fee\": 10000000000, \"index_in_tx\": 0, \"lci\": \"\", \"lco\": \"World Wide\", \"ot\": 1, \"p\": \"USD\", \"pt\": \"Credit cards, BTC, EVOX, ETH\", \"security\": \"0000000000000000000000000000000000000000000000000000000000000000\", \"t\": \"T-shirt with Evox logo, made by Crypjunkie\", \"timestamp\": 1570219600, \"tx_hash\": \"6ba12c5d2c66d31f770bfdc88ae9dc90d007b9b33f946fc7c1d9750f8655331c\", \"tx_original_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\" }, { \"ap\": \"20\", \"at\": \"1\", \"b\": \"\", \"cat\": \"CLS:MAN:TSH\", \"cnt\": \"Skype: some_skype, discord: some_user#01012\", \"com\": \"Some nice comments about tshirt\", \"do\": \"Additional conditions\", \"et\": 10, \"fee\": 10000000000, \"index_in_tx\": 0, \"lci\": \"\", \"lco\": \"World Wide\", \"ot\": 1, \"p\": \"USD\", \"pt\": \"Credit cards, BTC, EVOX, ETH\", \"security\": \"0000000000000000000000000000000000000000000000000000000000000000\", \"t\": \"T-shirt with Evox logo, made by Crypjunkie\", \"timestamp\": 1570219840, \"tx_hash\": \"2987b671cc337203628a3a1bb7ac811e41f110864d6162d3c2276d2c79f694d6\", \"tx_original_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\" } ], \"status\": \"\", \"total_offers\": 0 } } Response BAD application/json {}","title":"27. marketplace_global_get_offers_ex"},{"location":"api/marketplace-filter-structure-and-description/","text":"Offer's JSON structure and fields description \u00b6 Blockchain can keep hundreds of thousands of offers and fetching a particular set of offers need to have a filtering mechanism. EvoX daemon has a built-in effective search engine, which can represents marketplace offers in a few different orders, with wide filtering options provided in this structure. JSON \u00b6 od: { \"offset\": 0, \"limit\": 100, \"amount_low_limit\": 0, \"amount_up_limit\": 0, \"category\": \"\", \"keyword\": \"\", \"location_city\": \"\", \"location_country\": \"\", \"offer_type_mask\": 0, \"order_by\": 0, \"primary\": \"\", \"rate_low_limit\": \"0.000000\", \"rate_up_limit\": \"0.000000\", \"reverse\": false, \"target\": \"\", \"timestamp_start\": 0, \"timestamp_stop\": 0 } Fields description: \u00b6 order_by - chose in how to order offers in selection. At this moment supported following ordering: order_by value Order Type 0 Order by timestamp (most usable) 1 Order by an amount of EvoX 2 Order by the amount of specified currency 3 Order by rate, which calculated as the amount currency divided to amount EvoX 4 Order by payment type(as string) 5 Order by contact field(as string) 6 Order by location: country string concatenated with city string 7 Order by target string, basically title string reverse - Reverse order offset - Offset regarding first item which fit specified filter, count include only items which fit the filter. Userful for enumeration big amount or records, up to whole offers database enumeration. limit - Maximum records to return. amount_low_limit - filter offers selection by field amount of specified currency at lower boundary. amount_up_limit - filter offers selection by field amoun of specified currency t at higher boundary. category - fiter by category, work's as substring matching, i.e. if categories set to \"CLS:MAN:TSH\" and filters category fileds set to \"MAN\" then it fits category condition. keyword - This use search by keyword throught the all fields. location_city - Used to filter by city name or geo-tag location_country - Filters by country code. offer_type_mask - Specify type of the offer: Number Offer Type 0x00000001 Offer type 0 (buy currency for EvoX) 0x00000002 Offer type 1 (buy EvoX for currency) 0x00000004 Offer type 2 (buy goods for EvoX) 0x00000008 Offer type 3 (sell goods for EvoX) rate_low_limit - Filter by low limit of the rate between EvoX and currency amount currency divided to amount EvoX) rate_up_limit - Filter by up limit of the rate between EvoX and currency amount currency divided to amount EvoX) target - Basically a title for subject of the Offer - could be the name of the goods or currency which supposed to be traded. timestamp_start - Setup a lower timestamp boundary. Useful if the offers are selecting for given time range. timestamp_stop - Setup a higher timestamp boundary. Useful if the offers are selecting for given time range.","title":"MarketPlace filter structure and description"},{"location":"api/marketplace-filter-structure-and-description/#offers-json-structure-and-fields-description","text":"Blockchain can keep hundreds of thousands of offers and fetching a particular set of offers need to have a filtering mechanism. EvoX daemon has a built-in effective search engine, which can represents marketplace offers in a few different orders, with wide filtering options provided in this structure.","title":"Offer's JSON structure and fields description"},{"location":"api/marketplace-filter-structure-and-description/#json","text":"od: { \"offset\": 0, \"limit\": 100, \"amount_low_limit\": 0, \"amount_up_limit\": 0, \"category\": \"\", \"keyword\": \"\", \"location_city\": \"\", \"location_country\": \"\", \"offer_type_mask\": 0, \"order_by\": 0, \"primary\": \"\", \"rate_low_limit\": \"0.000000\", \"rate_up_limit\": \"0.000000\", \"reverse\": false, \"target\": \"\", \"timestamp_start\": 0, \"timestamp_stop\": 0 }","title":"JSON"},{"location":"api/marketplace-filter-structure-and-description/#fields-description","text":"order_by - chose in how to order offers in selection. At this moment supported following ordering: order_by value Order Type 0 Order by timestamp (most usable) 1 Order by an amount of EvoX 2 Order by the amount of specified currency 3 Order by rate, which calculated as the amount currency divided to amount EvoX 4 Order by payment type(as string) 5 Order by contact field(as string) 6 Order by location: country string concatenated with city string 7 Order by target string, basically title string reverse - Reverse order offset - Offset regarding first item which fit specified filter, count include only items which fit the filter. Userful for enumeration big amount or records, up to whole offers database enumeration. limit - Maximum records to return. amount_low_limit - filter offers selection by field amount of specified currency at lower boundary. amount_up_limit - filter offers selection by field amoun of specified currency t at higher boundary. category - fiter by category, work's as substring matching, i.e. if categories set to \"CLS:MAN:TSH\" and filters category fileds set to \"MAN\" then it fits category condition. keyword - This use search by keyword throught the all fields. location_city - Used to filter by city name or geo-tag location_country - Filters by country code. offer_type_mask - Specify type of the offer: Number Offer Type 0x00000001 Offer type 0 (buy currency for EvoX) 0x00000002 Offer type 1 (buy EvoX for currency) 0x00000004 Offer type 2 (buy goods for EvoX) 0x00000008 Offer type 3 (sell goods for EvoX) rate_low_limit - Filter by low limit of the rate between EvoX and currency amount currency divided to amount EvoX) rate_up_limit - Filter by up limit of the rate between EvoX and currency amount currency divided to amount EvoX) target - Basically a title for subject of the Offer - could be the name of the goods or currency which supposed to be traded. timestamp_start - Setup a lower timestamp boundary. Useful if the offers are selecting for given time range. timestamp_stop - Setup a higher timestamp boundary. Useful if the offers are selecting for given time range.","title":"Fields description:"},{"location":"api/marketplace-offer-structure-and-description/","text":"Offer's JSON structure and fields description \u00b6 Here is a typical offer, that can be pushed to the EvoX blockchain-based marketplace. The structure of the offer is quite flexible, it's defined in JSON text format with this very shorten names of the fields, and kept gzipped inside transaction attachment, to safe space. Offers not stay forever in blockchain, since it would be a waste of space, after transactions, which carry offers, will pass the checkpoints, it will be pruned, same way as signatures get pruned from tx. JSON \u00b6 od: { \"ap\": \"20\", \"at\": \"1\", \"cat\": \"CLS:MAN:TSH\", \"cnt\": \"Skype: some_skype, discord: some_user#01012\", \"com\": \"A comment about tshirt\", \"do\": \"Additional conditions\", \"et\": 10, \"fee\": 10000000000, \"lci\": \"\", \"lco\": \"World Wide\", \"ot\": 1, \"pt\": \"Credit cards, BTC, EVOX, ETH\", \"t\": \"T-shirt with Evox logo\" } Fields description: \u00b6 ot - Offer type 0 - buy currency for EvoX, 1 - buy EvoX for currency, 2 - buy goods for EvoX, 3 - sell goods for EvoX ap - the amount of the currency specified for use in this offer at - the amount of the items to be sold/bought cat - Category of the goods, could be specified with subcategories by separation CLS:MAN:TSH, which could mean Clothes->Man->Tshirts cnt - Contacts, like skype, discord, telegram, whatever com - Comments regarding this offer do - Additional conditions, if need to specify et - Expiration time, set in days, eg 5 - expire in 5 days after creation fee - Fee paid for this transaction with the offer, it can be default offer, but the higher fee may bring offers to be higher in search results lco - Location country, if this makes sense for an offer lci - Location city, if the also make sense for an offer, could be google geo-autocomplete id, like ChIJD7fiBh9u5kcRYJSMaMOCCwQ pt - Payment type, Credit cards, Crypto, Paypal, Flexa t - Description for the goods/service which is selling/seeking","title":"Marketplace offer structure and description"},{"location":"api/marketplace-offer-structure-and-description/#offers-json-structure-and-fields-description","text":"Here is a typical offer, that can be pushed to the EvoX blockchain-based marketplace. The structure of the offer is quite flexible, it's defined in JSON text format with this very shorten names of the fields, and kept gzipped inside transaction attachment, to safe space. Offers not stay forever in blockchain, since it would be a waste of space, after transactions, which carry offers, will pass the checkpoints, it will be pruned, same way as signatures get pruned from tx.","title":"Offer's JSON structure and fields description"},{"location":"api/marketplace-offer-structure-and-description/#json","text":"od: { \"ap\": \"20\", \"at\": \"1\", \"cat\": \"CLS:MAN:TSH\", \"cnt\": \"Skype: some_skype, discord: some_user#01012\", \"com\": \"A comment about tshirt\", \"do\": \"Additional conditions\", \"et\": 10, \"fee\": 10000000000, \"lci\": \"\", \"lco\": \"World Wide\", \"ot\": 1, \"pt\": \"Credit cards, BTC, EVOX, ETH\", \"t\": \"T-shirt with Evox logo\" }","title":"JSON"},{"location":"api/marketplace-offer-structure-and-description/#fields-description","text":"ot - Offer type 0 - buy currency for EvoX, 1 - buy EvoX for currency, 2 - buy goods for EvoX, 3 - sell goods for EvoX ap - the amount of the currency specified for use in this offer at - the amount of the items to be sold/bought cat - Category of the goods, could be specified with subcategories by separation CLS:MAN:TSH, which could mean Clothes->Man->Tshirts cnt - Contacts, like skype, discord, telegram, whatever com - Comments regarding this offer do - Additional conditions, if need to specify et - Expiration time, set in days, eg 5 - expire in 5 days after creation fee - Fee paid for this transaction with the offer, it can be default offer, but the higher fee may bring offers to be higher in search results lco - Location country, if this makes sense for an offer lci - Location city, if the also make sense for an offer, could be google geo-autocomplete id, like ChIJD7fiBh9u5kcRYJSMaMOCCwQ pt - Payment type, Credit cards, Crypto, Paypal, Flexa t - Description for the goods/service which is selling/seeking","title":"Fields description:"},{"location":"api/wallet-json-rpc-api/","text":"42. getbalance \u00b6 GET http://127.0.0.1:12233/json_rpc/#042 Retrieves current wallet balance: total and unlocked. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"getbalance\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"balance\": 4631800000, \"unlocked_balance\": 4431900000 } } Outputs: balance \u2014 unsigned integer; total fund, that the wallet has (unlocked and locked coins). unlocked_balance \u2014 unsigned integer; unlocked funds. i.e. coins that are stored deep enough in the blockchain to be considered relatively safe to spend. Only this many coins are immediately spendable. Unlocked_balance is always less or equal to balance. 43. getaddress \u00b6 GET http://127.0.0.1:12233/json_rpc/#043 Obtains wallet\u2019s public address. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"getaddress\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"address\": \"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\" } } Outputs: address \u2014 string; standard public address of the wallet. 44. transfer \u00b6 POST http://127.0.0.1:12233/json_rpc/#044 Creates a transaction and broadcasts it to the network. Note transfer_destination object fields: address \u2014 string; standard or integrated address of a recipient. amount \u2014 unsigned int; amount of coins to be sent; Warning Integrated address usage If you use multiple addresses in destinations field, make sure there are maximum 1 integrated address involved, or, if \"payment id\" parameter was specified, then integrated addresses are not allowed. REQUEST curl --data-binary '\"{\"jsonrpc\":\"2.0\",\"id\":0,\"method\":\"transfer\",\"params\":{\"destinations\":[ {\"address\":\"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\", \"amount\":10000000000}, {\"address\":\"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBq\", \"amount\":20000000000}], \"fee\":10000000000, \"mixin\":0}}' -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE Correct response 200 application/json { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"tx_hash\": \"b329cce92a23fdaf89a5ad907ca9c4c1fbd052b79ec8414438533c83b39afc2b\", \"tx_unsigned_hex\": \"\" } } Response 400 \"Not Enough Money\" text/plain { \"error\": { \"code\": -4, \"message\": \"NOT_ENOUGH_MONEY\" }, \"id\": 0, \"jsonrpc\": \"2.0\" } Response 400 \"Too Small Fee\" text/plain { \"error\": { \"code\": -4, \"message\": \"transaction was rejected by daemon\" }, \"id\": 0, \"jsonrpc\": \"2.0\" } Outputs: tx_hash \u2014 string; hash identifier of the transaction that was successfully sent. tx_unsigned_hex \u2014 string; hex-encoded unsigned transaction (for watch-only wallets; to be used in cold-signing process). Note Body Params destinations string required list of transfer_destination objects (see below); list of recipients with corresponding amount of coins for each. fee int32 required transaction fee in atomic units. Minimum: 10^10 atomic units. mixin int32 required number of foreign outputs to be mixed in with each input. Increases untraceability. Specify zero for direct and traceable transfers. payment_id string hex-encoded payment id. Can be empty if payment ID is not required for this transfer. comment string text commentary which follow the transaction in encrypted form and is visible only to the sender and the receiver 45. store \u00b6 POST http://127.0.0.1:12233/json_rpc/#045 Saves wallet update progress into a wallet file. Although progress is always saved upon graceful wallet application termination, with this call a user can manually trigger saving process. Otherwise, in a case of abnormal wallet application termination the progress won\u2019t be saved and it will take some time to synchronize on the next launch. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"store\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": {} } 46. get_payments \u00b6 GET http://127.0.0.1:12233/json_rpc/#046 Gets list of incoming transfers by a given payment ID. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_payments\\\",\\\"params\\\":{\\\"payment_id\\\":\\\"PAYMENT_ID\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"payments\": [ { \"amount\": 100000000, \"block_height\": 202556, \"tx_hash\": \"01220e8304d46b940a86e383d55ca5887b34f158a7365bbcdd17c5a305814a93\", \"unlock_time\": 0 } ] } } Outputs: result \u2014 list of payments object. payments object fields: amount \u2014 unsigned int; amount of coins in atomic units. block_height \u2014 unsigned int; height of the block containing corresponding transaction. tx_hash \u2014 string; transaction\u2019s hash. unlock_time \u2014 unsigned int; if nonzero \u2014 unix timestamp since then this transfer\u2019s coins can be spent. If it is less than 500000000, the value is treated as a minimum block height at which this transfer\u2019s coin can be spent. Note Body Params payment_id string required hex-encoded payment ID allow_locked_transactions boolean if set to false (default value) transactions with unlock_time value higher than current block height + 10 will not be included. If set to true parameter unlock_time will be ignored during validation. Using it can be potentially dangerous , since payments can be accepted but cannot be spent due to locked status. 47. get_bulk_payments \u00b6 GET http://127.0.0.1:12233/json_rpc/#047 Gets list of incoming transfers by given payment IDs. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_bulk_payments\\\",\\\"params\\\":{\\\"payment_ids\\\":[\\\"PAYMENT_ID_1\\\",\\\"PAYMENT_ID_2\\\"]}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"payments\": [ { \"amount\": 100000000000000, \"block_height\": 131944, \"payment_id\": \"PAYMENT_ID_1\", \"tx_hash\": \"176416cb542884e10f826627f87df6cf45a16039f913deb2e41f5f2d0647a96d\", \"unlock_time\": 0 } ] } } Outputs: payments \u2014 list of payment_details object (see get_payments for details). Note Body Params payment_ids array of strings required hex-encoded payment IDs. min_block_height int32 required minimum block height. allow_locked_transactions boolean if set to false (default value) transactions with unlock_time value higher than current block height + 10 will not be included. If set to true parameter unlock_time will be ignored during validation. Using it can be potentially dangerous , since payments can be accepted but cannot be spent due to locked status. search_for_transactions \u00b6 POST http://127.0.0.1:12233/json_rpc/ Gets list of incoming transfers by a given payment ID. REQUEST curl http://127.0.0.1:12233/json_rpc -s -H 'content-type:application/json;' --data-binary '{\"jsonrpc\":\"2.0\", \"id\":\"0\", \"method\":\"search_for_transactions\", \"params\":{ \"in\":true, \"out\":true, \"tx_id\":\"e46a101fede26cdf97e03003b35448a470f18fdf7325dc4f0f97a97441c50572\" }}' RESPONSE { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"in\": [ { \"amount\": 100000000000000, \"comment\": \"\", \"fee\": 10000000000, \"height\": 301864, \"is_income\": true, \"is_mining\": false, \"is_mixing\": false, \"is_service\": false, \"payment_id\": \"\", \"show_sender\": false, \"td\": { \"rcv\": [ 100000000000000 ] }, \"timestamp\": 1586263122, \"tx_blob_size\": 314, \"tx_hash\": \"e46a101fede26cdf97e03003b35448a470f18fdf7325dc4f0f97a97441c50572\", \"tx_type\": 0, \"unlock_time\": 0 } ] } } Outputs: in \u2014 list of wallet_transfer_info objects for incoming transactions; out \u2014 list of wallet_transfer_info objects for outgoing transactions; pool \u2014 list of wallet_transfer_info objects for unconfirmed transactions from tx pool; wallet_transfer_info object fields: amount \u2014 integer; amount of coins in atomic units; comment \u2014 string; an optional comment set by the sender; fee \u2014 integer; transaction fee in atomic units; height \u2014 integer; height of the block containing corresponding transaction; is_income \u2014 Boolean; true if this is incoming transfer; is_mining \u2014 Boolean; true if this is a miner (i.e. coinbase) tx; is_mixing \u2014 Boolean; true if this tx is using mixins; is_service \u2014 Boolean; true if this is a special service tx, not a normal one; payment_id \u2014 string; (optional) hex-encoded payment identifier; show_sender \u2014 Boolean; true if sender address info is present; remote_addresses \u2014 list of strings; (optional) sender address(es); recipients_aliases \u2014 list of strings; (optional) used aliases of the recipient; td \u2014 a wallet_transfer_info_details object; timestamp \u2014 integer; Unix timestamp when the tx was received; tx_hash \u2014 string; transaction\u2019s hash. unlock_time \u2014 unsigned int; if nonzero \u2014 unix timestamp since then this transfer\u2019s coins can be spent. If it is less than 500000000, the value is treated as a minimum block height at which this transfer\u2019s coin can be spent. wallet_transfer_info_details object fields: rcv \u2014 list of integers; received amounts in atomic units; spn \u2014 list of integers; spent amounts in atomic units; Note Body Params tx_id string hash of a transaction, if specified then only that tx will be returned (if it passes the filters) in boolean if true then incoming transactions will be taken into account out boolean if true then outgoing transactions will be taken into account pool boolean if true, unconfirmed transactions from the pool will be taken into account as well filter_by_height boolean if true, transactions will be filtered by block height using min_height and max_height in_height int32 minimum block height (including) max_height int32 maximum block height (including) 48. make_integrated_address \u00b6 POST http://127.0.0.1:12233/json_rpc/#048 Creates an integrated address for the wallet by embedding the given payment ID together with the wallet's public address. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"make_integrated_address\\\",\\\"params\\\":{\\\"payment_id\\\":\\\"00000000FF00ff00\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE Correct Payment ID response 200 application/json { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"integrated_address\": \"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\", \"payment_id\": \"00000000ff00ff00\" } } Empty Payment ID response 200 { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"integrated_address\": \"eXC4TEzP31KXoBgiyzprRQH1ZkBdshu61GeK7x38MAbbgp9PvXYw6Uphd5yK1XEtbzZaZMsjzTVEwRVXJjH6o6hm22U8CbESq\", \"payment_id\": \"c2c4aaeac1485777\" } } Invalid Payment ID response 400 { \"error\": { \"code\": -5, \"message\": \"invalid payment id given: ' !@&#*', hex-encoded string was expected\" }, \"id\": 0, \"jsonrpc\": \"2.0\" } Outputs: integrated_address \u2014 string; the result. payment_id \u2014 string; hex-encoded payment ID, that was used (useful if an empty payment_id was given as an input). Note Body Params payment_id string hex-encoded payment identifier. If empty, random 8-byte payment ID will be generated and used. 49. split_integrated_address \u00b6 POST http://127.0.0.1:12233/json_rpc/#049 Creates an integrated address for the wallet by embedding the given payment ID together with the wallet's public address. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"split_integrated_address\\\",\\\"params\\\":{\\\"integrated_address\\\":\\\"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE Valid Standard Address response 200 { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"payment_id\": \"\", \"standard_address\": \"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\" } } Valid Integrated Address response 200 { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"payment_id\": \"00000000ff00ff00\", \"standard_address\": \"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\" } } Invalid Integrated Address response 400 { \"error\": { \"code\": -2, \"message\": \"invalid integrated address given: '!k9s02j23n'\" }, \"id\": 0, \"jsonrpc\": \"2.0\" } Outputs: standard_address \u2014 string; standard address with no payment ID attached payment_id \u2014 string; hex-encoded payment ID, extracted from the given integrated address. Can be empty. Will be empty when a standard address is given as an input. Note Body Params integrated_address string required integrated or standard address 50. sign_transfer \u00b6 POST http://127.0.0.1:12233/json_rpc/#050 Signs a transaction prepared by watch-only wallet (for cold-signing process). Note This method requires spending private key and can't be served by watch-only wallets. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"sign_transfer\\\",\\\"params\\\":{\\\"tx_unsigned_hex\\\":\\\"00_LONG_HEX_00\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"tx_hash\": \"855ae466c59b24295152740e84d7f823eaf3c91adfb1ba7b4ff1dc6085b79e63\", \"tx_signed_hex\": \"00_LONG_HEX_00\" } } Outputs: tx_hash \u2014 string; hash identifier of signed transaction. tx_signed_hex \u2014 string; hex-encoded signed transaction. Note Body Params tx_unsigned_hex string required hex-encoded unsigned transaction as returned from transfer call. 51. submit_transfer \u00b6 POST http://127.0.0.1:12233/json_rpc/#051 Broadcasts transaction that was previously signed using sign_transfer call. Note This method is designed for using with watch-only wallets that are unable to sign transactions by themselves. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"submit_transfer\\\",\\\"params\\\":{\\\"tx_signed_hex\\\":\\\"00_LONG_HEX_00\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE Transaction Successfully Sent response 200 { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"tx_hash\": \"0554849abdb62f7d1902ddd14ce005722a340fc14fab4a375adc8749abf4e10b\" } } Transaction Was Rejected for some reason, response 400 { \"error\": { \"code\": -4, \"message\": \"transaction was rejected by daemon\" }, \"id\": 0, \"jsonrpc\": \"2.0\" } Outputs: tx_hash \u2014 string; transaction hash identifier. Note Body Params tx_signed_hex string required hex-encoded signed transaction as returned from sign_transfer call. 52. marketplace_push_offer \u00b6 GET http://127.0.0.1:12233/json_rpc/#052 Broadcasts transaction that was previously signed using sign_transfer call. This method creates a new offer on marketplace service. More details in Offer structure. REQUEST curl --request GET \\ --url 'http://127.0.0.1:12233/json_rpc/#052' \\ --header 'Accept: application/json' RESPONSE Transaction Send Successfully response 200 { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"tx_blob_size\": 549, \"tx_hash\": \"2987b671cc337203628a3a1bb7ac811e41f110864d6162d3c2276d2c79f694d6\" } } 53. marketplace_push_update_offer \u00b6 GET http://127.0.0.1:12233/json_rpc/#053 This method update marketplace offer details REQUEST curl --request GET \\ --url 'http://127.0.0.1:12233/json_rpc/#053' \\ --header 'Accept: application/json' RESPONSE Transaction Send Successfully response 200 { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"tx_blob_size\": 725, \"tx_hash\": \"06da9bac0f15fd7ab41983f9437f95835b1baef6810fe15b2ea831f60b058b4b\" } } This method updates an active offer, by providing proper proof that new details specified by the owner of the original offer posting. It has basically three parameters inside JSON body: tx_id - id of the transaction with original offer posting (returned in marketplace_push_offer ). Basically offers identified by carier transactions id. Theoretically, one transaction can carry more than one offer, so the there is a second parameter which specifies an index of the offer inside carrier transaction, but since we didn't want to make the user interface and whole system way too complicated for using, by default API place only one offer per transaction. no - this parameter is 0 by default, must be used if transaction carry more then on offer. od - this is new offer details, specified as Offer structure. 54. marketplace_cancel_offer \u00b6 GET http://127.0.0.1:12233/json_rpc/#054 Mark offer as NOT active. REQUEST curl --request GET \\ --url 'http://127.0.0.1:12233/json_rpc/#054' \\ --header 'Accept: application/json' RESPONSE Transaction Successfully Send response 200 { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"tx_blob_size\": 368, \"tx_hash\": \"d52014dae0b65168e0551acef9e95972041f3f38d92455d18c8b886baece3d90\" } } This method mark offer as innactive, by providing proper proof that action performed by the owner of the original offer posting. It has basically two parameters inside JSON body: tx_id - id of the transaction with original offer posting ( returned in marketplace_push_offer ). Basically offers identified by carrier transactions id. Theoretically, one transaction can carry more than one offer, so then there is a second parameter which specifies an index of the offer inside carrier transaction, but since we didn't want to make the user interface and whole system way too complicated for using, by default API place only one offer per transaction. no - this parameter is 0 by default, must be used if transaction carries more then on offer. 55. marketplace_get_offers_ex \u00b6 GET http://127.0.0.1:12233/json_rpc/#055 General marketplace API which lets read offers related to given wallet REQUEST curl --request GET \\ --url 'http://127.0.0.1:12233/json_rpc/#055' \\ --header 'Accept: application/json' RESPONSE Transaction Successfully Send response 200 { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"offers\": [ { \"ap\": \"20\", \"at\": \"1\", \"b\": \"\", \"cat\": \"CLS:MAN:TSH\", \"cnt\": \"Skype: some_skype, discord: some_user#01012\", \"com\": \"Some nice comments about tshirt\", \"do\": \"Additional conditions\", \"et\": 10, \"fee\": 10000000000, \"index_in_tx\": 0, \"lci\": \"\", \"lco\": \"World Wide\", \"ot\": 1, \"p\": \"USD\", \"pt\": \"Credit cards, BTC, EVOX, ETH\", \"security\": \"0000000000000000000000000000000000000000000000000000000000000000\", \"t\": \"T-shirt with EvoX logo, made by Crypjunkie\", \"timestamp\": 1570219600, \"tx_hash\": \"6ba12c5d2c66d31f770bfdc88ae9dc90d007b9b33f946fc7c1d9750f8655331c\", \"tx_original_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\" }, { \"ap\": \"20\", \"at\": \"1\", \"b\": \"\", \"cat\": \"CLS:MAN:TSH\", \"cnt\": \"Skype: some_skype, discord: some_user#01012\", \"com\": \"Some nice comments about tshirt\", \"do\": \"Additional conditions\", \"et\": 10, \"fee\": 10000000000, \"index_in_tx\": 0, \"lci\": \"\", \"lco\": \"World Wide\", \"ot\": 1, \"p\": \"USD\", \"pt\": \"Credit cards, BTC, EVOX, ETH\", \"security\": \"0000000000000000000000000000000000000000000000000000000000000000\", \"t\": \"T-shirt with EvoX logo, made by Crypjunkie\", \"timestamp\": 1570219840, \"tx_hash\": \"2987b671cc337203628a3a1bb7ac811e41f110864d6162d3c2276d2c79f694d6\", \"tx_original_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\" } ], \"status\": \"\", \"total_offers\": 0 } } This main marketplace API method, which lets to read \"offers\" created and managed by given wallet. It has diverse filters, which let specify particular parameters of the request and help organize effective communication on production. More detailed specification of the filter fields provided in Filter structure defintion. Result returned as an array of Offer objects, which described in Offer structure. 72. get_recent_txs_and_info \u00b6 GET http://127.0.0.1:12233/json_rpc/#072 Api for fetching recent transactions history. To keep history reading consistent, better to set offset parameter from last processed tx's transfer_internal_index . Below is typical request body: { \"jsonrpc\": \"2.0\", \"id\": 0, \"method\": \"get_recent_txs_and_info\", \"params\": { \"offset\": 0, \"update_provision_info\": true, \"exclude_mining_txs\": true, \"count\": 100, \"order\": \"FROM_BEGIN_TO_END\", \"exclude_unconfirmed\": true } } Request params description: offset : - internal wallet's index of transfer (every transfer has transfer_internal_index field, which simply index of transfer). update_provision_info : - true if need to update balance (could be disable for performance matters) exclude_mining_txs : - filter mining transactions count : - number transactions to fetch order : - Enumeration direction, could be FROM_BEGIN_TO_END , FROM_END_TO_BEGIN exclude_unconfirmed : - true if unconfirmed transactions not needed REQUEST curl --request GET \\ --url 'http://127.0.0.1:12233/json_rpc/#072' \\ --header 'Accept: application/json' RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"last_item_index\": 72, \"pi\": { \"balance\": 2260000000000, \"curent_height\": 1623835, \"transfer_entries_count\": 96, \"transfers_count\": 3, \"unlocked_balance\": 2260000000000 }, \"total_transfers\": 3, \"transfers\": [ { \"amount\": 1000000000000, \"comment\": \"\", \"fee\": 10000000000, \"height\": 1131972, \"is_income\": true, \"is_mining\": false, \"is_mixing\": false, \"is_service\": false, \"payment_id\": \"\", \"remote_addresses\": [ \"eXCD4JQoUw6MD343aKyJx2Zx44fdkc2r22rwULfcBDrAKyfcqYPNjiFKfnXVyRcHgMLdJLrhmmvN4ViRBDfanhLZ1EdqY8vbk\" ], \"show_sender\": false, \"td\": { \"rcv\": [ 1000000000000 ] }, \"timestamp\": 1625569494, \"transfer_internal_index\": 0, \"tx_blob_size\": 1225, \"tx_hash\": \"b4f6335a3d476629448aad0cbb5a56cbd36ea60d00dcfdb79b501d3f2d4abede\", \"tx_type\": 0, \"unlock_time\": 0 }, { \"amount\": 1000000000000, \"comment\": \"\", \"fee\": 10000000000, \"height\": 1131972, \"is_income\": true, \"is_mining\": false, \"is_mixing\": false, \"is_service\": false, \"payment_id\": \"\", \"remote_addresses\": [ \"eXCD4JQoUw6MD343aKyJx2Zx44fdkc2r22rwULfcBDrAKyfcqYPNjiFKfnXVyRcHgMLdJLrhmmvN4ViRBDfanhLZ1EdqY8vbk\" ], \"show_sender\": false, \"td\": { \"rcv\": [ 1000000000000 ] }, \"timestamp\": 1625569494, \"transfer_internal_index\": 1, \"tx_blob_size\": 1226, \"tx_hash\": \"0a7551887a82f893aedfe72aa32189a84743d0044d47b05a5000a2a08ce791a3\", \"tx_type\": 0, \"unlock_time\": 0 }, { \"amount\": 0, \"comment\": \"\", \"fee\": 10000000000, \"height\": 1555055, \"is_income\": false, \"is_mining\": false, \"is_mixing\": false, \"is_service\": true, \"payment_id\": \"\", \"recipients_aliases\": [ \"testtest\" ], \"remote_addresses\": [ \"eXDEMMwyGBE1JE1b5pYH4vExnTeFfN3gMeiC1wb7n5dVC43oLHAJXkq5pmiZqRMegTi4LzepmddWWAiUZBc44HJL2iStSuRPV\" ], \"show_sender\": false, \"td\": { \"spn\": [ 10000000000 ] }, \"timestamp\": 1651003337, \"transfer_internal_index\": 2, \"tx_blob_size\": 324, \"tx_hash\": \"78695ec5cd55bc507955c53dcca11a08d13d91498d5edfd2b61415783f23c133\", \"tx_type\": 5, \"unlock_time\": 0 } ] } } It is recommended to validate each transfer height against curent_height in response, to make sure that transfer got needed number of confirmations. Each next call of the get_recent_txs_and_info should be done with offset , taken from last transfer returned from previous call of get_recent_txs_and_info , with such call first returned transaction should be the same as it was in previous call, and to make sure that there were no split or chain swithch, the best practice would be to double check that id of the first returned TX from latest call match with ID of the last transactions from previous call. Pseudocode for work with this API might look like this: C++ #define NATIVE_CONFIRMATIONS_NEEDED 40 int index_in_wallet = 0; last_tx_hash = nullhash; while(true) { req = {}; req.offset = index_in_wallet; req.update_provision_info = true; req.exclude_mining_txs = true; req.count = BUNCH_OF_TRANSACTIONS_TO_FETCH; req.order = ORDER_FROM_BEGIN_TO_END; req.exclude_unconfirmed = true; get_transactions_history(req, resp); //check that last tx match if (resp.transfers.size() && last_tx_hash != nullhash && resp.transfers[0].tx_hash != last_tx_hash) { //log problems return false; } //regular synchronization for (int i = 0; i < resp.transfers.size(); i++) { if (resp.pi.curent_height - resp.transfers[i].height < NATIVE_CONFIRMATIONS_NEEDED) { //don't even read blocks with smaller confirmation ration than expected break; } if (resp.transfers[i].is_income) { if(resp.transfers[i].payment_id) { db.increase_user_balance(payment_id, resp.transfers[i].amount); } } last_tx_hash = resp.transfers[0].tx_hash; index_in_wallet = resp.transfers[i].transfer_internal_index; } sleep(10000); //sleep for 10 seconds } BAD Response 400 {}","title":"Wallet JSON RPC API"},{"location":"api/wallet-json-rpc-api/#42-getbalance","text":"GET http://127.0.0.1:12233/json_rpc/#042 Retrieves current wallet balance: total and unlocked. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"getbalance\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"balance\": 4631800000, \"unlocked_balance\": 4431900000 } } Outputs: balance \u2014 unsigned integer; total fund, that the wallet has (unlocked and locked coins). unlocked_balance \u2014 unsigned integer; unlocked funds. i.e. coins that are stored deep enough in the blockchain to be considered relatively safe to spend. Only this many coins are immediately spendable. Unlocked_balance is always less or equal to balance.","title":"42. getbalance"},{"location":"api/wallet-json-rpc-api/#43-getaddress","text":"GET http://127.0.0.1:12233/json_rpc/#043 Obtains wallet\u2019s public address. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"getaddress\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"address\": \"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\" } } Outputs: address \u2014 string; standard public address of the wallet.","title":"43. getaddress"},{"location":"api/wallet-json-rpc-api/#44-transfer","text":"POST http://127.0.0.1:12233/json_rpc/#044 Creates a transaction and broadcasts it to the network. Note transfer_destination object fields: address \u2014 string; standard or integrated address of a recipient. amount \u2014 unsigned int; amount of coins to be sent; Warning Integrated address usage If you use multiple addresses in destinations field, make sure there are maximum 1 integrated address involved, or, if \"payment id\" parameter was specified, then integrated addresses are not allowed. REQUEST curl --data-binary '\"{\"jsonrpc\":\"2.0\",\"id\":0,\"method\":\"transfer\",\"params\":{\"destinations\":[ {\"address\":\"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\", \"amount\":10000000000}, {\"address\":\"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBq\", \"amount\":20000000000}], \"fee\":10000000000, \"mixin\":0}}' -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE Correct response 200 application/json { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"tx_hash\": \"b329cce92a23fdaf89a5ad907ca9c4c1fbd052b79ec8414438533c83b39afc2b\", \"tx_unsigned_hex\": \"\" } } Response 400 \"Not Enough Money\" text/plain { \"error\": { \"code\": -4, \"message\": \"NOT_ENOUGH_MONEY\" }, \"id\": 0, \"jsonrpc\": \"2.0\" } Response 400 \"Too Small Fee\" text/plain { \"error\": { \"code\": -4, \"message\": \"transaction was rejected by daemon\" }, \"id\": 0, \"jsonrpc\": \"2.0\" } Outputs: tx_hash \u2014 string; hash identifier of the transaction that was successfully sent. tx_unsigned_hex \u2014 string; hex-encoded unsigned transaction (for watch-only wallets; to be used in cold-signing process). Note Body Params destinations string required list of transfer_destination objects (see below); list of recipients with corresponding amount of coins for each. fee int32 required transaction fee in atomic units. Minimum: 10^10 atomic units. mixin int32 required number of foreign outputs to be mixed in with each input. Increases untraceability. Specify zero for direct and traceable transfers. payment_id string hex-encoded payment id. Can be empty if payment ID is not required for this transfer. comment string text commentary which follow the transaction in encrypted form and is visible only to the sender and the receiver","title":"44. transfer"},{"location":"api/wallet-json-rpc-api/#45-store","text":"POST http://127.0.0.1:12233/json_rpc/#045 Saves wallet update progress into a wallet file. Although progress is always saved upon graceful wallet application termination, with this call a user can manually trigger saving process. Otherwise, in a case of abnormal wallet application termination the progress won\u2019t be saved and it will take some time to synchronize on the next launch. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"store\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": {} }","title":"45. store"},{"location":"api/wallet-json-rpc-api/#46-get_payments","text":"GET http://127.0.0.1:12233/json_rpc/#046 Gets list of incoming transfers by a given payment ID. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_payments\\\",\\\"params\\\":{\\\"payment_id\\\":\\\"PAYMENT_ID\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"payments\": [ { \"amount\": 100000000, \"block_height\": 202556, \"tx_hash\": \"01220e8304d46b940a86e383d55ca5887b34f158a7365bbcdd17c5a305814a93\", \"unlock_time\": 0 } ] } } Outputs: result \u2014 list of payments object. payments object fields: amount \u2014 unsigned int; amount of coins in atomic units. block_height \u2014 unsigned int; height of the block containing corresponding transaction. tx_hash \u2014 string; transaction\u2019s hash. unlock_time \u2014 unsigned int; if nonzero \u2014 unix timestamp since then this transfer\u2019s coins can be spent. If it is less than 500000000, the value is treated as a minimum block height at which this transfer\u2019s coin can be spent. Note Body Params payment_id string required hex-encoded payment ID allow_locked_transactions boolean if set to false (default value) transactions with unlock_time value higher than current block height + 10 will not be included. If set to true parameter unlock_time will be ignored during validation. Using it can be potentially dangerous , since payments can be accepted but cannot be spent due to locked status.","title":"46. get_payments"},{"location":"api/wallet-json-rpc-api/#47-get_bulk_payments","text":"GET http://127.0.0.1:12233/json_rpc/#047 Gets list of incoming transfers by given payment IDs. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"get_bulk_payments\\\",\\\"params\\\":{\\\"payment_ids\\\":[\\\"PAYMENT_ID_1\\\",\\\"PAYMENT_ID_2\\\"]}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"payments\": [ { \"amount\": 100000000000000, \"block_height\": 131944, \"payment_id\": \"PAYMENT_ID_1\", \"tx_hash\": \"176416cb542884e10f826627f87df6cf45a16039f913deb2e41f5f2d0647a96d\", \"unlock_time\": 0 } ] } } Outputs: payments \u2014 list of payment_details object (see get_payments for details). Note Body Params payment_ids array of strings required hex-encoded payment IDs. min_block_height int32 required minimum block height. allow_locked_transactions boolean if set to false (default value) transactions with unlock_time value higher than current block height + 10 will not be included. If set to true parameter unlock_time will be ignored during validation. Using it can be potentially dangerous , since payments can be accepted but cannot be spent due to locked status.","title":"47. get_bulk_payments"},{"location":"api/wallet-json-rpc-api/#search_for_transactions","text":"POST http://127.0.0.1:12233/json_rpc/ Gets list of incoming transfers by a given payment ID. REQUEST curl http://127.0.0.1:12233/json_rpc -s -H 'content-type:application/json;' --data-binary '{\"jsonrpc\":\"2.0\", \"id\":\"0\", \"method\":\"search_for_transactions\", \"params\":{ \"in\":true, \"out\":true, \"tx_id\":\"e46a101fede26cdf97e03003b35448a470f18fdf7325dc4f0f97a97441c50572\" }}' RESPONSE { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"in\": [ { \"amount\": 100000000000000, \"comment\": \"\", \"fee\": 10000000000, \"height\": 301864, \"is_income\": true, \"is_mining\": false, \"is_mixing\": false, \"is_service\": false, \"payment_id\": \"\", \"show_sender\": false, \"td\": { \"rcv\": [ 100000000000000 ] }, \"timestamp\": 1586263122, \"tx_blob_size\": 314, \"tx_hash\": \"e46a101fede26cdf97e03003b35448a470f18fdf7325dc4f0f97a97441c50572\", \"tx_type\": 0, \"unlock_time\": 0 } ] } } Outputs: in \u2014 list of wallet_transfer_info objects for incoming transactions; out \u2014 list of wallet_transfer_info objects for outgoing transactions; pool \u2014 list of wallet_transfer_info objects for unconfirmed transactions from tx pool; wallet_transfer_info object fields: amount \u2014 integer; amount of coins in atomic units; comment \u2014 string; an optional comment set by the sender; fee \u2014 integer; transaction fee in atomic units; height \u2014 integer; height of the block containing corresponding transaction; is_income \u2014 Boolean; true if this is incoming transfer; is_mining \u2014 Boolean; true if this is a miner (i.e. coinbase) tx; is_mixing \u2014 Boolean; true if this tx is using mixins; is_service \u2014 Boolean; true if this is a special service tx, not a normal one; payment_id \u2014 string; (optional) hex-encoded payment identifier; show_sender \u2014 Boolean; true if sender address info is present; remote_addresses \u2014 list of strings; (optional) sender address(es); recipients_aliases \u2014 list of strings; (optional) used aliases of the recipient; td \u2014 a wallet_transfer_info_details object; timestamp \u2014 integer; Unix timestamp when the tx was received; tx_hash \u2014 string; transaction\u2019s hash. unlock_time \u2014 unsigned int; if nonzero \u2014 unix timestamp since then this transfer\u2019s coins can be spent. If it is less than 500000000, the value is treated as a minimum block height at which this transfer\u2019s coin can be spent. wallet_transfer_info_details object fields: rcv \u2014 list of integers; received amounts in atomic units; spn \u2014 list of integers; spent amounts in atomic units; Note Body Params tx_id string hash of a transaction, if specified then only that tx will be returned (if it passes the filters) in boolean if true then incoming transactions will be taken into account out boolean if true then outgoing transactions will be taken into account pool boolean if true, unconfirmed transactions from the pool will be taken into account as well filter_by_height boolean if true, transactions will be filtered by block height using min_height and max_height in_height int32 minimum block height (including) max_height int32 maximum block height (including)","title":"search_for_transactions"},{"location":"api/wallet-json-rpc-api/#48-make_integrated_address","text":"POST http://127.0.0.1:12233/json_rpc/#048 Creates an integrated address for the wallet by embedding the given payment ID together with the wallet's public address. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"make_integrated_address\\\",\\\"params\\\":{\\\"payment_id\\\":\\\"00000000FF00ff00\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE Correct Payment ID response 200 application/json { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"integrated_address\": \"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\", \"payment_id\": \"00000000ff00ff00\" } } Empty Payment ID response 200 { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"integrated_address\": \"eXC4TEzP31KXoBgiyzprRQH1ZkBdshu61GeK7x38MAbbgp9PvXYw6Uphd5yK1XEtbzZaZMsjzTVEwRVXJjH6o6hm22U8CbESq\", \"payment_id\": \"c2c4aaeac1485777\" } } Invalid Payment ID response 400 { \"error\": { \"code\": -5, \"message\": \"invalid payment id given: ' !@&#*', hex-encoded string was expected\" }, \"id\": 0, \"jsonrpc\": \"2.0\" } Outputs: integrated_address \u2014 string; the result. payment_id \u2014 string; hex-encoded payment ID, that was used (useful if an empty payment_id was given as an input). Note Body Params payment_id string hex-encoded payment identifier. If empty, random 8-byte payment ID will be generated and used.","title":"48. make_integrated_address"},{"location":"api/wallet-json-rpc-api/#49-split_integrated_address","text":"POST http://127.0.0.1:12233/json_rpc/#049 Creates an integrated address for the wallet by embedding the given payment ID together with the wallet's public address. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"split_integrated_address\\\",\\\"params\\\":{\\\"integrated_address\\\":\\\"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\\\"}}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE Valid Standard Address response 200 { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"payment_id\": \"\", \"standard_address\": \"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\" } } Valid Integrated Address response 200 { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"payment_id\": \"00000000ff00ff00\", \"standard_address\": \"eXBvJDuQjMG9R2j4WnYUhBYNrwZPwuyXrC7FHdVmWqaESgowDvgfWtiXeNGu8Px9B24pkmjsA39fzSSiEQG1ekB225ZnrMTBp\" } } Invalid Integrated Address response 400 { \"error\": { \"code\": -2, \"message\": \"invalid integrated address given: '!k9s02j23n'\" }, \"id\": 0, \"jsonrpc\": \"2.0\" } Outputs: standard_address \u2014 string; standard address with no payment ID attached payment_id \u2014 string; hex-encoded payment ID, extracted from the given integrated address. Can be empty. Will be empty when a standard address is given as an input. Note Body Params integrated_address string required integrated or standard address","title":"49. split_integrated_address"},{"location":"api/wallet-json-rpc-api/#50-sign_transfer","text":"POST http://127.0.0.1:12233/json_rpc/#050 Signs a transaction prepared by watch-only wallet (for cold-signing process). Note This method requires spending private key and can't be served by watch-only wallets. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"sign_transfer\\\",\\\"params\\\":{\\\"tx_unsigned_hex\\\":\\\"00_LONG_HEX_00\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"tx_hash\": \"855ae466c59b24295152740e84d7f823eaf3c91adfb1ba7b4ff1dc6085b79e63\", \"tx_signed_hex\": \"00_LONG_HEX_00\" } } Outputs: tx_hash \u2014 string; hash identifier of signed transaction. tx_signed_hex \u2014 string; hex-encoded signed transaction. Note Body Params tx_unsigned_hex string required hex-encoded unsigned transaction as returned from transfer call.","title":"50. sign_transfer"},{"location":"api/wallet-json-rpc-api/#51-submit_transfer","text":"POST http://127.0.0.1:12233/json_rpc/#051 Broadcasts transaction that was previously signed using sign_transfer call. Note This method is designed for using with watch-only wallets that are unable to sign transactions by themselves. REQUEST curl --data \"{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"id\\\":0,\\\"method\\\":\\\"submit_transfer\\\",\\\"params\\\":{\\\"tx_signed_hex\\\":\\\"00_LONG_HEX_00\\\"}\" -H \"content-type:application/json;\" http://127.0.0.1:12233/json_rpc RESPONSE Transaction Successfully Sent response 200 { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"tx_hash\": \"0554849abdb62f7d1902ddd14ce005722a340fc14fab4a375adc8749abf4e10b\" } } Transaction Was Rejected for some reason, response 400 { \"error\": { \"code\": -4, \"message\": \"transaction was rejected by daemon\" }, \"id\": 0, \"jsonrpc\": \"2.0\" } Outputs: tx_hash \u2014 string; transaction hash identifier. Note Body Params tx_signed_hex string required hex-encoded signed transaction as returned from sign_transfer call.","title":"51. submit_transfer"},{"location":"api/wallet-json-rpc-api/#52-marketplace_push_offer","text":"GET http://127.0.0.1:12233/json_rpc/#052 Broadcasts transaction that was previously signed using sign_transfer call. This method creates a new offer on marketplace service. More details in Offer structure. REQUEST curl --request GET \\ --url 'http://127.0.0.1:12233/json_rpc/#052' \\ --header 'Accept: application/json' RESPONSE Transaction Send Successfully response 200 { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"tx_blob_size\": 549, \"tx_hash\": \"2987b671cc337203628a3a1bb7ac811e41f110864d6162d3c2276d2c79f694d6\" } }","title":"52. marketplace_push_offer"},{"location":"api/wallet-json-rpc-api/#53-marketplace_push_update_offer","text":"GET http://127.0.0.1:12233/json_rpc/#053 This method update marketplace offer details REQUEST curl --request GET \\ --url 'http://127.0.0.1:12233/json_rpc/#053' \\ --header 'Accept: application/json' RESPONSE Transaction Send Successfully response 200 { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"tx_blob_size\": 725, \"tx_hash\": \"06da9bac0f15fd7ab41983f9437f95835b1baef6810fe15b2ea831f60b058b4b\" } } This method updates an active offer, by providing proper proof that new details specified by the owner of the original offer posting. It has basically three parameters inside JSON body: tx_id - id of the transaction with original offer posting (returned in marketplace_push_offer ). Basically offers identified by carier transactions id. Theoretically, one transaction can carry more than one offer, so the there is a second parameter which specifies an index of the offer inside carrier transaction, but since we didn't want to make the user interface and whole system way too complicated for using, by default API place only one offer per transaction. no - this parameter is 0 by default, must be used if transaction carry more then on offer. od - this is new offer details, specified as Offer structure.","title":"53. marketplace_push_update_offer"},{"location":"api/wallet-json-rpc-api/#54-marketplace_cancel_offer","text":"GET http://127.0.0.1:12233/json_rpc/#054 Mark offer as NOT active. REQUEST curl --request GET \\ --url 'http://127.0.0.1:12233/json_rpc/#054' \\ --header 'Accept: application/json' RESPONSE Transaction Successfully Send response 200 { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"tx_blob_size\": 368, \"tx_hash\": \"d52014dae0b65168e0551acef9e95972041f3f38d92455d18c8b886baece3d90\" } } This method mark offer as innactive, by providing proper proof that action performed by the owner of the original offer posting. It has basically two parameters inside JSON body: tx_id - id of the transaction with original offer posting ( returned in marketplace_push_offer ). Basically offers identified by carrier transactions id. Theoretically, one transaction can carry more than one offer, so then there is a second parameter which specifies an index of the offer inside carrier transaction, but since we didn't want to make the user interface and whole system way too complicated for using, by default API place only one offer per transaction. no - this parameter is 0 by default, must be used if transaction carries more then on offer.","title":"54. marketplace_cancel_offer"},{"location":"api/wallet-json-rpc-api/#55-marketplace_get_offers_ex","text":"GET http://127.0.0.1:12233/json_rpc/#055 General marketplace API which lets read offers related to given wallet REQUEST curl --request GET \\ --url 'http://127.0.0.1:12233/json_rpc/#055' \\ --header 'Accept: application/json' RESPONSE Transaction Successfully Send response 200 { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"offers\": [ { \"ap\": \"20\", \"at\": \"1\", \"b\": \"\", \"cat\": \"CLS:MAN:TSH\", \"cnt\": \"Skype: some_skype, discord: some_user#01012\", \"com\": \"Some nice comments about tshirt\", \"do\": \"Additional conditions\", \"et\": 10, \"fee\": 10000000000, \"index_in_tx\": 0, \"lci\": \"\", \"lco\": \"World Wide\", \"ot\": 1, \"p\": \"USD\", \"pt\": \"Credit cards, BTC, EVOX, ETH\", \"security\": \"0000000000000000000000000000000000000000000000000000000000000000\", \"t\": \"T-shirt with EvoX logo, made by Crypjunkie\", \"timestamp\": 1570219600, \"tx_hash\": \"6ba12c5d2c66d31f770bfdc88ae9dc90d007b9b33f946fc7c1d9750f8655331c\", \"tx_original_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\" }, { \"ap\": \"20\", \"at\": \"1\", \"b\": \"\", \"cat\": \"CLS:MAN:TSH\", \"cnt\": \"Skype: some_skype, discord: some_user#01012\", \"com\": \"Some nice comments about tshirt\", \"do\": \"Additional conditions\", \"et\": 10, \"fee\": 10000000000, \"index_in_tx\": 0, \"lci\": \"\", \"lco\": \"World Wide\", \"ot\": 1, \"p\": \"USD\", \"pt\": \"Credit cards, BTC, EVOX, ETH\", \"security\": \"0000000000000000000000000000000000000000000000000000000000000000\", \"t\": \"T-shirt with EvoX logo, made by Crypjunkie\", \"timestamp\": 1570219840, \"tx_hash\": \"2987b671cc337203628a3a1bb7ac811e41f110864d6162d3c2276d2c79f694d6\", \"tx_original_hash\": \"0000000000000000000000000000000000000000000000000000000000000000\" } ], \"status\": \"\", \"total_offers\": 0 } } This main marketplace API method, which lets to read \"offers\" created and managed by given wallet. It has diverse filters, which let specify particular parameters of the request and help organize effective communication on production. More detailed specification of the filter fields provided in Filter structure defintion. Result returned as an array of Offer objects, which described in Offer structure.","title":"55. marketplace_get_offers_ex"},{"location":"api/wallet-json-rpc-api/#72-get_recent_txs_and_info","text":"GET http://127.0.0.1:12233/json_rpc/#072 Api for fetching recent transactions history. To keep history reading consistent, better to set offset parameter from last processed tx's transfer_internal_index . Below is typical request body: { \"jsonrpc\": \"2.0\", \"id\": 0, \"method\": \"get_recent_txs_and_info\", \"params\": { \"offset\": 0, \"update_provision_info\": true, \"exclude_mining_txs\": true, \"count\": 100, \"order\": \"FROM_BEGIN_TO_END\", \"exclude_unconfirmed\": true } } Request params description: offset : - internal wallet's index of transfer (every transfer has transfer_internal_index field, which simply index of transfer). update_provision_info : - true if need to update balance (could be disable for performance matters) exclude_mining_txs : - filter mining transactions count : - number transactions to fetch order : - Enumeration direction, could be FROM_BEGIN_TO_END , FROM_END_TO_BEGIN exclude_unconfirmed : - true if unconfirmed transactions not needed REQUEST curl --request GET \\ --url 'http://127.0.0.1:12233/json_rpc/#072' \\ --header 'Accept: application/json' RESPONSE { \"id\": 0, \"jsonrpc\": \"2.0\", \"result\": { \"last_item_index\": 72, \"pi\": { \"balance\": 2260000000000, \"curent_height\": 1623835, \"transfer_entries_count\": 96, \"transfers_count\": 3, \"unlocked_balance\": 2260000000000 }, \"total_transfers\": 3, \"transfers\": [ { \"amount\": 1000000000000, \"comment\": \"\", \"fee\": 10000000000, \"height\": 1131972, \"is_income\": true, \"is_mining\": false, \"is_mixing\": false, \"is_service\": false, \"payment_id\": \"\", \"remote_addresses\": [ \"eXCD4JQoUw6MD343aKyJx2Zx44fdkc2r22rwULfcBDrAKyfcqYPNjiFKfnXVyRcHgMLdJLrhmmvN4ViRBDfanhLZ1EdqY8vbk\" ], \"show_sender\": false, \"td\": { \"rcv\": [ 1000000000000 ] }, \"timestamp\": 1625569494, \"transfer_internal_index\": 0, \"tx_blob_size\": 1225, \"tx_hash\": \"b4f6335a3d476629448aad0cbb5a56cbd36ea60d00dcfdb79b501d3f2d4abede\", \"tx_type\": 0, \"unlock_time\": 0 }, { \"amount\": 1000000000000, \"comment\": \"\", \"fee\": 10000000000, \"height\": 1131972, \"is_income\": true, \"is_mining\": false, \"is_mixing\": false, \"is_service\": false, \"payment_id\": \"\", \"remote_addresses\": [ \"eXCD4JQoUw6MD343aKyJx2Zx44fdkc2r22rwULfcBDrAKyfcqYPNjiFKfnXVyRcHgMLdJLrhmmvN4ViRBDfanhLZ1EdqY8vbk\" ], \"show_sender\": false, \"td\": { \"rcv\": [ 1000000000000 ] }, \"timestamp\": 1625569494, \"transfer_internal_index\": 1, \"tx_blob_size\": 1226, \"tx_hash\": \"0a7551887a82f893aedfe72aa32189a84743d0044d47b05a5000a2a08ce791a3\", \"tx_type\": 0, \"unlock_time\": 0 }, { \"amount\": 0, \"comment\": \"\", \"fee\": 10000000000, \"height\": 1555055, \"is_income\": false, \"is_mining\": false, \"is_mixing\": false, \"is_service\": true, \"payment_id\": \"\", \"recipients_aliases\": [ \"testtest\" ], \"remote_addresses\": [ \"eXDEMMwyGBE1JE1b5pYH4vExnTeFfN3gMeiC1wb7n5dVC43oLHAJXkq5pmiZqRMegTi4LzepmddWWAiUZBc44HJL2iStSuRPV\" ], \"show_sender\": false, \"td\": { \"spn\": [ 10000000000 ] }, \"timestamp\": 1651003337, \"transfer_internal_index\": 2, \"tx_blob_size\": 324, \"tx_hash\": \"78695ec5cd55bc507955c53dcca11a08d13d91498d5edfd2b61415783f23c133\", \"tx_type\": 5, \"unlock_time\": 0 } ] } } It is recommended to validate each transfer height against curent_height in response, to make sure that transfer got needed number of confirmations. Each next call of the get_recent_txs_and_info should be done with offset , taken from last transfer returned from previous call of get_recent_txs_and_info , with such call first returned transaction should be the same as it was in previous call, and to make sure that there were no split or chain swithch, the best practice would be to double check that id of the first returned TX from latest call match with ID of the last transactions from previous call. Pseudocode for work with this API might look like this: C++ #define NATIVE_CONFIRMATIONS_NEEDED 40 int index_in_wallet = 0; last_tx_hash = nullhash; while(true) { req = {}; req.offset = index_in_wallet; req.update_provision_info = true; req.exclude_mining_txs = true; req.count = BUNCH_OF_TRANSACTIONS_TO_FETCH; req.order = ORDER_FROM_BEGIN_TO_END; req.exclude_unconfirmed = true; get_transactions_history(req, resp); //check that last tx match if (resp.transfers.size() && last_tx_hash != nullhash && resp.transfers[0].tx_hash != last_tx_hash) { //log problems return false; } //regular synchronization for (int i = 0; i < resp.transfers.size(); i++) { if (resp.pi.curent_height - resp.transfers[i].height < NATIVE_CONFIRMATIONS_NEEDED) { //don't even read blocks with smaller confirmation ration than expected break; } if (resp.transfers[i].is_income) { if(resp.transfers[i].payment_id) { db.increase_user_balance(payment_id, resp.transfers[i].amount); } } last_tx_hash = resp.transfers[0].tx_hash; index_in_wallet = resp.transfers[i].transfer_internal_index; } sleep(10000); //sleep for 10 seconds } BAD Response 400 {}","title":"72. get_recent_txs_and_info"},{"location":"api-documentation/daemon-api/","text":"This page will help you get connect Daemon RPC API \u00b6 Daemon RPC API \u00b6 EvoX command-line daemon application (evoxd) can be controlled by remote procedure calls (RPC). This makes it possible to use it as a back end for user-defined services. The daemon starts in RPC server mode by default. To specify the RPC port or bind address the user will need to run evoxd with the following options: evoxd --rpc-bind-ip RPC_IP --rpc-bind-port RPC_PORT RPC_IP \u2014 IP address to bind RPC server to ( 127.0.0.1 will be used if not specified); RPC_PORT \u2014 TCP port for RPC server ( 52521 is default); All examples below are based on the assumption that the daemon is listening for RPC at 127.0.0.1:52521 . All amounts and balances are represented as unsigned integers and measured in atomic units \u2014 the smallest fraction of a coin . One coin is equal to 10^12 atomic units. JSON RPC BUSY response \u00b6 All JSON RPC calls are served via http://RPC_IP:RPC_PORT/json_rpc URI. Any request may receive a BUSY response if the daemon is synchronizing with the network. In such cases the user should repeat the request later. { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"BUSY\" } } Alternative blocks are not stored between subsequent runs of the daemon application. For a recently started daemon the list of known alternative blocks is always empty. Connect Legacy JSON API \u00b6 This API is legacy and not compliant with the JSON RPC specification. Please note that all methods in this section are accessed by http://RPC_IP:RPC_PORT/METOD_NAME URI. Connect Binary RPC API \u00b6 Binary API uses binary protocol for communication, which is more compact and faster than JSON-API, especially when transferring large amounts of data. It was designed to communicate with a wallet application. You may want to use epee serialization, in particular epee::serialization::store_t_to_binary and epee::serialization::load_t_from_binary methods, to serialize your data before passing to API, and to deserialize upon retrieving from API. Alternatively, you may use epee::net_utils::invoke_http_bin_remote_command2 All methods in this section are accessible by http://RPC_IP:RPC_PORT/METOD_NAME URI.","title":"Daemon API docs"},{"location":"api-documentation/daemon-api/#this-page-will-help-you-get-connect-daemon-rpc-api","text":"","title":"This page will help you get connect Daemon RPC API"},{"location":"api-documentation/daemon-api/#daemon-rpc-api","text":"EvoX command-line daemon application (evoxd) can be controlled by remote procedure calls (RPC). This makes it possible to use it as a back end for user-defined services. The daemon starts in RPC server mode by default. To specify the RPC port or bind address the user will need to run evoxd with the following options: evoxd --rpc-bind-ip RPC_IP --rpc-bind-port RPC_PORT RPC_IP \u2014 IP address to bind RPC server to ( 127.0.0.1 will be used if not specified); RPC_PORT \u2014 TCP port for RPC server ( 52521 is default); All examples below are based on the assumption that the daemon is listening for RPC at 127.0.0.1:52521 . All amounts and balances are represented as unsigned integers and measured in atomic units \u2014 the smallest fraction of a coin . One coin is equal to 10^12 atomic units.","title":"Daemon RPC API"},{"location":"api-documentation/daemon-api/#json-rpc-busy-response","text":"All JSON RPC calls are served via http://RPC_IP:RPC_PORT/json_rpc URI. Any request may receive a BUSY response if the daemon is synchronizing with the network. In such cases the user should repeat the request later. { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"status\": \"BUSY\" } } Alternative blocks are not stored between subsequent runs of the daemon application. For a recently started daemon the list of known alternative blocks is always empty.","title":"JSON RPC BUSY response"},{"location":"api-documentation/daemon-api/#connect-legacy-json-api","text":"This API is legacy and not compliant with the JSON RPC specification. Please note that all methods in this section are accessed by http://RPC_IP:RPC_PORT/METOD_NAME URI.","title":"Connect Legacy JSON API"},{"location":"api-documentation/daemon-api/#connect-binary-rpc-api","text":"Binary API uses binary protocol for communication, which is more compact and faster than JSON-API, especially when transferring large amounts of data. It was designed to communicate with a wallet application. You may want to use epee serialization, in particular epee::serialization::store_t_to_binary and epee::serialization::load_t_from_binary methods, to serialize your data before passing to API, and to deserialize upon retrieving from API. Alternatively, you may use epee::net_utils::invoke_http_bin_remote_command2 All methods in this section are accessible by http://RPC_IP:RPC_PORT/METOD_NAME URI.","title":"Connect Binary RPC API"},{"location":"api-documentation/wallet-api/","text":"How to connect Wallet RPC API \u00b6 This page will help you get connect Wallet RPC API. \u00b6 EvoX command-line wallet application (simplewallet) can be run in RPC server mode. In this mode it can be controlled by RPC calls via HTTP . This makes possible to use it as a back end for an arbitrary service. In order to start the wallet in RPC server mode, a user needs the following : 1 . Run evoxd (the daemon application) 2 . Run simplewallet with the following options : simplewallet --wallet-file PATH_TO_WALLET_FILE --password PASSWORD --rpc-bind-ip RPC_IP --rpc-bind-port RPC_PORT --daemon-address DEAMON_ADDR:DAEMON_PORT PATH_TO_WALLET_FILE \u2014 path to an existing wallet file (should be created before using --generate-new-wallet); PASSWORD \u2014 wallet\u2019s password; RPC_IP \u2014 IP address to bind RPC server to (127.0.0.1 will be used if not specified); RPC_PORT \u2014 TCP port for RPC server; DEAMON_ADDR:DAEMON_PORT \u2014 daemon address and port (may be omitted if the daemon is running on the same machine with the default settings); All examples below are given in assumption that the wallet application is running in RPC server mode and listening at 127.0.0.1:12233 . All amounts and balances are represented as unsigned integers and measured in atomic units \u2014 the smallest fraction of a coin. 1 coin is equal to 10^12 atomic units.","title":"Wallet API docs"},{"location":"api-documentation/wallet-api/#how-to-connect-wallet-rpc-api","text":"","title":"How to connect Wallet RPC API"},{"location":"api-documentation/wallet-api/#this-page-will-help-you-get-connect-wallet-rpc-api","text":"EvoX command-line wallet application (simplewallet) can be run in RPC server mode. In this mode it can be controlled by RPC calls via HTTP . This makes possible to use it as a back end for an arbitrary service. In order to start the wallet in RPC server mode, a user needs the following : 1 . Run evoxd (the daemon application) 2 . Run simplewallet with the following options : simplewallet --wallet-file PATH_TO_WALLET_FILE --password PASSWORD --rpc-bind-ip RPC_IP --rpc-bind-port RPC_PORT --daemon-address DEAMON_ADDR:DAEMON_PORT PATH_TO_WALLET_FILE \u2014 path to an existing wallet file (should be created before using --generate-new-wallet); PASSWORD \u2014 wallet\u2019s password; RPC_IP \u2014 IP address to bind RPC server to (127.0.0.1 will be used if not specified); RPC_PORT \u2014 TCP port for RPC server; DEAMON_ADDR:DAEMON_PORT \u2014 daemon address and port (may be omitted if the daemon is running on the same machine with the default settings); All examples below are given in assumption that the wallet application is running in RPC server mode and listening at 127.0.0.1:12233 . All amounts and balances are represented as unsigned integers and measured in atomic units \u2014 the smallest fraction of a coin. 1 coin is equal to 10^12 atomic units.","title":"This page will help you get connect Wallet RPC API."},{"location":"exchange-guide/exchange-faq/","text":"Exchange FAQ \u00b6 Frequently asked questions for exchanges and services Why don't you compile your code and just send binaries to us? \u00b6 Our project is open source and we believe this would be insecurity in its extreme form. Which OS is recommended? \u00b6 Ubuntu 18.04 LTS or Ubuntu 20.04 LTS We got \"internal compiler error: Killed\" \u00b6 You ran out of RAM. Try to limit make job slots by specifying make -j 1 We got compiler/linker error mentioning Boost \u00b6 Make sure you have built the recommended version of Boost manually (via ./bootstrap.sh , ./b2 ). Wallet RPC is not working. We got \"Core is busy\" in logs/responses \u00b6 Make sure the daemon is synchronized with the network. It may take up to few hours when running for the fist time. When it synchronized you'll stop seeing yellow \"sync progress\" messages in daemon logs. How to validate an address? \u00b6 To validate an address you can use split_integrated_address . It also works with standard addresses (non integrated one) How to get all integrated addresses on a wallet? \u00b6 A wallet does not store all integrated addresses, thus it is impossible. Integrated address is just your wallet address PLUS encoded hex payment id you provided packed together. As you can provide ANY payment id you could imagine, you can generate unlimited number of integrated addresses for a wallet. Can we use random payment id when generating integrated address for a user? \u00b6 Yes, It is highly recommended to use randomly generated payment id's to identify each of your users. What transaction fee should we specify in RPCs? \u00b6 Minimum transaction fee is 0.01 EvoX. What are \"pub_keys\" that we see in transaction output via explorer? \u00b6 Each output in CryptoNote-like currency has it's own public key (i.e. one-time destination key) that cannot be linked with the address or other outputs. The owner of the output calculates the private key when he spends it. We got \"Invalid params\" RPC response \u00b6 Make sure you pass amounts as integers not strings. We can't see our own transfer when filtering by payment id with get_bulk_payments or get_payments RPC calls \u00b6 Make sure you're not sending coins to yourself (from an address to the very same address). Coins which were sent that way will safely reach their destination (and the balances will be correct) but such a transfer won't be seen when you filter transfers by payment id via get_bulk_payments or get_payments .","title":"Exchange FAQ"},{"location":"exchange-guide/exchange-faq/#exchange-faq","text":"Frequently asked questions for exchanges and services","title":"Exchange FAQ"},{"location":"exchange-guide/exchange-faq/#why-dont-you-compile-your-code-and-just-send-binaries-to-us","text":"Our project is open source and we believe this would be insecurity in its extreme form.","title":"Why don't you compile your code and just send binaries to us?"},{"location":"exchange-guide/exchange-faq/#which-os-is-recommended","text":"Ubuntu 18.04 LTS or Ubuntu 20.04 LTS","title":"Which OS is recommended?"},{"location":"exchange-guide/exchange-faq/#we-got-internal-compiler-error-killed","text":"You ran out of RAM. Try to limit make job slots by specifying make -j 1","title":"We got \"internal compiler error: Killed\""},{"location":"exchange-guide/exchange-faq/#we-got-compilerlinker-error-mentioning-boost","text":"Make sure you have built the recommended version of Boost manually (via ./bootstrap.sh , ./b2 ).","title":"We got compiler/linker error mentioning Boost"},{"location":"exchange-guide/exchange-faq/#wallet-rpc-is-not-working-we-got-core-is-busy-in-logsresponses","text":"Make sure the daemon is synchronized with the network. It may take up to few hours when running for the fist time. When it synchronized you'll stop seeing yellow \"sync progress\" messages in daemon logs.","title":"Wallet RPC is not working. We got \"Core is busy\" in logs/responses"},{"location":"exchange-guide/exchange-faq/#how-to-validate-an-address","text":"To validate an address you can use split_integrated_address . It also works with standard addresses (non integrated one)","title":"How to validate an address?"},{"location":"exchange-guide/exchange-faq/#how-to-get-all-integrated-addresses-on-a-wallet","text":"A wallet does not store all integrated addresses, thus it is impossible. Integrated address is just your wallet address PLUS encoded hex payment id you provided packed together. As you can provide ANY payment id you could imagine, you can generate unlimited number of integrated addresses for a wallet.","title":"How to get all integrated addresses on a wallet?"},{"location":"exchange-guide/exchange-faq/#can-we-use-random-payment-id-when-generating-integrated-address-for-a-user","text":"Yes, It is highly recommended to use randomly generated payment id's to identify each of your users.","title":"Can we use random payment id when generating integrated address for a user?"},{"location":"exchange-guide/exchange-faq/#what-transaction-fee-should-we-specify-in-rpcs","text":"Minimum transaction fee is 0.01 EvoX.","title":"What transaction fee should we specify in RPCs?"},{"location":"exchange-guide/exchange-faq/#what-are-pub_keys-that-we-see-in-transaction-output-via-explorer","text":"Each output in CryptoNote-like currency has it's own public key (i.e. one-time destination key) that cannot be linked with the address or other outputs. The owner of the output calculates the private key when he spends it.","title":"What are \"pub_keys\" that we see in transaction output via explorer?"},{"location":"exchange-guide/exchange-faq/#we-got-invalid-params-rpc-response","text":"Make sure you pass amounts as integers not strings.","title":"We got \"Invalid params\" RPC response"},{"location":"exchange-guide/exchange-faq/#we-cant-see-our-own-transfer-when-filtering-by-payment-id-with-get_bulk_payments-or-get_payments-rpc-calls","text":"Make sure you're not sending coins to yourself (from an address to the very same address). Coins which were sent that way will safely reach their destination (and the balances will be correct) but such a transfer won't be seen when you filter transfers by payment id via get_bulk_payments or get_payments .","title":"We can't see our own transfer when filtering by payment id with get_bulk_payments or get_payments RPC calls"},{"location":"exchange-guide/integrate-address/","text":"Integrated addresses for exchanges \u00b6 Starting the daemon and the wallet application as RPC server \u00b6 Unlike Bitcoin, CryptoNote family coins have different, more effective approach on how to handle user deposits. An exchange generates only one address for receiving coins and all users send coins to that address. To distinguish different deposits from different users the exchange generates random identifier (called payment ID) for each one and a user attaches this payment ID to his transaction while sending. Upon receiving, the exchange can extract payment ID and thus identify the user. In original CryptoNote there were two separate things: exchange deposit address (the same for all users) and payment ID (unique for all users). Later, for user convenience and to avoid missing payment ID we combined them together into one thing, called integrated address. So nowadays modern exchanges usually give to a user an integrated address for depositing instead of pair of standard deposit address and a payment ID. Note !!! For more information on how to handle integrated addresses, please refer to RPCs make_integrated_address and split_integrated_address below","title":"Integrated address"},{"location":"exchange-guide/integrate-address/#integrated-addresses-for-exchanges","text":"","title":"Integrated addresses for exchanges"},{"location":"exchange-guide/integrate-address/#starting-the-daemon-and-the-wallet-application-as-rpc-server","text":"Unlike Bitcoin, CryptoNote family coins have different, more effective approach on how to handle user deposits. An exchange generates only one address for receiving coins and all users send coins to that address. To distinguish different deposits from different users the exchange generates random identifier (called payment ID) for each one and a user attaches this payment ID to his transaction while sending. Upon receiving, the exchange can extract payment ID and thus identify the user. In original CryptoNote there were two separate things: exchange deposit address (the same for all users) and payment ID (unique for all users). Later, for user convenience and to avoid missing payment ID we combined them together into one thing, called integrated address. So nowadays modern exchanges usually give to a user an integrated address for depositing instead of pair of standard deposit address and a payment ID. Note !!! For more information on how to handle integrated addresses, please refer to RPCs make_integrated_address and split_integrated_address below","title":"Starting the daemon and the wallet application as RPC server"},{"location":"exchange-guide/start-daemon-wall/","text":"Starting the daemon and the wallet application as RPC server \u00b6 Starting the daemon and the wallet application as RPC server EvoX command-line wallet application (simplewallet) can be run in RPC server mode. In this mode it can be controlled by RPC calls via HTTP and be used as a back-end for an arbitrary service. Starting the wallet in RPC server mode \u00b6 1 . Run evoxd (the daemon application). 2 . Run simplewallet with the following options : simplewallet --wallet-file PATH_TO_WALLET_FILE --password PASSWORD --rpc-bind-ip RPC_IP --rpc-bind-port RPC_PORT --daemon-address DEAMON_ADDR:DAEMON_PORT --log-file LOG_FILE_NAME PATH_TO_WALLET_FILE \u2014 path to an existing wallet file (should be created beforehand using --generate-new-wallet command); PASSWORD \u2014 wallet password; RPC_IP \u2014 IP address to bind RPC server to (127.0.0.1 will be used if not specified); RPC_PORT \u2014 TCP port for RPC server; DEAMON_ADDR:DAEMON_PORT \u2014 daemon address and port (may be omitted if the daemon is running on the same machine with the default settings); LOG_FILE_NAME \u2014 path and filename of simplewallet log file. Note !!! Examples in List of Wallet RPCs are given with assumption that the wallet application is running in RPC server mode and listening at 127.0.0.1:12233 All amounts and balances are represented as unsigned integers and measured in atomic units \u2014 the smallest fraction of a coin. One coin equals 10^12 atomic units.","title":"Daemon & Wallet RPC"},{"location":"exchange-guide/start-daemon-wall/#starting-the-daemon-and-the-wallet-application-as-rpc-server","text":"Starting the daemon and the wallet application as RPC server EvoX command-line wallet application (simplewallet) can be run in RPC server mode. In this mode it can be controlled by RPC calls via HTTP and be used as a back-end for an arbitrary service.","title":"Starting the daemon and the wallet application as RPC server"},{"location":"exchange-guide/start-daemon-wall/#starting-the-wallet-in-rpc-server-mode","text":"1 . Run evoxd (the daemon application). 2 . Run simplewallet with the following options : simplewallet --wallet-file PATH_TO_WALLET_FILE --password PASSWORD --rpc-bind-ip RPC_IP --rpc-bind-port RPC_PORT --daemon-address DEAMON_ADDR:DAEMON_PORT --log-file LOG_FILE_NAME PATH_TO_WALLET_FILE \u2014 path to an existing wallet file (should be created beforehand using --generate-new-wallet command); PASSWORD \u2014 wallet password; RPC_IP \u2014 IP address to bind RPC server to (127.0.0.1 will be used if not specified); RPC_PORT \u2014 TCP port for RPC server; DEAMON_ADDR:DAEMON_PORT \u2014 daemon address and port (may be omitted if the daemon is running on the same machine with the default settings); LOG_FILE_NAME \u2014 path and filename of simplewallet log file. Note !!! Examples in List of Wallet RPCs are given with assumption that the wallet application is running in RPC server mode and listening at 127.0.0.1:12233 All amounts and balances are represented as unsigned integers and measured in atomic units \u2014 the smallest fraction of a coin. One coin equals 10^12 atomic units.","title":"Starting the wallet in RPC server mode"},{"location":"faq/faq/","text":"What is EvoX ? \u00b6 EvoX leverages the proven and time-tested cryptographic primitives that were first introduced with CryptoNote. Transactions are made both untraceable, and unlinkable by using stealth addresses and ring-signatures. Downstream sender privacy is guaranteed by using output flags. What consensus mechanism is used? \u00b6 EvoX uses a hybrid PoS \u2014 PoW consensus mechanism. This makes double-spend attacks both un-feasible and improbable. PoS was implemented to complement and enhance the security provided by traditional PoW blockchains. What is alias and how does it work? \u00b6 Each EvoX user can register with an alias, for example: @angeline , a human-readable name associated with a payment address. EvoX users can easily send transactions to an alias: their wallets automatically check whether the name is registered in the blockchain. What is escrow contracts? \u00b6 Escrow, like its name, is a mechanism that was designed to facilitate secure anonymous payments between counter-parties. EvoX provides the framework for a secure and private transaction without the need for a trusted third party. Our Escrow system (as proposed) will require participants to make additional deposits, which they will forfeit if there is any attempt to act maliciously, or in a way that is contemptuous toward their counter party. How can I get EvoX coins? \u00b6 You can mine coins and use staking to increase your balance or trade coins on cryptocurrency exchanges. Is EvoX a hardfork of Zano? \u00b6 Yes What is mixin and what it's used for? \u00b6 The mixin count refers to the number of signatures (apart from yours) in the ring signature that authorizes the transaction. Higher mixin value will typically provide more privacy because it will provide greater plausible deniability. It is impossible for any observer to know which is the real source of the funds. When trying to send coins I get an error stating that transaction is too large. \u00b6 This is due to sending many small inputs to the address. The solution is to split up the transaction and send smaller amounts. What is a seed phrase? \u00b6 To access the wallet in the event of a loss, you need something called a mnemonic recovery phrase or seed. This group of words that you received while creating your wallet are designed to add an extra layer of security. With these phrases you can easily restore lost wallets if you don\u2019t have the passkey. Why application starting time takes so long? \u00b6 As EvoX wallet is a full node application, due to loading a blockchain and multiple wallets synchronizing , start time depends on your system specification and may be bottlenecked by internet connection speed.","title":"Frequently Asked Questions"},{"location":"faq/faq/#what-is-evox","text":"EvoX leverages the proven and time-tested cryptographic primitives that were first introduced with CryptoNote. Transactions are made both untraceable, and unlinkable by using stealth addresses and ring-signatures. Downstream sender privacy is guaranteed by using output flags.","title":"What is EvoX ?"},{"location":"faq/faq/#what-consensus-mechanism-is-used","text":"EvoX uses a hybrid PoS \u2014 PoW consensus mechanism. This makes double-spend attacks both un-feasible and improbable. PoS was implemented to complement and enhance the security provided by traditional PoW blockchains.","title":"What consensus mechanism is used?"},{"location":"faq/faq/#what-is-alias-and-how-does-it-work","text":"Each EvoX user can register with an alias, for example: @angeline , a human-readable name associated with a payment address. EvoX users can easily send transactions to an alias: their wallets automatically check whether the name is registered in the blockchain.","title":"What is alias and how does it work?"},{"location":"faq/faq/#what-is-escrow-contracts","text":"Escrow, like its name, is a mechanism that was designed to facilitate secure anonymous payments between counter-parties. EvoX provides the framework for a secure and private transaction without the need for a trusted third party. Our Escrow system (as proposed) will require participants to make additional deposits, which they will forfeit if there is any attempt to act maliciously, or in a way that is contemptuous toward their counter party.","title":"What is escrow contracts?"},{"location":"faq/faq/#how-can-i-get-evox-coins","text":"You can mine coins and use staking to increase your balance or trade coins on cryptocurrency exchanges.","title":"How can I get EvoX coins?"},{"location":"faq/faq/#is-evox-a-hardfork-of-zano","text":"Yes","title":"Is EvoX a hardfork of Zano?"},{"location":"faq/faq/#what-is-mixin-and-what-its-used-for","text":"The mixin count refers to the number of signatures (apart from yours) in the ring signature that authorizes the transaction. Higher mixin value will typically provide more privacy because it will provide greater plausible deniability. It is impossible for any observer to know which is the real source of the funds.","title":"What is mixin and what it's used for?"},{"location":"faq/faq/#when-trying-to-send-coins-i-get-an-error-stating-that-transaction-is-too-large","text":"This is due to sending many small inputs to the address. The solution is to split up the transaction and send smaller amounts.","title":"When trying to send coins I get an error stating that transaction is too large."},{"location":"faq/faq/#what-is-a-seed-phrase","text":"To access the wallet in the event of a loss, you need something called a mnemonic recovery phrase or seed. This group of words that you received while creating your wallet are designed to add an extra layer of security. With these phrases you can easily restore lost wallets if you don\u2019t have the passkey.","title":"What is a seed phrase?"},{"location":"faq/faq/#why-application-starting-time-takes-so-long","text":"As EvoX wallet is a full node application, due to loading a blockchain and multiple wallets synchronizing , start time depends on your system specification and may be bottlenecked by internet connection speed.","title":"Why application starting time takes so long?"},{"location":"market/market-api/","text":"Building distributed markets based on EvoX \u00b6 The EvoX blockchain will act as a platform for building distributed services. One of those services is our Marketplace, offering out of the box blockchain solutions. With the EvoX Marketplace you create, update, or deactivate offers. Offers contain information about a user who is selling or buying something. As soon as an offer is published in the blockchain it is visible to everyone. This feature allows developers to build a decentralized online stores, based on offers and escrow contracts. The EvoX daemon has built-in service, that can show all active offers from the blockchain as multi indexed set with diverse filtering options. These offers are active for 2 weeks, after that, an offer needs to be re-posted. Posting and updating offers \u00b6 To be able to post/update offers you have to work with wallet API , since every operation over the offers has it's fee. Posting offer. To post an offer should be used marketplace_push_offer API method. This method takes as a parameter Offer structure and sends it with the carrier transaction to the blockchain. As soon as transaction got 10 confirmations it will appear in search API of the daemon. Updating offer. It's possible to update an offer if needed to make changes in any of the offer's fields. When wallet create a carrier transaction with updating offer, it includes proof that this update created by the owner of the original offer transaction. To perform update should be used marketplace_push_update_offer wallet API method. In parameters should be specified original offer post transaction ID as a reference, and full details of the new updated version of the offer. Update procedure may be repeated many times, every time reference transaction id should be used from last update operation or from original posting transaction if there were no updates before. Cancelling offer. It's also possible to mark an offer as inactive by calling marketplace_cancel_offer . This API call confirm the authority of the owner same was as marketplace_push_update_offer , so the caller must provide original offer's transaction id as a reference. After carrier transaction with this command is confirmed offer is no longer returned by search API of the daemon. Enumerating my offer. To make easier management of the offers that belong to a particular wallet, we introduced marketplace_get_offers_ex API. This API return list of the active offers that had been posted from the current wallet. Diverse set of filtering and ordering options explained in documentation to this method. Reading offers from blockchain \u00b6 First of all, to activate Marketplace service in the daemon. By default, this service is deactivated to avoid performance waste. To activate this service you have to run daemon with : --enable-offers-service command line option. To fetch active offers from blockchain should be used marketplace_global_get_offers_ex method. This method based on the filter structure, which provide diverse set of options for filtering and ordering offers. If you want basically to enumerate all offers in the blockchain you may want to use offset and limit options from filter. By adding limit amount to offset in every next method call, you can subsequently fetch all offers from blockchain, even if there are millions of it.","title":"Market API guide"},{"location":"market/market-api/#building-distributed-markets-based-on-evox","text":"The EvoX blockchain will act as a platform for building distributed services. One of those services is our Marketplace, offering out of the box blockchain solutions. With the EvoX Marketplace you create, update, or deactivate offers. Offers contain information about a user who is selling or buying something. As soon as an offer is published in the blockchain it is visible to everyone. This feature allows developers to build a decentralized online stores, based on offers and escrow contracts. The EvoX daemon has built-in service, that can show all active offers from the blockchain as multi indexed set with diverse filtering options. These offers are active for 2 weeks, after that, an offer needs to be re-posted.","title":"Building distributed markets based on EvoX"},{"location":"market/market-api/#posting-and-updating-offers","text":"To be able to post/update offers you have to work with wallet API , since every operation over the offers has it's fee. Posting offer. To post an offer should be used marketplace_push_offer API method. This method takes as a parameter Offer structure and sends it with the carrier transaction to the blockchain. As soon as transaction got 10 confirmations it will appear in search API of the daemon. Updating offer. It's possible to update an offer if needed to make changes in any of the offer's fields. When wallet create a carrier transaction with updating offer, it includes proof that this update created by the owner of the original offer transaction. To perform update should be used marketplace_push_update_offer wallet API method. In parameters should be specified original offer post transaction ID as a reference, and full details of the new updated version of the offer. Update procedure may be repeated many times, every time reference transaction id should be used from last update operation or from original posting transaction if there were no updates before. Cancelling offer. It's also possible to mark an offer as inactive by calling marketplace_cancel_offer . This API call confirm the authority of the owner same was as marketplace_push_update_offer , so the caller must provide original offer's transaction id as a reference. After carrier transaction with this command is confirmed offer is no longer returned by search API of the daemon. Enumerating my offer. To make easier management of the offers that belong to a particular wallet, we introduced marketplace_get_offers_ex API. This API return list of the active offers that had been posted from the current wallet. Diverse set of filtering and ordering options explained in documentation to this method.","title":"Posting and updating offers"},{"location":"market/market-api/#reading-offers-from-blockchain","text":"First of all, to activate Marketplace service in the daemon. By default, this service is deactivated to avoid performance waste. To activate this service you have to run daemon with : --enable-offers-service command line option. To fetch active offers from blockchain should be used marketplace_global_get_offers_ex method. This method based on the filter structure, which provide diverse set of options for filtering and ordering offers. If you want basically to enumerate all offers in the blockchain you may want to use offset and limit options from filter. By adding limit amount to offset in every next method call, you can subsequently fetch all offers from blockchain, even if there are millions of it.","title":"Reading offers from blockchain"},{"location":"mining/pos-earning/","text":"Estimating PoS earnings \u00b6 Proof-of-stake earnings depend on current PoS difficulty and the number of coins you have locked for staking. The more coins you stake, the better chance you have to \u201cwin\u201d the right to sign the next PoS block. Of course, it\u2019s important to estimate your chances and predict how much you can earn in some way. Here is the most straightforward way to do so. First, we need to get the current PoS difficulty, which can be found in the Block Explorer . This value is then divided by 1000000000000 (10 ^ 12) , which in the EvoX network is one coin basis. Second, we again divide it by 288 . This operation lets us take the PoS mining timestamp frame into account. Without further details, this factor provides hash variety in PoS mining and can be somewhere between 256 and 320 . It\u2019s reasonable to use the value of 288 here. Now we have an estimation of how many coins participate in PoS mining currently as Coins_in_PoS = PoS_difficulty / 1000000000000 / 288 Or : Where C is the total amount of coins participating in PoS mining And D_PoS is the current PoS difficulty. As you may know, the EvoX network emits an average of 1 coin each minute with a 50-50 spread between PoS and PoW . That makes it 720 potential PoS reward coins per day. So if you owned all the coins in PoS, that could be your total day earnings. And if you divide C by 720 , you will get the number of coins you need to mine 1 EvoX coin a day. Now, you can estimate the number of coins you will earn as your_PoS_earnings = 720 * your_staking_coins / C Or, in other words : Where E_daily is the estimated number of coins you'll earn per day, and N is the number of coins you're staking. Note Please keep in mind that all the above is an expectation and can vary heavily. More detalied PoS scheme \u00b6","title":"PoS Eanings"},{"location":"mining/pos-earning/#estimating-pos-earnings","text":"Proof-of-stake earnings depend on current PoS difficulty and the number of coins you have locked for staking. The more coins you stake, the better chance you have to \u201cwin\u201d the right to sign the next PoS block. Of course, it\u2019s important to estimate your chances and predict how much you can earn in some way. Here is the most straightforward way to do so. First, we need to get the current PoS difficulty, which can be found in the Block Explorer . This value is then divided by 1000000000000 (10 ^ 12) , which in the EvoX network is one coin basis. Second, we again divide it by 288 . This operation lets us take the PoS mining timestamp frame into account. Without further details, this factor provides hash variety in PoS mining and can be somewhere between 256 and 320 . It\u2019s reasonable to use the value of 288 here. Now we have an estimation of how many coins participate in PoS mining currently as Coins_in_PoS = PoS_difficulty / 1000000000000 / 288 Or : Where C is the total amount of coins participating in PoS mining And D_PoS is the current PoS difficulty. As you may know, the EvoX network emits an average of 1 coin each minute with a 50-50 spread between PoS and PoW . That makes it 720 potential PoS reward coins per day. So if you owned all the coins in PoS, that could be your total day earnings. And if you divide C by 720 , you will get the number of coins you need to mine 1 EvoX coin a day. Now, you can estimate the number of coins you will earn as your_PoS_earnings = 720 * your_staking_coins / C Or, in other words : Where E_daily is the estimated number of coins you'll earn per day, and N is the number of coins you're staking. Note Please keep in mind that all the above is an expectation and can vary heavily.","title":"Estimating PoS earnings"},{"location":"mining/pos-earning/#more-detalied-pos-scheme","text":"","title":"More detalied PoS scheme"},{"location":"mining/pos-mining/","text":"Proof Of Stake (POS) \u00b6 Proof-of-stake mining or POS for short is typically implemented such that a random coin owner obtains the right to sign a new block. EvoX POS implementation keep miners in full anonymity and simple with a push of a button. Open EvoX app, make sure the blockchain is synchronised and turn ON Staking switch. You can observe your progress in the Staking tab of your staking wallet. The amount of earnings depends on the wallet balance. Amount of earnings depends also of how many user are running PoS. When you turn Staking OFF, balance will get unlocked right away. You can switch Staking ON and OFF without any limitations. Server mode POS mining \u00b6 In some cases it would be convenient to do POS mining without application running. Here are steps to achieve it. 1 . Build EvoX daemon (evoxd executable) following instructions 2 . Navigate to Evox folder 3 . Start evoxd daemon (service) 4 . Start wallet daemon in RPC mode simplewallet --wallet-file WalletFile --password WalletPassword --rpc-bind-port=12233 --do-pos-mining WalletFile -- the wallet file name WalletPassword -- the password of the wallet that is in use 12233 -- port of your choice, e.g. 12233 Note Now this wallet now participates in proof-of-stake mining.","title":"Proof Of Stake mining"},{"location":"mining/pos-mining/#proof-of-stake-pos","text":"Proof-of-stake mining or POS for short is typically implemented such that a random coin owner obtains the right to sign a new block. EvoX POS implementation keep miners in full anonymity and simple with a push of a button. Open EvoX app, make sure the blockchain is synchronised and turn ON Staking switch. You can observe your progress in the Staking tab of your staking wallet. The amount of earnings depends on the wallet balance. Amount of earnings depends also of how many user are running PoS. When you turn Staking OFF, balance will get unlocked right away. You can switch Staking ON and OFF without any limitations.","title":"Proof Of Stake (POS)"},{"location":"mining/pos-mining/#server-mode-pos-mining","text":"In some cases it would be convenient to do POS mining without application running. Here are steps to achieve it. 1 . Build EvoX daemon (evoxd executable) following instructions 2 . Navigate to Evox folder 3 . Start evoxd daemon (service) 4 . Start wallet daemon in RPC mode simplewallet --wallet-file WalletFile --password WalletPassword --rpc-bind-port=12233 --do-pos-mining WalletFile -- the wallet file name WalletPassword -- the password of the wallet that is in use 12233 -- port of your choice, e.g. 12233 Note Now this wallet now participates in proof-of-stake mining.","title":"Server mode POS mining"},{"location":"mining/solo-mining-guide/","text":"The EvoX daemon features an internal stratum-like server that can serve miner clients via the ethProxy protocol. It works like a very light and simple pool that mines to a single address. To run a GPU miner with the internal EvoX stratum server follow these steps : 1 . build the daemon (evoxd executable) 2 . run the daemon with an activated stratum server 3 . run the GPU or CPU miner connected to the daemon Once all started, the miner should connect to the daemon and receive a job from it. Upon finding a solution, the miner should send it to the daemon and the daemon should confirm the solution. Both can run on remote machines. Windows quick guide \u00b6 First, install the EvoX app, create a EvoX wallet and wait until blockchain syncing is complete. When syncing is complete close the app. In order to mine, EvoX must be started with the stratum server activated. Open a cmd console window and navigate to the Evox folder C:\\Program Files\\Evox by default Here in the folder run evoxd.exe --stratum --stratum-miner-address=YourWalletAddress --log-level=0 --stratum-bind-port=52500","title":"Solo mining"},{"location":"mining/solo-mining-guide/#windows-quick-guide","text":"First, install the EvoX app, create a EvoX wallet and wait until blockchain syncing is complete. When syncing is complete close the app. In order to mine, EvoX must be started with the stratum server activated. Open a cmd console window and navigate to the Evox folder C:\\Program Files\\Evox by default Here in the folder run evoxd.exe --stratum --stratum-miner-address=YourWalletAddress --log-level=0 --stratum-bind-port=52500","title":"Windows quick guide"},{"location":"user-guide/alias/","text":"Each EvoX network user can register with an alias. For example: @artfix a human readable name associated with a payment address and text comment, which is stored in the blockchain. This alias provides a short, easy to remember name rather than a long and confusing string of random characters (like normal wallets address are). Blockchain storage ensures that aliases are protected from being altered or commandeered. Each alias is assigned to a particular wallet. Only one alias can be created per wallet. To register an alias choose Register an alias from wallet main window. To reduce possibility of phishing we set limitations on alias registrations. Users can use any combination of the lower-case Latin letters a-z and the Arabic numerals 0-9 . Additionally, there is a length minimum of 6 characters . The comment section will be temporarily stored in the blockchain until passing a checkpoint. Aliases can be used for more than just EvoX transactions. Think of them as a decentralised address book with universal IDs that can be used for various services based on the EvoX Netwok platform.","title":"Alias"},{"location":"user-guide/audible-wallet/","text":"What is an auditable wallet ? \u00b6 Auditable is the type of wallet that allows 3rd party to see the balance and transaction history without permission to spend it or interact in any other way. How can I tell if wallet is auditable ? \u00b6 It's a wallet with an address in a special format that starts with \"aEX\" . For instance: aEX awNXAuekCXcnzutthLaPZQxAyaofb59FpzNBSCQb7iT7D1nsaxdTCvK4Xhn6nfuRpqDiN What is the purpose of auditable wallets ? \u00b6 Having an auditable wallet, you can allow someone to watch your balance and transaction history without giving him/her the right to spend your funds. Can I get an auditable address for my existing normal wallet ? \u00b6 NO. You need to create a new auditable wallet and transfer your coins into it. How can I create an auditable wallet ? \u00b6 Using simplewallet CLI application : >simplewallet.exe --generate-new-auditable-wallet auditable_wallet_x EvoX wallet v1.1.7[3e463b0] password: *** Generated new AUDITABLE wallet: aEXb9v1DFtaK6Z4bW7UUuaZcmq7MZBzz875eZ5N3vSRa2vWz9wBVE3vVKFGNH8414TTjhiwPz7PTV5ttuZP7GsdDQeWbewpmMaX view key: 3dd8fd870c694818194c1e7a095a51e2e65486e212baca77fce4157f39287f05 tracking seed: aEXb9v1DFtaK6Z4bW7UUuaZcmq7MZBzz875eZ5N3vSRa2vWz9wBVE3vVKFGNH8414TTjhiwPz7PTV5ttuZP7GsdDQeWbewpmMaX:3dd8fd870c694818194c1e7a095a51e2e65486e212baca77fce4157f39287f05:1595429852 ********************************************************************** Your wallet has been generated. ********************************************************************** Using an auditable wallet, how can I give someone the ability to track my balance and transaction history ? \u00b6 You should obtain a tracking seed for your auditable wallet and give it to someone you'd like to be able to track your wallet. At the moment, it can only be done by using tracking_seed command in simplewallet : >simplewallet.exe --wallet-file auditable_wallet_x EvoX wallet v1.1.7.96[3e463b0] password: *** Opened auditable wallet: aEXb9v1DFtaK6Z4bW7UUuaZcmq7MZBzz875eZ5N3vSRa2vWz9wBVE3vVKFGNH8414TTjhiwPz7PTV5ttuZP7GsdDQeWbewpmMaX Starting refresh... Refresh done, blocks received: 0 balance: 0.000000000000, unlocked balance: 0.000000000000 ********************************************************************** Use \"help\" command to see the list of available commands. ********************************************************************** [EvoX wallet aEXb9v]: tracking_seed Auditable watch-only tracking seed for this wallet is: aEXb9v1DFtaK6Z4bW7UUuaZcmq7MZBzz875eZ5N3vSRa2vWz9wBVE3vVKFGNH8414TTjhiwPz7PTV5ttuZP7GsdDQeWbewpmMaX:3dd8fd870c694818194c1e7a095a51e2e65486e212baca77fce4157f39287f05:1595429852 Anyone having this tracking seed is able to watch your balance and transaction history, but unable to spend coins. Tracking seed technically is an auditable address , secret view key and a creation timestamp combined with a colon: aZxawNXAuekCXcnzutthLaPZQxAyaofb59FpzNBSCQb7iT7D1nsaxdTCvK4Xhn6nfuRpqDiNjeUNx2J9KWfTXHmDWNQ85v2bpbi:1be5866b6fda704c0c4a08f9c79c774911fda72dcd8cc8c7ca31bc1a6fda4d0b:1593998615 I got a tracking seed. How can I track the wallet that it is bound to ? \u00b6 You need to restore a wallet using the tracking key the same way you restore a regular wallet using a seed. 1 . It could be done in simplewallet: >simplewallet.exe --restore-wallet=wallet-name EvoX wallet v1.1.7[3e463b0] password: *** please, enter wallet seed phrase or an auditable wallet's tracking seed: *** Tracking wallet restored: aEXb9v1DFtaK6Z4bW7UUuaZcmq7MZBzz875eZ5N3vSRa2vWz9wBVE3vVKFGNH8414TTjhiwPz7PTV5ttuZP7GsdDQeWbewpmMaX ********************************************************************** Your wallet has been restored. To start synchronizing with the daemon use \"refresh\" command. Use \"help\" command to see the list of available commands. Always use \"exit\" command when closing simplewallet to save current session's state. Otherwise, you will possibly need to synchronize your wallet again. Your wallet keys is NOT under risk anyway. ********************************************************************** 2 . In GUI wallet. Are there any restrictions of using auditable wallets ? \u00b6 Only one : you cannot use mixins when you send coins from an auditable wallet. Note Mention The following limitations were effective until hardfork 2 : * When sending coins from an auditable address the sender address is always hidden. * When sending coins to an auditable address the receiver address is always hidden. Once the blockchain passed hardfork 2 these limitations were removed. Can I use integrated addresses with the auditable feature ? \u00b6 Yes. An integrated address for an auditable wallet can be generated as usual. Addresses will have aiEX prefix. Can I mine PoS with my auditable wallet ? \u00b6 Yes, you can. Also, you can use a corresponding watch-only wallet to monitor your balance without the risk of leaking your spend key. The only tradeoff is you can not use mixins but only directly spend coins from your auditable wallet.","title":"Audible Wallet"},{"location":"user-guide/audible-wallet/#what-is-an-auditable-wallet","text":"Auditable is the type of wallet that allows 3rd party to see the balance and transaction history without permission to spend it or interact in any other way.","title":"What is an auditable wallet ?"},{"location":"user-guide/audible-wallet/#how-can-i-tell-if-wallet-is-auditable","text":"It's a wallet with an address in a special format that starts with \"aEX\" . For instance: aEX awNXAuekCXcnzutthLaPZQxAyaofb59FpzNBSCQb7iT7D1nsaxdTCvK4Xhn6nfuRpqDiN","title":"How can I tell if wallet is auditable ?"},{"location":"user-guide/audible-wallet/#what-is-the-purpose-of-auditable-wallets","text":"Having an auditable wallet, you can allow someone to watch your balance and transaction history without giving him/her the right to spend your funds.","title":"What is the purpose of auditable wallets ?"},{"location":"user-guide/audible-wallet/#can-i-get-an-auditable-address-for-my-existing-normal-wallet","text":"NO. You need to create a new auditable wallet and transfer your coins into it.","title":"Can I get an auditable address for my existing normal wallet ?"},{"location":"user-guide/audible-wallet/#how-can-i-create-an-auditable-wallet","text":"Using simplewallet CLI application : >simplewallet.exe --generate-new-auditable-wallet auditable_wallet_x EvoX wallet v1.1.7[3e463b0] password: *** Generated new AUDITABLE wallet: aEXb9v1DFtaK6Z4bW7UUuaZcmq7MZBzz875eZ5N3vSRa2vWz9wBVE3vVKFGNH8414TTjhiwPz7PTV5ttuZP7GsdDQeWbewpmMaX view key: 3dd8fd870c694818194c1e7a095a51e2e65486e212baca77fce4157f39287f05 tracking seed: aEXb9v1DFtaK6Z4bW7UUuaZcmq7MZBzz875eZ5N3vSRa2vWz9wBVE3vVKFGNH8414TTjhiwPz7PTV5ttuZP7GsdDQeWbewpmMaX:3dd8fd870c694818194c1e7a095a51e2e65486e212baca77fce4157f39287f05:1595429852 ********************************************************************** Your wallet has been generated. **********************************************************************","title":"How can I create an auditable wallet ?"},{"location":"user-guide/audible-wallet/#using-an-auditable-wallet-how-can-i-give-someone-the-ability-to-track-my-balance-and-transaction-history","text":"You should obtain a tracking seed for your auditable wallet and give it to someone you'd like to be able to track your wallet. At the moment, it can only be done by using tracking_seed command in simplewallet : >simplewallet.exe --wallet-file auditable_wallet_x EvoX wallet v1.1.7.96[3e463b0] password: *** Opened auditable wallet: aEXb9v1DFtaK6Z4bW7UUuaZcmq7MZBzz875eZ5N3vSRa2vWz9wBVE3vVKFGNH8414TTjhiwPz7PTV5ttuZP7GsdDQeWbewpmMaX Starting refresh... Refresh done, blocks received: 0 balance: 0.000000000000, unlocked balance: 0.000000000000 ********************************************************************** Use \"help\" command to see the list of available commands. ********************************************************************** [EvoX wallet aEXb9v]: tracking_seed Auditable watch-only tracking seed for this wallet is: aEXb9v1DFtaK6Z4bW7UUuaZcmq7MZBzz875eZ5N3vSRa2vWz9wBVE3vVKFGNH8414TTjhiwPz7PTV5ttuZP7GsdDQeWbewpmMaX:3dd8fd870c694818194c1e7a095a51e2e65486e212baca77fce4157f39287f05:1595429852 Anyone having this tracking seed is able to watch your balance and transaction history, but unable to spend coins. Tracking seed technically is an auditable address , secret view key and a creation timestamp combined with a colon: aZxawNXAuekCXcnzutthLaPZQxAyaofb59FpzNBSCQb7iT7D1nsaxdTCvK4Xhn6nfuRpqDiNjeUNx2J9KWfTXHmDWNQ85v2bpbi:1be5866b6fda704c0c4a08f9c79c774911fda72dcd8cc8c7ca31bc1a6fda4d0b:1593998615","title":"Using an auditable wallet, how can I give someone the ability to track my balance and transaction history ?"},{"location":"user-guide/audible-wallet/#i-got-a-tracking-seed-how-can-i-track-the-wallet-that-it-is-bound-to","text":"You need to restore a wallet using the tracking key the same way you restore a regular wallet using a seed. 1 . It could be done in simplewallet: >simplewallet.exe --restore-wallet=wallet-name EvoX wallet v1.1.7[3e463b0] password: *** please, enter wallet seed phrase or an auditable wallet's tracking seed: *** Tracking wallet restored: aEXb9v1DFtaK6Z4bW7UUuaZcmq7MZBzz875eZ5N3vSRa2vWz9wBVE3vVKFGNH8414TTjhiwPz7PTV5ttuZP7GsdDQeWbewpmMaX ********************************************************************** Your wallet has been restored. To start synchronizing with the daemon use \"refresh\" command. Use \"help\" command to see the list of available commands. Always use \"exit\" command when closing simplewallet to save current session's state. Otherwise, you will possibly need to synchronize your wallet again. Your wallet keys is NOT under risk anyway. ********************************************************************** 2 . In GUI wallet.","title":"I got a tracking seed. How can I track the wallet that it is bound to ?"},{"location":"user-guide/audible-wallet/#are-there-any-restrictions-of-using-auditable-wallets","text":"Only one : you cannot use mixins when you send coins from an auditable wallet. Note Mention The following limitations were effective until hardfork 2 : * When sending coins from an auditable address the sender address is always hidden. * When sending coins to an auditable address the receiver address is always hidden. Once the blockchain passed hardfork 2 these limitations were removed.","title":"Are there any restrictions of using auditable wallets ?"},{"location":"user-guide/audible-wallet/#can-i-use-integrated-addresses-with-the-auditable-feature","text":"Yes. An integrated address for an auditable wallet can be generated as usual. Addresses will have aiEX prefix.","title":"Can I use integrated addresses with the auditable feature ?"},{"location":"user-guide/audible-wallet/#can-i-mine-pos-with-my-auditable-wallet","text":"Yes, you can. Also, you can use a corresponding watch-only wallet to monitor your balance without the risk of leaking your spend key. The only tradeoff is you can not use mixins but only directly spend coins from your auditable wallet.","title":"Can I mine PoS with my auditable wallet ?"},{"location":"user-guide/deeplinks/","text":"Based on materials of Matthew Reichardt me@matthewreichardt.com Link to issue EvoX URI Scheme \u00b6 action -- type of action requested supported actions: send -- simply send coins to given address escrow -- create escrow-contract marketplace_offer_create -- create marketplace offer Action \"send\" \u00b6 Example of send command : evox:action=send&address=eXCkvE7zhS6JuFE5neAaTtcY8PUT2CwfLZJQWP32jrELB1Vg9oSJyGJDyRWurqX6SXSqxjGz2yrAKaMqmxDa7E8313igosBVT&comment='Some payment'&mixins=11&hide_sender=true&hide_receiver=true` address -- address of recipient comment -- comment about payment [optional] mixins -- number of mixins [optional] hide_sender -- specify if sender address should be included in transaction(and visible for receiver) hide_receiver -- specify if receiver address should be included in transaction(and visible for sender later, if wallet been restored from seed phrase) Action \"marketplace_offer_create\" \u00b6 Example of marketplace_offer_create command : evox:action=marketplace_offer_create&mixins=11&hide_sender=true&hide_receiver=true&title='Random t-shirt'&description='One size fits all'&category='merch-tshirt'&price=10&img-url=''&contact='@artfix'&comments='abcdf' Basic params:= mixins -- number of mixins [optional] hide_sender -- specify if sender address should be included in transaction (and visible for receiver) hide_receiver -- specify if receiver address should be included in transaction (and visible for sender later, if wallet been restored from seed phrase) Offer details : title -\u2013 offer title description -\u2013 detailed offer description category \u2013- store defined category price -\u2013 price in EvoX img-url -\u2013 ipfs/arweave link to offer image contact -\u2013 preferred way of communication (telegram, email, EvoX alias) comments -- additional comments about the offer Action \"escrow\" \u00b6 Example of escrow command : evox:action=escrow&description='Some Description'&seller_address='eXCXALhZRodKmqRCWUPNAUCXqprJBNKv4eFsjzcMooAGVM6J2U2vSyTNpxNybwBnvzGWLtSWpBiddSZhph8HNfBn1bVE3c6ix'&amount='10'&my_deposit='5'&seller_deposit='5'&comment='Some comment if needed' Escrow parameters : description \u2013 Escrow description seller_address \u2013 Address of the wallet that have to accept/reject this offer amount \u2013 Total amount of the deal (not include security deposits) my_deposit \u2013 amount of coins that buyer put as a deposit seller_deposit \u2013 amount of coins that seller supposed to put as a deposit if he accept escrow comment \u2013 any comments regarding this deal Warning All mentioned information will be encrypted and won't be available for third party.","title":"DeepLinks"},{"location":"user-guide/deeplinks/#evox-uri-scheme","text":"action -- type of action requested supported actions: send -- simply send coins to given address escrow -- create escrow-contract marketplace_offer_create -- create marketplace offer","title":"EvoX URI Scheme"},{"location":"user-guide/deeplinks/#action-send","text":"Example of send command : evox:action=send&address=eXCkvE7zhS6JuFE5neAaTtcY8PUT2CwfLZJQWP32jrELB1Vg9oSJyGJDyRWurqX6SXSqxjGz2yrAKaMqmxDa7E8313igosBVT&comment='Some payment'&mixins=11&hide_sender=true&hide_receiver=true` address -- address of recipient comment -- comment about payment [optional] mixins -- number of mixins [optional] hide_sender -- specify if sender address should be included in transaction(and visible for receiver) hide_receiver -- specify if receiver address should be included in transaction(and visible for sender later, if wallet been restored from seed phrase)","title":"Action \"send\""},{"location":"user-guide/deeplinks/#action-marketplace_offer_create","text":"Example of marketplace_offer_create command : evox:action=marketplace_offer_create&mixins=11&hide_sender=true&hide_receiver=true&title='Random t-shirt'&description='One size fits all'&category='merch-tshirt'&price=10&img-url=''&contact='@artfix'&comments='abcdf' Basic params:= mixins -- number of mixins [optional] hide_sender -- specify if sender address should be included in transaction (and visible for receiver) hide_receiver -- specify if receiver address should be included in transaction (and visible for sender later, if wallet been restored from seed phrase) Offer details : title -\u2013 offer title description -\u2013 detailed offer description category \u2013- store defined category price -\u2013 price in EvoX img-url -\u2013 ipfs/arweave link to offer image contact -\u2013 preferred way of communication (telegram, email, EvoX alias) comments -- additional comments about the offer","title":"Action \"marketplace_offer_create\""},{"location":"user-guide/deeplinks/#action-escrow","text":"Example of escrow command : evox:action=escrow&description='Some Description'&seller_address='eXCXALhZRodKmqRCWUPNAUCXqprJBNKv4eFsjzcMooAGVM6J2U2vSyTNpxNybwBnvzGWLtSWpBiddSZhph8HNfBn1bVE3c6ix'&amount='10'&my_deposit='5'&seller_deposit='5'&comment='Some comment if needed' Escrow parameters : description \u2013 Escrow description seller_address \u2013 Address of the wallet that have to accept/reject this offer amount \u2013 Total amount of the deal (not include security deposits) my_deposit \u2013 amount of coins that buyer put as a deposit seller_deposit \u2013 amount of coins that seller supposed to put as a deposit if he accept escrow comment \u2013 any comments regarding this deal Warning All mentioned information will be encrypted and won't be available for third party.","title":"Action \"escrow\""},{"location":"user-guide/escrow-contracts/","text":"EvoX network provides the framework for a secure and private transaction without the need for a trusted third party. Our Escrow system, as proposed, will require participants to make additional deposits, which they will forfeit if there is any attempt to act maliciously, or in a way that is contemptuous toward their counter party. For more information please refer to the \"Escrow\" section of the whitepaper. Proposal \u00b6 Each escrow contract starts with the buyer proposal. Once it's sent the deposit amount will be locked for a Time until response period. If during the period seller accepts the terms, Escrow contract will be activated. To initiate the process navigate to wallet Contracts tab and choose New Purchase . Proposal details are the following. 1 . Description -- title or description for contract subject 2 . Seller -- wallet address of merchant or seller 3 . Amount -- payment amount for goods or services 4 . Your deposit -- sum of collateral and payment amount 5 . Seller deposit -- collateral from seller required by buyer 6 . Comment -- additional information like order ID, delivery address, etc. 7 . Fee -- transaction fee amount 8 . Time until response -- proposal expiration time 9 . Payment ID -- transaction payment identifier provided by seller Confirmation \u00b6 When the seller accepts the proposal a special multi signature transaction will be sent to the blockchain. Then after 10 confirmations a new contract will be started. The seller can now fulfil contract terms like shipping the item to the buyer. The buyers contract window will get three options to continue with: Cancel and return deposits. Terminate and burn deposits. Complete and release deposits. Cancel and return deposits \u00b6 The buyer can send a cancellation offer to return both deposits and close the contract. The seller can accept or ignore this offer within a given response time. This option is useful when deal is mutually canceled. Terminate and burn deposits \u00b6 When parties cannot find mutual agreement on any occasions one can decide to burn the deposits completely and close the contract. In that case deposits will not be returned ever. Complete and release deposits \u00b6 If buyer is satisfied with the delivery or a provided service the contract can be closed. Releasing deposits will return both parties collaterals.","title":"Escrow Contracts"},{"location":"user-guide/escrow-contracts/#proposal","text":"Each escrow contract starts with the buyer proposal. Once it's sent the deposit amount will be locked for a Time until response period. If during the period seller accepts the terms, Escrow contract will be activated. To initiate the process navigate to wallet Contracts tab and choose New Purchase . Proposal details are the following. 1 . Description -- title or description for contract subject 2 . Seller -- wallet address of merchant or seller 3 . Amount -- payment amount for goods or services 4 . Your deposit -- sum of collateral and payment amount 5 . Seller deposit -- collateral from seller required by buyer 6 . Comment -- additional information like order ID, delivery address, etc. 7 . Fee -- transaction fee amount 8 . Time until response -- proposal expiration time 9 . Payment ID -- transaction payment identifier provided by seller","title":"Proposal"},{"location":"user-guide/escrow-contracts/#confirmation","text":"When the seller accepts the proposal a special multi signature transaction will be sent to the blockchain. Then after 10 confirmations a new contract will be started. The seller can now fulfil contract terms like shipping the item to the buyer. The buyers contract window will get three options to continue with: Cancel and return deposits. Terminate and burn deposits. Complete and release deposits.","title":"Confirmation"},{"location":"user-guide/escrow-contracts/#cancel-and-return-deposits","text":"The buyer can send a cancellation offer to return both deposits and close the contract. The seller can accept or ignore this offer within a given response time. This option is useful when deal is mutually canceled.","title":"Cancel and return deposits"},{"location":"user-guide/escrow-contracts/#terminate-and-burn-deposits","text":"When parties cannot find mutual agreement on any occasions one can decide to burn the deposits completely and close the contract. In that case deposits will not be returned ever.","title":"Terminate and burn deposits"},{"location":"user-guide/escrow-contracts/#complete-and-release-deposits","text":"If buyer is satisfied with the delivery or a provided service the contract can be closed. Releasing deposits will return both parties collaterals.","title":"Complete and release deposits"},{"location":"user-guide/locked-balance/","text":"On occasion, you may notice that part of your wallet balance is temporarily locked. The reason behind it is complex, but let us offer a simplified explanation here. For more details, please refer to the whitepaper. As you may know already there\u2019s no such thing as account balance in the blockchain. Instead each wallet consists of inputs and outputs. Due to the nature of incoming transactions, the amount in a wallet balance can get fragmented. When you try to send a particular amount, your transaction will be split in outgoing and change amounts. Here is example. A has 100 coins and sends 50 to B Transaction of 100 coins creates in the blockchain 50 coins goes to B and 50 coins goes to A EvoX network architecture demands 10 confirmations for this change transaction and that amount gets locked in the wallet. Therefore, lock time is 10 blocks behind or approximately 10 minutes.","title":"Locked Balance"},{"location":"user-guide/manage-wallet/","text":"Managing wallet \u00b6 EvoX app lets you manage multiple EvoX wallets, which can be easily created, restored and removed from the app. The core of each wallet is a seed phrase. It's a sequence of 24 words, that can be used to recovery your wallet private and public keys. Every time you create a new wallet within the app, a unique sequence is generated. It's important to always keep it safe and accessible. For your convenience it's not necessary to use a seed phrase to manage your wallet. When you create a wallet the wallet file is generated as well. The file is secured with additional password and grants access to wallet features and the seed phrase. It can be copied to another device and used with another app. Creating Wallets \u00b6 There are 3 ways to open a wallet in EvoX app. From the Add Wallet section choose 1. Create new wallet \u00b6 a. Enter wallet name and password b . Click Select Wallet Location to choose wallet file location and name c. Continue with Create wallet d. Save shown seed phrase in a secure place and click Create 2. Open existing wallet \u00b6 a . Locate wallet file b . Enter password then open wallet 3. Restore from backup \u00b6 a . Enter new wallet info b . Recover and enter previously stored seed phrase c . Click Select wallet location to choose wallet file location and name d . Continue with Create Wallet Wallet details \u00b6 Each EvoX wallet can be identified by a custom name assigned on creation. This name can be edited in Wallet Details section anytime. Information about wallet file location and it's seed phrase available here as well. Note You can copy the seed phrase by clicking right mouse button over it and choosing COPY from the context menu.\" You can remove a wallet from the EvoX app by clicking Close wallet the X button in the same section. Note Wallet file will remain unaffected and you can import it again anytime if necessary.\" Changing wallet password \u00b6 In case you want to change wallet file password, you need to use Restore from backup. The following step will be required. 1 . Make sure you have the seed phrase saved 2 . Click Close wallet from wallet Details 3 . Delete wallet file 4 . Click +Add Wallet menu and choose Restore from backup 5 . Enter new wallet info 6 . Recover and enter previously stored seed phrase 7 . Click Select wallet location to choose wallet file location and name 8 . Continue with Create wallet","title":"Manage Wallet"},{"location":"user-guide/manage-wallet/#managing-wallet","text":"EvoX app lets you manage multiple EvoX wallets, which can be easily created, restored and removed from the app. The core of each wallet is a seed phrase. It's a sequence of 24 words, that can be used to recovery your wallet private and public keys. Every time you create a new wallet within the app, a unique sequence is generated. It's important to always keep it safe and accessible. For your convenience it's not necessary to use a seed phrase to manage your wallet. When you create a wallet the wallet file is generated as well. The file is secured with additional password and grants access to wallet features and the seed phrase. It can be copied to another device and used with another app.","title":"Managing wallet"},{"location":"user-guide/manage-wallet/#creating-wallets","text":"There are 3 ways to open a wallet in EvoX app. From the Add Wallet section choose","title":"Creating Wallets"},{"location":"user-guide/manage-wallet/#1-create-new-wallet","text":"a. Enter wallet name and password b . Click Select Wallet Location to choose wallet file location and name c. Continue with Create wallet d. Save shown seed phrase in a secure place and click Create","title":"1. Create new wallet"},{"location":"user-guide/manage-wallet/#2-open-existing-wallet","text":"a . Locate wallet file b . Enter password then open wallet","title":"2. Open existing wallet"},{"location":"user-guide/manage-wallet/#3-restore-from-backup","text":"a . Enter new wallet info b . Recover and enter previously stored seed phrase c . Click Select wallet location to choose wallet file location and name d . Continue with Create Wallet","title":"3. Restore from backup"},{"location":"user-guide/manage-wallet/#wallet-details","text":"Each EvoX wallet can be identified by a custom name assigned on creation. This name can be edited in Wallet Details section anytime. Information about wallet file location and it's seed phrase available here as well. Note You can copy the seed phrase by clicking right mouse button over it and choosing COPY from the context menu.\" You can remove a wallet from the EvoX app by clicking Close wallet the X button in the same section. Note Wallet file will remain unaffected and you can import it again anytime if necessary.\"","title":"Wallet details"},{"location":"user-guide/manage-wallet/#changing-wallet-password","text":"In case you want to change wallet file password, you need to use Restore from backup. The following step will be required. 1 . Make sure you have the seed phrase saved 2 . Click Close wallet from wallet Details 3 . Delete wallet file 4 . Click +Add Wallet menu and choose Restore from backup 5 . Enter new wallet info 6 . Recover and enter previously stored seed phrase 7 . Click Select wallet location to choose wallet file location and name 8 . Continue with Create wallet","title":"Changing wallet password"},{"location":"user-guide/raport-issue/","text":"If you experience any technical issues we suggest you make a report to our development team. Raport issue here Log files \u00b6 In most cases log files are essential for troubleshooting. It could be wise to attach them to the report you submit. Specifically, evox.log or evoxd.log would be useful for our dev team. They are stored in different locations depending on OS: 1 . Windows C:\\Users\\<USER NAME>\\AppData\\Roaming\\Evox 2 . Linux ~/.Evox","title":"Raport Issue"},{"location":"user-guide/raport-issue/#log-files","text":"In most cases log files are essential for troubleshooting. It could be wise to attach them to the report you submit. Specifically, evox.log or evoxd.log would be useful for our dev team. They are stored in different locations depending on OS: 1 . Windows C:\\Users\\<USER NAME>\\AppData\\Roaming\\Evox 2 . Linux ~/.Evox","title":"Log files"}]}